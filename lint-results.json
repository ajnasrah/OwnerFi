
> ownerfi@0.1.0 lint
> eslint --format=json

[{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/eslint.config.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/fix-plan.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/fix-trial-dates-api.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/fix-trial-dates.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/next.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/next.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/postcss.config.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/set-professional.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/app/about/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/app/admin/add-credits-manual/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":30,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState } from 'react';\n\nexport default function ManualAddCredits() {\n  const [email, setEmail] = useState('');\n  const [credits, setCredits] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [message, setMessage] = useState('');\n\n  const addCredits = async () => {\n    if (!email || !credits) {\n      setMessage('Enter email and credits');\n      return;\n    }\n\n    setLoading(true);\n    try {\n      const response = await fetch('/api/admin/add-credits', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          realtorEmail: email,\n          credits: parseInt(credits)\n        })\n      });\n\n      const data = await response.json();\n      setMessage(data.error || 'Credits added successfully!');\n    } catch (err) {\n      setMessage('Failed to add credits');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 p-8\">\n      <div className=\"max-w-md mx-auto bg-white rounded-lg shadow p-6\">\n        <h1 className=\"text-2xl font-bold mb-4\">Add Credits (Admin)</h1>\n        \n        <div className=\"space-y-4\">\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n              Realtor Email\n            </label>\n            <input\n              type=\"email\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n              className=\"w-full p-3 border border-gray-300 rounded-lg\"\n              placeholder=\"realtor@example.com\"\n            />\n          </div>\n          \n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n              Credits to Add\n            </label>\n            <input\n              type=\"number\"\n              value={credits}\n              onChange={(e) => setCredits(e.target.value)}\n              className=\"w-full p-3 border border-gray-300 rounded-lg\"\n              placeholder=\"10\"\n            />\n          </div>\n          \n          <button\n            onClick={addCredits}\n            disabled={loading}\n            className=\"w-full bg-blue-600 text-white py-3 rounded-lg hover:bg-blue-700 disabled:opacity-50\"\n          >\n            {loading ? 'Adding...' : 'Add Credits'}\n          </button>\n          \n          {message && (\n            <p className={`text-sm ${message.includes('success') ? 'text-green-600' : 'text-red-600'}`}>\n              {message}\n            </p>\n          )}\n        </div>\n        \n        <div className=\"mt-6 text-center\">\n          <a href=\"/admin\" className=\"text-gray-600 hover:text-gray-800\">‚Üê Back to Admin</a>\n        </div>\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/app/admin/admin-simple.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":52,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":52,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":66,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":66,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":93,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":93,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useEffect } from 'react';\nimport { useSession } from 'next-auth/react';\nimport { useRouter } from 'next/navigation';\n\nexport default function AdminDashboard() {\n  const { data: session, status } = useSession();\n  const router = useRouter();\n  const [activeTab, setActiveTab] = useState('upload');\n  const [file, setFile] = useState<File | null>(null);\n  const [uploading, setUploading] = useState(false);\n  const [result, setResult] = useState<{ \n    error?: string; \n    success?: string; \n    processed?: number;\n    summary?: {\n      successfulInserts?: number;\n    };\n  } | null>(null);\n  const [properties, setProperties] = useState<Array<{ id: string; address: string; city: string; state: string; listPrice: number; isActive: boolean }>>([]);\n  const [loadingProperties, setLoadingProperties] = useState(false);\n  const [selectedProperties, setSelectedProperties] = useState<string[]>([]);\n\n  // Auth check\n  useEffect(() => {\n    if (status === 'unauthenticated') {\n      router.push('/auth/signin');\n    } else if (status === 'authenticated' && (session?.user as { role?: string })?.role !== 'admin') {\n      router.push('/');\n    }\n  }, [status, session, router]);\n\n  // Upload function\n  const handleUpload = async () => {\n    if (!file) return;\n    \n    setUploading(true);\n    setResult(null);\n\n    try {\n      const formData = new FormData();\n      formData.append('file', file);\n\n      const response = await fetch('/api/admin/upload-properties', {\n        method: 'POST',\n        body: formData,\n      });\n\n      const data = await response.json();\n      setResult(data);\n    } catch (error) {\n      setResult({ error: 'Upload failed' });\n    } finally {\n      setUploading(false);\n    }\n  };\n\n  // Property management functions\n  const fetchProperties = async () => {\n    setLoadingProperties(true);\n    try {\n      const response = await fetch('/api/admin/properties');\n      const data = await response.json();\n      setProperties(data.properties || []);\n    } catch (error) {\n    } finally {\n      setLoadingProperties(false);\n    }\n  };\n\n  const handleSelectAll = () => {\n    setSelectedProperties(\n      selectedProperties.length === properties.length ? [] : properties.map(p => p.id)\n    );\n  };\n\n  const deleteSelected = async () => {\n    if (selectedProperties.length === 0) return;\n    \n    const confirmDelete = confirm(`Permanently delete ${selectedProperties.length} properties?`);\n    if (!confirmDelete) return;\n    \n    try {\n      for (const propertyId of selectedProperties) {\n        await fetch(`/api/admin/properties?propertyId=${propertyId}`, {\n          method: 'DELETE'\n        });\n      }\n      setSelectedProperties([]);\n      fetchProperties();\n      alert('Properties deleted successfully');\n    } catch (error) {\n      alert('Failed to delete properties');\n    }\n  };\n\n  useEffect(() => {\n    if (activeTab === 'manage') {\n      fetchProperties();\n    }\n  }, [activeTab]);\n\n  if (status === 'loading') {\n    return <div className=\"min-h-screen flex items-center justify-center\">Loading...</div>;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 p-6\">\n      <div className=\"max-w-7xl mx-auto\">\n        <h1 className=\"text-3xl font-bold text-gray-900 mb-8\">Admin Dashboard</h1>\n        \n        {/* Tabs */}\n        <div className=\"flex space-x-4 mb-8\">\n          <button\n            onClick={() => setActiveTab('upload')}\n            className={`px-6 py-3 rounded-lg font-medium ${\n              activeTab === 'upload' \n                ? 'bg-blue-600 text-white' \n                : 'bg-gray-200 text-gray-700 hover:bg-gray-300'\n            }`}\n          >\n            üì§ Upload\n          </button>\n          <button\n            onClick={() => setActiveTab('manage')}\n            className={`px-6 py-3 rounded-lg font-medium ${\n              activeTab === 'manage' \n                ? 'bg-blue-600 text-white' \n                : 'bg-gray-200 text-gray-700 hover:bg-gray-300'\n            }`}\n          >\n            üè† Manage\n          </button>\n        </div>\n\n        {/* Upload Tab */}\n        {activeTab === 'upload' && (\n          <div className=\"bg-white rounded-lg p-6 shadow\">\n            <h2 className=\"text-2xl font-semibold mb-6\">Upload Properties</h2>\n            \n            <div className=\"mb-6\">\n              <input\n                type=\"file\"\n                accept=\".csv\"\n                onChange={(e) => setFile(e.target.files?.[0] || null)}\n                className=\"block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100\"\n              />\n            </div>\n\n            <button\n              onClick={handleUpload}\n              disabled={!file || uploading}\n              className=\"px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:bg-gray-400 transition-colors\"\n            >\n              {uploading ? 'Uploading...' : 'Upload CSV'}\n            </button>\n\n            {result && (\n              <div className=\"mt-6 p-4 border rounded-lg\">\n                {result.error ? (\n                  <div className=\"text-red-800\">\n                    <h3 className=\"font-semibold\">Error: {result.error}</h3>\n                  </div>\n                ) : (\n                  <div className=\"text-green-800\">\n                    <h3 className=\"font-semibold\">Success!</h3>\n                    <p>{result.summary?.successfulInserts || 0} properties uploaded</p>\n                  </div>\n                )}\n              </div>\n            )}\n          </div>\n        )}\n\n        {/* Manage Tab */}\n        {activeTab === 'manage' && (\n          <div className=\"bg-white rounded-lg p-6 shadow\">\n            <div className=\"flex justify-between items-center mb-6\">\n              <h2 className=\"text-2xl font-semibold\">Manage Properties</h2>\n              <button\n                onClick={fetchProperties}\n                disabled={loadingProperties}\n                className=\"px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 disabled:bg-gray-400\"\n              >\n                {loadingProperties ? 'Loading...' : 'Refresh'}\n              </button>\n            </div>\n\n            {properties.length > 0 && (\n              <div className=\"mb-4 flex justify-between items-center\">\n                <label className=\"flex items-center space-x-2\">\n                  <input\n                    type=\"checkbox\"\n                    checked={selectedProperties.length === properties.length}\n                    onChange={handleSelectAll}\n                    className=\"rounded\"\n                  />\n                  <span>Select All ({properties.length})</span>\n                </label>\n                {selectedProperties.length > 0 && (\n                  <button\n                    onClick={deleteSelected}\n                    className=\"px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700\"\n                  >\n                    Delete {selectedProperties.length} Selected\n                  </button>\n                )}\n              </div>\n            )}\n\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full border-collapse\">\n                <thead className=\"bg-gray-50\">\n                  <tr>\n                    <th className=\"p-3 text-left border\">Select</th>\n                    <th className=\"p-3 text-left border\">Address</th>\n                    <th className=\"p-3 text-left border\">City</th>\n                    <th className=\"p-3 text-left border\">Price</th>\n                    <th className=\"p-3 text-left border\">Actions</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {properties.map((property) => (\n                    <tr key={property.id} className=\"hover:bg-gray-50\">\n                      <td className=\"p-3 border\">\n                        <input\n                          type=\"checkbox\"\n                          checked={selectedProperties.includes(property.id)}\n                          onChange={() => {\n                            setSelectedProperties(prev =>\n                              prev.includes(property.id)\n                                ? prev.filter(id => id !== property.id)\n                                : [...prev, property.id]\n                            );\n                          }}\n                          className=\"rounded\"\n                        />\n                      </td>\n                      <td className=\"p-3 border font-medium\">{property.address}</td>\n                      <td className=\"p-3 border\">{property.city}, {property.state}</td>\n                      <td className=\"p-3 border\">${property.listPrice?.toLocaleString()}</td>\n                      <td className=\"p-3 border\">\n                        <button\n                          onClick={async () => {\n                            const confirm = window.confirm(`Delete ${property.address}?`);\n                            if (confirm) {\n                              await fetch(`/api/admin/properties?propertyId=${property.id}`, { method: 'DELETE' });\n                              fetchProperties();\n                            }\n                          }}\n                          className=\"px-3 py-1 bg-red-100 text-red-700 rounded text-sm hover:bg-red-200\"\n                        >\n                          Delete\n                        </button>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/app/admin/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":127,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":127,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":165,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":165,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":184,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":184,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":230,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":230,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":251,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":251,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":264,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":264,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":278,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":278,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useEffect } from 'react';\nimport { useSession, signOut } from 'next-auth/react';\nimport { useRouter } from 'next/navigation';\nimport { Header } from '@/components/ui/Header';\nimport { Footer } from '@/components/ui/Footer';\nimport { Button } from '@/components/ui/Button';\nimport { LeadDispute } from '@/lib/firebase-models';\nimport { PropertyListing } from '@/lib/property-schema';\n\n// Extended Property interface for admin with legacy imageUrl field\ninterface AdminProperty extends PropertyListing {\n  imageUrl?: string; // Legacy field for backward compatibility\n}\nimport Image from 'next/image';\n\nexport default function AdminDashboard() {\n  const { data: session, status } = useSession();\n  const router = useRouter();\n  const [activeTab, setActiveTab] = useState<'upload' | 'manage' | 'disputes' | 'contacts'>('upload');\n  const [file, setFile] = useState<File | null>(null);\n  const [uploading, setUploading] = useState(false);\n  const [result, setResult] = useState<{\n    error?: string;\n    details?: string[];\n    success?: boolean;\n    summary?: {\n      totalRows?: number;\n      successfulInserts?: number;\n    };\n    parseErrors?: string[];\n    duplicates?: string[];\n    insertedProperties?: AdminProperty[];\n  } | null>(null);\n  const [properties, setProperties] = useState<AdminProperty[]>([]);\n  const [loadingProperties, setLoadingProperties] = useState(false);\n  const [selectedProperties, setSelectedProperties] = useState<string[]>([]);\n  const [deleting, setDeleting] = useState(false);\n  const [disputes, setDisputes] = useState<LeadDispute[]>([]);\n  const [loadingDisputes, setLoadingDisputes] = useState(false);\n  const [contacts, setContacts] = useState<{\n    id: string;\n    name: string;\n    email: string;\n    phone?: string;\n    message: string;\n    createdAt: string;\n  }[]>([]);\n  const [loadingContacts, setLoadingContacts] = useState(false);\n  \n  // Edit modal state\n  const [editingProperty, setEditingProperty] = useState<AdminProperty | null>(null);\n  const [editForm, setEditForm] = useState<Partial<AdminProperty>>({});\n  const [isSigningOut, setIsSigningOut] = useState(false);\n\n  useEffect(() => {\n    if (status === 'unauthenticated') {\n      router.push('/auth/signin');\n    }\n    \n    if (status === 'authenticated') {\n      const userRole = (session?.user as { role?: string })?.role;\n      if (userRole !== 'admin') {\n        if (userRole === 'buyer') {\n          router.push('/dashboard');\n        } else if (userRole === 'realtor') {\n          router.push('/realtor/dashboard');\n        } else {\n          router.push('/auth/signin');\n        }\n      }\n    }\n  }, [status, session, router]);\n\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const selectedFile = e.target.files?.[0];\n    setFile(selectedFile || null);\n    setResult(null);\n  };\n\n  const handleUpload = async () => {\n    if (!file) return;\n    \n    setUploading(true);\n    setResult(null);\n\n    try {\n      const formData = new FormData();\n      formData.append('file', file);\n\n      const response = await fetch('/api/admin/upload-properties', {\n        method: 'POST',\n        body: formData,\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        setResult({ error: errorData.error || `HTTP ${response.status}: ${response.statusText}` });\n        return;\n      }\n\n      const data = await response.json();\n      setResult(data);\n      \n      if (data.success) {\n        setFile(null);\n        // Clear the file input\n        const fileInput = document.querySelector('input[type=\"file\"]') as HTMLInputElement;\n        if (fileInput) fileInput.value = '';\n      }\n    } catch (error) {\n      setResult({ error: `Upload failed: ${(error as Error).message}` });\n    } finally {\n      setUploading(false);\n    }\n  };\n\n  const fetchProperties = async () => {\n    setLoadingProperties(true);\n    try {\n      const response = await fetch('/api/admin/properties');\n      const data = await response.json();\n      if (data.properties) {\n        setProperties(data.properties);\n      }\n    } catch (error) {\n    } finally {\n      setLoadingProperties(false);\n    }\n  };\n\n  const handleSelectAll = () => {\n    if (selectedProperties.length === properties.length) {\n      setSelectedProperties([]);\n    } else {\n      setSelectedProperties(properties.map(p => p.id));\n    }\n  };\n\n  const handleSelectProperty = (propertyId: string) => {\n    setSelectedProperties(prev => \n      prev.includes(propertyId) \n        ? prev.filter(id => id !== propertyId)\n        : [...prev, propertyId]\n    );\n  };\n\n  const handleDeleteSelected = async () => {\n    if (selectedProperties.length === 0) return;\n    \n    const confirmDelete = confirm(`Are you sure you want to permanently delete ${selectedProperties.length} properties? This cannot be undone and will remove them from all user accounts.`);\n    if (!confirmDelete) return;\n    \n    setDeleting(true);\n    try {\n      for (const propertyId of selectedProperties) {\n        await fetch(`/api/admin/properties?propertyId=${propertyId}`, {\n          method: 'DELETE'\n        });\n      }\n      setSelectedProperties([]);\n      fetchProperties();\n      alert(`${selectedProperties.length} properties deleted successfully`);\n    } catch (error) {\n      alert('Failed to delete some properties');\n    } finally {\n      setDeleting(false);\n    }\n  };\n\n  // Dispute functions\n  const fetchDisputes = async () => {\n    setLoadingDisputes(true);\n    try {\n      const response = await fetch('/api/admin/disputes');\n      const data = await response.json();\n      // Combine pending and resolved disputes\n      const allDisputes = [\n        ...(data.pendingDisputes || []),\n        ...(data.resolvedDisputes || [])\n      ];\n      setDisputes(allDisputes);\n    } catch (error) {\n    } finally {\n      setLoadingDisputes(false);\n    }\n  };\n\n  // Property edit functions\n  const handleEditProperty = (property: AdminProperty) => {\n    setEditingProperty(property);\n    setEditForm({\n      address: property.address || '',\n      city: property.city || '',\n      state: property.state || '',\n      zipCode: property.zipCode || '',\n      bedrooms: property.bedrooms || 0,\n      bathrooms: property.bathrooms || 0,\n      squareFeet: property.squareFeet || 0,\n      listPrice: property.listPrice || 0,\n      downPaymentAmount: property.downPaymentAmount || 0,\n      monthlyPayment: property.monthlyPayment || 0,\n      interestRate: property.interestRate || 0,\n      termYears: property.termYears || 20,\n      description: property.description || '',\n      imageUrl: property.imageUrl || '',\n      isActive: property.isActive !== false\n    });\n  };\n\n  const handleSaveProperty = async () => {\n    if (!editingProperty) return;\n    \n    try {\n      const response = await fetch(`/api/admin/properties/${editingProperty.id}`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(editForm)\n      });\n      \n      if (response.ok) {\n        alert('Property updated successfully');\n        setEditingProperty(null);\n        fetchProperties();\n      } else {\n        const error = await response.json();\n        alert(`Failed to update: ${error.error}`);\n      }\n    } catch (error) {\n      alert('Failed to update property');\n    }\n  };\n\n  const resolveDispute = async (disputeId: string, action: 'approve' | 'reject', refundCredits: number = 1) => {\n    try {\n      const response = await fetch('/api/admin/disputes', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          disputeId,\n          action,\n          refundCredits\n        })\n      });\n\n      if (response.ok) {\n        alert(`Dispute ${action}d successfully`);\n        fetchDisputes();\n      }\n    } catch (error) {\n      alert('Failed to resolve dispute');\n    }\n  };\n\n  // Contact form functions\n  const handleSignOut = async () => {\n    try {\n      setIsSigningOut(true);\n      await signOut({ \n        redirect: false \n      });\n      router.push('/');\n    } catch (error) {\n      setIsSigningOut(false);\n    }\n  };\n\n  const fetchContacts = async () => {\n    setLoadingContacts(true);\n    try {\n      const response = await fetch('/api/admin/contacts');\n      if (!response.ok) {\n        return;\n      }\n      const data = await response.json();\n      setContacts(data.contacts || []);\n    } catch (error) {\n    } finally {\n      setLoadingContacts(false);\n    }\n  };\n\n  useEffect(() => {\n    if (activeTab === 'manage') {\n      fetchProperties();\n    } else if (activeTab === 'disputes') {\n      fetchDisputes();\n    } else if (activeTab === 'contacts') {\n      fetchContacts();\n    }\n  }, [activeTab]);\n\n  if (status === 'loading') {\n    return (\n      <div className=\"min-h-screen bg-primary-bg flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-primary-bg flex flex-col\">\n      <Header />\n      \n      <div className=\"flex-1 px-6 py-12\">\n        <div className=\"max-w-6xl mx-auto\">\n          <div className=\"text-center mb-8 relative\">\n            <button\n              onClick={handleSignOut}\n              disabled={isSigningOut}\n              className=\"absolute top-0 right-0 px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition-colors text-sm disabled:bg-gray-400 disabled:cursor-not-allowed\"\n            >\n              {isSigningOut ? 'Signing out...' : 'Sign Out'}\n            </button>\n            <h1 className=\"text-3xl font-bold text-primary-text mb-2\">Admin Dashboard</h1>\n            <p className=\"text-secondary-text\">Manage properties and system settings</p>\n          </div>\n\n          {/* Tab Navigation */}\n          <div className=\"flex space-x-4 mb-8 justify-center\">\n            <button\n              onClick={() => setActiveTab('upload')}\n              className={`px-6 py-3 rounded-lg font-medium transition-colors ${\n                activeTab === 'upload' \n                  ? 'bg-blue-600 text-white' \n                  : 'bg-gray-200 text-gray-700 hover:bg-gray-300'\n              }`}\n            >\n              üì§ Upload Properties\n            </button>\n            <button\n              onClick={() => setActiveTab('manage')}\n              className={`px-6 py-3 rounded-lg font-medium transition-colors ${\n                activeTab === 'manage' \n                  ? 'bg-blue-600 text-white' \n                  : 'bg-gray-200 text-gray-700 hover:bg-gray-300'\n              }`}\n            >\n              üè† Manage Properties\n            </button>\n            <button\n              onClick={() => setActiveTab('disputes')}\n              className={`px-6 py-3 rounded-lg font-medium transition-colors ${\n                activeTab === 'disputes' \n                  ? 'bg-blue-600 text-white' \n                  : 'bg-gray-200 text-gray-700 hover:bg-gray-300'\n              }`}\n            >\n              ‚öñÔ∏è Disputes\n            </button>\n            <button\n              onClick={() => setActiveTab('contacts')}\n              className={`px-6 py-3 rounded-lg font-medium transition-colors ${\n                activeTab === 'contacts' \n                  ? 'bg-blue-600 text-white' \n                  : 'bg-gray-200 text-gray-700 hover:bg-gray-300'\n              }`}\n            >\n              üìß Contact Forms\n            </button>\n          </div>\n\n          {/* Upload Tab */}\n          {activeTab === 'upload' && (\n            <div className=\"bg-white rounded-xl p-6 shadow-lg\">\n              <h2 className=\"text-2xl font-semibold text-gray-900 mb-6\">Upload Properties</h2>\n              \n              <div className=\"mb-6\">\n                <label className=\"block text-lg font-medium text-gray-700 mb-3\">\n                  Select CSV File\n                </label>\n                <input\n                  type=\"file\"\n                  accept=\".csv\"\n                  onChange={handleFileChange}\n                  className=\"block w-full text-base text-gray-500 file:mr-4 file:py-3 file:px-6 file:rounded-xl file:border-0 file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100 transition-colors\"\n                />\n              </div>\n\n              {file && (\n                <div className=\"mb-6 p-4 bg-blue-50 rounded-xl\">\n                  <p className=\"text-blue-800 font-medium\">File selected: {file.name}</p>\n                  <p className=\"text-blue-600 text-sm\">Size: {(file.size / 1024).toFixed(1)} KB</p>\n                </div>\n              )}\n\n              <Button\n                onClick={handleUpload}\n                variant=\"primary\"\n                size=\"lg\"\n                disabled={!file || uploading}\n                className=\"w-full font-semibold text-lg py-5\"\n              >\n                {uploading ? 'Uploading...' : 'Upload Properties'}\n              </Button>\n\n              {/* Upload Results */}\n              {result && (\n                <div className=\"mt-6\">\n                  {result.error ? (\n                    <div className=\"bg-red-50 border border-red-200 rounded-lg p-4\">\n                      <p className=\"text-red-800 font-medium\">Error: {result.error}</p>\n                      {result.details && Array.isArray(result.details) && (\n                        <div className=\"mt-3\">\n                          <p className=\"text-red-700 text-sm font-medium\">Details:</p>\n                          <ul className=\"text-red-600 text-xs mt-1 space-y-1\">\n                            {result.details.slice(0, 10).map((error: string | { message?: string; error?: string }, index: number) => (\n                              <li key={index}>\n                                {typeof error === 'string' ? error : `Error: ${error.message || error.error || 'Unknown error'}`}\n                              </li>\n                            ))}\n                          </ul>\n                        </div>\n                      )}\n                    </div>\n                  ) : (\n                    <div className=\"bg-green-50 border border-green-200 rounded-lg p-6\">\n                      <h3 className=\"text-lg font-semibold text-green-800 mb-4\">Upload Results</h3>\n                      \n                      <div className=\"grid grid-cols-2 gap-6 mb-6\">\n                        <div className=\"text-center\">\n                          <div className=\"text-3xl font-bold text-green-600\">{result.summary?.totalRows || 0}</div>\n                          <div className=\"text-sm text-green-700\">Total Rows</div>\n                        </div>\n                        <div className=\"text-center\">\n                          <div className=\"text-3xl font-bold text-green-600\">{result.summary?.successfulInserts || 0}</div>\n                          <div className=\"text-sm text-green-700\">Inserted</div>\n                        </div>\n                      </div>\n\n                      {/* Parse Errors Section */}\n                      {result.parseErrors && result.parseErrors.length > 0 && (\n                        <div className=\"mb-6 p-4 bg-yellow-50 border border-yellow-200 rounded-lg\">\n                          <h4 className=\"font-medium text-yellow-800 mb-2\">\n                            ‚ö†Ô∏è Parse Errors ({result.parseErrors.length} rows skipped):\n                          </h4>\n                          <div className=\"text-sm text-yellow-700 space-y-1 max-h-32 overflow-y-auto\">\n                            {result.parseErrors.slice(0, 10).map((error: string, index: number) => (\n                              <div key={index} className=\"font-mono text-xs bg-yellow-100 p-2 rounded\">\n                                {error}\n                              </div>\n                            ))}\n                            {result.parseErrors.length > 10 && (\n                              <div className=\"text-yellow-600 text-xs italic\">\n                                ... and {result.parseErrors.length - 10} more errors\n                              </div>\n                            )}\n                          </div>\n                        </div>\n                      )}\n\n                      {/* Duplicates Section */}\n                      {result.duplicates && result.duplicates.length > 0 && (\n                        <div className=\"mb-6 p-4 bg-orange-50 border border-orange-200 rounded-lg\">\n                          <h4 className=\"font-medium text-orange-800 mb-2\">\n                            üîÑ Duplicates Detected ({result.duplicates.length} rows skipped):\n                          </h4>\n                          <div className=\"text-sm text-orange-700 space-y-1 max-h-32 overflow-y-auto\">\n                            {result.duplicates.slice(0, 10).map((duplicate: string, index: number) => (\n                              <div key={index} className=\"font-mono text-xs bg-orange-100 p-2 rounded\">\n                                {duplicate}\n                              </div>\n                            ))}\n                            {result.duplicates.length > 10 && (\n                              <div className=\"text-orange-600 text-xs italic\">\n                                ... and {result.duplicates.length - 10} more duplicates\n                              </div>\n                            )}\n                          </div>\n                        </div>\n                      )}\n\n                      {result.insertedProperties && result.insertedProperties.length > 0 && (\n                        <div>\n                          <p className=\"font-medium text-green-800 mb-2\">Sample Inserted Properties:</p>\n                          <div className=\"text-sm text-green-700 space-y-1\">\n                            {result.insertedProperties.slice(0, 5).map((property: AdminProperty, index: number) => (\n                              <div key={index}>\n                                {property.address}, {property.city}, {property.state}\n                              </div>\n                            ))}\n                            {result.insertedProperties.length > 5 && (\n                              <div>... and {result.insertedProperties.length - 5} more</div>\n                            )}\n                          </div>\n                        </div>\n                      )}\n                    </div>\n                  )}\n                </div>\n              )}\n            </div>\n          )}\n\n          {/* Manage Properties Tab */}\n          {activeTab === 'manage' && (\n            <div className=\"bg-white rounded-xl p-6 shadow-lg\">\n              <div className=\"flex items-center justify-between mb-6\">\n                <h2 className=\"text-2xl font-semibold text-gray-900\">Manage Properties</h2>\n                <div className=\"flex items-center space-x-3\">\n                  <span className=\"text-sm text-gray-600\">\n                    Showing {properties.length} properties {/* TODO: Show total when available */}\n                  </span>\n                  <button\n                    onClick={async () => {\n                      if (confirm('‚ö†Ô∏è This will DELETE ALL PROPERTIES from the database. Are you sure?')) {\n                        try {\n                          const response = await fetch('/api/admin/clean-database', { method: 'POST' });\n                          const data = await response.json();\n                          if (data.success) {\n                            alert(`‚úÖ ${data.message}`);\n                            fetchProperties();\n                          } else {\n                            alert(`‚ùå Error: ${data.error}`);\n                          }\n                        } catch (error) {\n                          alert(`‚ùå Failed to clean database: ${error}`);\n                        }\n                      }\n                    }}\n                    className=\"px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors text-sm\"\n                  >\n                    üóëÔ∏è Clean All\n                  </button>\n                  <button\n                    onClick={fetchProperties}\n                    disabled={loadingProperties}\n                    className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors disabled:bg-gray-400\"\n                  >\n                    {loadingProperties ? 'Loading...' : 'Refresh'}\n                  </button>\n                </div>\n              </div>\n\n              {/* Bulk Actions */}\n              {properties.length > 0 && (\n                <div className=\"flex items-center justify-between bg-gray-50 rounded-lg p-4 mb-6\">\n                  <div className=\"flex items-center space-x-4\">\n                    <label className=\"flex items-center space-x-2\">\n                      <input\n                        type=\"checkbox\"\n                        checked={selectedProperties.length === properties.length && properties.length > 0}\n                        onChange={handleSelectAll}\n                        className=\"w-5 h-5 text-blue-600 border-gray-300 rounded focus:ring-blue-500\"\n                      />\n                      <span className=\"text-gray-700\">Select All ({properties.length})</span>\n                    </label>\n                    {selectedProperties.length > 0 && (\n                      <span className=\"text-blue-600 font-medium\">\n                        {selectedProperties.length} selected\n                      </span>\n                    )}\n                  </div>\n                  \n                  {selectedProperties.length > 0 && (\n                    <button\n                      onClick={handleDeleteSelected}\n                      disabled={deleting}\n                      className=\"px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors disabled:bg-gray-400\"\n                    >\n                      {deleting ? 'Deleting...' : `Permanently Delete ${selectedProperties.length} Properties`}\n                    </button>\n                  )}\n                </div>\n              )}\n\n              {/* Properties Table */}\n              {loadingProperties ? (\n                <div className=\"text-center py-12\">\n                  <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto\"></div>\n                  <p className=\"mt-4 text-gray-600\">Loading properties...</p>\n                </div>\n              ) : properties.length === 0 ? (\n                <div className=\"text-center py-12\">\n                  <div className=\"text-6xl mb-4\">üè†</div>\n                  <h3 className=\"text-xl font-semibold text-gray-800 mb-2\">No Properties Yet</h3>\n                  <p className=\"text-gray-600 mb-6\">Upload a CSV file to add properties to your system</p>\n                  <button\n                    onClick={() => setActiveTab('upload')}\n                    className=\"px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors\"\n                  >\n                    Upload Properties\n                  </button>\n                </div>\n              ) : (\n                <div className=\"overflow-x-auto\">\n                  <table className=\"w-full border-collapse bg-white rounded-lg overflow-hidden shadow\">\n                    <thead className=\"bg-gray-50\">\n                      <tr>\n                        <th className=\"p-4 text-left border-b\">\n                          <input\n                            type=\"checkbox\"\n                            checked={selectedProperties.length === properties.length && properties.length > 0}\n                            onChange={handleSelectAll}\n                            className=\"w-4 h-4 text-blue-600 border-gray-300 rounded\"\n                          />\n                        </th>\n                        <th className=\"p-4 text-left border-b font-semibold text-gray-700\">Image</th>\n                        <th className=\"p-4 text-left border-b font-semibold text-gray-700\">Address</th>\n                        <th className=\"p-4 text-left border-b font-semibold text-gray-700\">City, State</th>\n                        <th className=\"p-4 text-left border-b font-semibold text-gray-700\">Price</th>\n                        <th className=\"p-4 text-left border-b font-semibold text-gray-700\">Beds/Baths</th>\n                        <th className=\"p-4 text-left border-b font-semibold text-gray-700\">Actions</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {properties.map((property) => (\n                        <tr key={property.id} className=\"border-b hover:bg-gray-50 transition-colors\">\n                          <td className=\"p-4\">\n                            <input\n                              type=\"checkbox\"\n                              checked={selectedProperties.includes(property.id)}\n                              onChange={() => handleSelectProperty(property.id)}\n                              className=\"w-4 h-4 text-blue-600 border-gray-300 rounded\"\n                            />\n                          </td>\n                          <td className=\"p-4\">\n                            {property.imageUrl ? (\n                              <Image \n                                src={property.imageUrl || '/placeholder-house.jpg'} \n                                alt={property.address}\n                                width={80}\n                                height={64}\n                                className=\"w-20 h-16 object-cover rounded cursor-pointer hover:opacity-80\"\n                                onClick={() => window.open(property.imageUrl || '', '_blank')}\n                              />\n                            ) : (\n                              <div className=\"w-20 h-16 bg-gray-200 rounded flex items-center justify-center text-gray-400\">\n                                No Image\n                              </div>\n                            )}\n                          </td>\n                          <td className=\"p-4\">\n                            <div className=\"font-medium text-gray-900\">{property.address}</div>\n                          </td>\n                          <td className=\"p-4 text-gray-700\">{property.city}, {property.state} {property.zipCode}</td>\n                          <td className=\"p-4\">\n                            <div className=\"font-semibold text-green-600\">\n                              ${property.listPrice?.toLocaleString() || 'N/A'}\n                            </div>\n                            {property.monthlyPayment && (\n                              <div className=\"text-sm text-gray-500\">\n                                ${property.monthlyPayment?.toLocaleString()}/mo\n                              </div>\n                            )}\n                          </td>\n                          <td className=\"p-4 text-gray-700\">\n                            {property.bedrooms || 'N/A'} bed / {property.bathrooms || 'N/A'} bath\n                            {property.squareFeet && property.squareFeet > 0 && (\n                              <div className=\"text-sm text-gray-500\">{property.squareFeet.toLocaleString()} sq ft</div>\n                            )}\n                          </td>\n                          <td className=\"p-4\">\n                            <div className=\"flex space-x-2\">\n                              <button\n                                onClick={() => handleEditProperty(property)}\n                                className=\"px-3 py-1 bg-blue-100 text-blue-700 rounded text-sm hover:bg-blue-200 transition-colors\"\n                              >\n                                Edit\n                              </button>\n                              <button\n                                onClick={async () => {\n                                  const confirm = window.confirm(`Permanently delete ${property.address}? This cannot be undone.`);\n                                  if (confirm) {\n                                    await fetch(`/api/admin/properties?propertyId=${property.id}`, { method: 'DELETE' });\n                                    fetchProperties();\n                                  }\n                                }}\n                                className=\"px-3 py-1 bg-red-100 text-red-700 rounded text-sm hover:bg-red-200 transition-colors\"\n                              >\n                                Delete\n                              </button>\n                            </div>\n                          </td>\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                </div>\n              )}\n            </div>\n          )}\n\n          {/* Disputes Tab */}\n          {activeTab === 'disputes' && (\n            <div className=\"bg-white rounded-xl p-6 shadow-lg\">\n              <div className=\"flex items-center justify-between mb-6\">\n                <div>\n                  <h2 className=\"text-2xl font-semibold text-gray-900\">Lead Disputes</h2>\n                  <p className=\"text-gray-600\">Manage realtor complaints and refund requests</p>\n                </div>\n                <button\n                  onClick={fetchDisputes}\n                  disabled={loadingDisputes}\n                  className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors disabled:bg-gray-400\"\n                >\n                  {loadingDisputes ? 'Loading...' : 'Refresh'}\n                </button>\n              </div>\n\n              {loadingDisputes ? (\n                <div className=\"text-center py-12\">\n                  <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto\"></div>\n                  <p className=\"mt-4 text-gray-600\">Loading disputes...</p>\n                </div>\n              ) : disputes.length === 0 ? (\n                <div className=\"text-center py-12\">\n                  <div className=\"text-6xl mb-4\">‚öñÔ∏è</div>\n                  <h3 className=\"text-xl font-semibold text-gray-800 mb-2\">No Disputes</h3>\n                  <p className=\"text-gray-600\">No realtor disputes at this time</p>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {disputes.map((dispute) => (\n                    <div key={dispute.id} className=\"border border-gray-200 rounded-lg p-4 bg-gray-50\">\n                      <div className=\"flex justify-between items-start mb-4\">\n                        <div>\n                          <h3 className=\"font-semibold text-gray-900\">Dispute #{dispute.id.substring(0, 8)}...</h3>\n                          <div className=\"mt-2 space-y-1\">\n                            <p className=\"text-gray-800 font-medium\">üìã Transaction Details:</p>\n                            <p className=\"text-gray-600\">‚Ä¢ Realtor: {dispute.realtorName} ({dispute.realtorEmail})</p>\n                            <p className=\"text-gray-600\">‚Ä¢ Purchase Date: {new Date(dispute.purchaseDate).toLocaleDateString()}</p>\n                          </div>\n                          <div className=\"mt-2 space-y-1\">\n                            <p className=\"text-gray-800 font-medium\">üë§ Buyer Information:</p>\n                            <p className=\"text-gray-600\">‚Ä¢ Name: {dispute.buyerName}</p>\n                            <p className=\"text-gray-600\">‚Ä¢ Phone: {dispute.buyerPhone || 'Not provided'}</p>\n                            <p className=\"text-gray-600\">‚Ä¢ Email: {dispute.buyerEmail || 'Not provided'}</p>\n                            <p className=\"text-gray-600\">‚Ä¢ Location: {dispute.buyerCity}, {dispute.buyerState}</p>\n                            <p className=\"text-gray-600\">‚Ä¢ Budget: ${dispute.maxMonthlyPayment}/mo, ${dispute.maxDownPayment} down</p>\n                          </div>\n                          <p className=\"text-sm text-gray-500 mt-2\">Submitted: {dispute.submittedAt?.toDate?.()?.toLocaleString() || 'N/A'}</p>\n                        </div>\n                        <span className={`px-2 py-1 rounded-full text-xs font-medium ${\n                          dispute.status === 'pending' ? 'bg-yellow-100 text-yellow-800' :\n                          dispute.status === 'approved' ? 'bg-green-100 text-green-800' :\n                          'bg-red-100 text-red-800'\n                        }`}>\n                          {dispute.status}\n                        </span>\n                      </div>\n\n                      <div className=\"mb-4\">\n                        <p className=\"font-medium text-gray-800 mb-2\">Reason:</p>\n                        <div className=\"text-gray-700 bg-white p-3 rounded border\">\n                          <p className=\"font-semibold\">\n                            {dispute.reason === 'no_response' ? '‚ùå No Response from Buyer' :\n                             dispute.reason === 'wrong_info' ? '‚ö†Ô∏è Wrong/Invalid Information' :\n                             dispute.reason === 'not_interested' ? 'üö´ Buyer Not Interested' :\n                             dispute.reason === 'other' ? 'üìù Other Reason' :\n                             dispute.reason || 'No reason provided'}\n                          </p>\n                          {dispute.explanation && (\n                            <p className=\"mt-2 text-sm\">{dispute.explanation}</p>\n                          )}\n                          {dispute.contactAttempts && (\n                            <p className=\"mt-2 text-sm text-gray-600\">\n                              <strong>Contact Attempts:</strong> {dispute.contactAttempts}\n                            </p>\n                          )}\n                        </div>\n                      </div>\n                      {dispute.evidence && Array.isArray(dispute.evidence) && dispute.evidence.length > 0 && (\n                        <div className=\"mb-4\">\n                          <p className=\"font-medium text-gray-800 mb-2\">Evidence Images:</p>\n                          <div className=\"flex flex-wrap gap-2\">\n                            {(dispute.evidence as string[])?.map((imageUrl: string, index: number) => (\n                              <Image \n                                key={index}\n                                src={imageUrl} \n                                alt={`Evidence ${index + 1}`}\n                                width={128}\n                                height={96}\n                                className=\"w-32 h-24 object-cover rounded border cursor-pointer hover:opacity-80\"\n                                onClick={() => window.open(imageUrl, '_blank')}\n                              />\n                            ))}\n                          </div>\n                        </div>\n                      )}\n\n                      {dispute.status === 'pending' && (\n                        <div className=\"flex items-center space-x-4\">\n                          <div className=\"flex items-center space-x-2\">\n                            <label className=\"text-sm text-gray-700\">Credits to refund:</label>\n                            <select \n                              id={`credits-${dispute.id}`}\n                              className=\"border border-gray-300 rounded px-2 py-1 text-sm\"\n                              defaultValue=\"1\"\n                            >\n                              <option value=\"1\">1 Credit</option>\n                              <option value=\"2\">2 Credits</option>\n                              <option value=\"3\">3 Credits</option>\n                              <option value=\"5\">5 Credits</option>\n                            </select>\n                          </div>\n                          <button\n                            onClick={() => {\n                              const creditsSelect = document.getElementById(`credits-${dispute.id}`) as HTMLSelectElement;\n                              const credits = parseInt(creditsSelect?.value || '1');\n                              resolveDispute(dispute.id, 'approve', credits);\n                            }}\n                            className=\"px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700 transition-colors\"\n                          >\n                            Approve & Refund Credits\n                          </button>\n                          <button\n                            onClick={() => resolveDispute(dispute.id, 'reject', 0)}\n                            className=\"px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700 transition-colors\"\n                          >\n                            Reject Dispute\n                          </button>\n                        </div>\n                      )}\n                    </div>\n                  ))}\n                </div>\n              )}\n            </div>\n          )}\n\n          {/* Contact Forms Tab */}\n          {activeTab === 'contacts' && (\n            <div className=\"bg-white rounded-xl p-6 shadow-lg\">\n              <div className=\"flex items-center justify-between mb-6\">\n                <div>\n                  <h2 className=\"text-2xl font-semibold text-gray-900\">Contact Form Submissions</h2>\n                  <p className=\"text-gray-600\">Messages from website contact forms</p>\n                </div>\n                <button\n                  onClick={fetchContacts}\n                  disabled={loadingContacts}\n                  className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors disabled:bg-gray-400\"\n                >\n                  {loadingContacts ? 'Loading...' : 'Refresh'}\n                </button>\n              </div>\n\n              {loadingContacts ? (\n                <div className=\"text-center py-12\">\n                  <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto\"></div>\n                  <p className=\"mt-4 text-gray-600\">Loading contacts...</p>\n                </div>\n              ) : contacts.length === 0 ? (\n                <div className=\"text-center py-12\">\n                  <div className=\"text-6xl mb-4\">üìß</div>\n                  <h3 className=\"text-xl font-semibold text-gray-800 mb-2\">No Contact Forms</h3>\n                  <p className=\"text-gray-600\">No contact form submissions yet</p>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {contacts.map((contact) => (\n                    <div key={contact.id} className=\"border border-gray-200 rounded-lg p-4 bg-gray-50\">\n                      <div className=\"flex justify-between items-start mb-3\">\n                        <div>\n                          <h3 className=\"font-semibold text-gray-900\">{contact.name}</h3>\n                          <p className=\"text-gray-600\">{contact.email}</p>\n                          {contact.phone && <p className=\"text-gray-600\">{contact.phone}</p>}\n                        </div>\n                        <span className=\"text-sm text-gray-500\">\n                          {new Date(contact.createdAt).toLocaleDateString()}\n                        </span>\n                      </div>\n                      <div className=\"bg-white p-3 rounded border\">\n                        <p className=\"text-gray-700\">{contact.message}</p>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      </div>\n      \n      {/* Edit Property Modal */}\n      {editingProperty && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\n          <div className=\"bg-white rounded-xl p-6 max-w-2xl w-full max-h-[90vh] overflow-y-auto\">\n            <div className=\"flex justify-between items-center mb-6\">\n              <h2 className=\"text-2xl font-bold text-gray-900\">Edit Property</h2>\n              <button\n                onClick={() => setEditingProperty(null)}\n                className=\"text-gray-500 hover:text-gray-700\"\n              >\n                ‚úï\n              </button>\n            </div>\n            \n            <div className=\"space-y-4\">\n              {/* Property ID (read-only) */}\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">Property ID</label>\n                <input\n                  type=\"text\"\n                  value={editingProperty.id}\n                  disabled\n                  className=\"w-full p-2 border rounded bg-gray-100 text-gray-500\"\n                />\n              </div>\n              \n              {/* Address */}\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">Address</label>\n                <input\n                  type=\"text\"\n                  value={editForm.address}\n                  onChange={(e) => setEditForm({ ...editForm, address: e.target.value })}\n                  className=\"w-full p-2 border rounded\"\n                />\n              </div>\n              \n              {/* City, State, Zip in a row */}\n              <div className=\"grid grid-cols-3 gap-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">City</label>\n                  <input\n                    type=\"text\"\n                    value={editForm.city}\n                    onChange={(e) => setEditForm({ ...editForm, city: e.target.value })}\n                    className=\"w-full p-2 border rounded\"\n                  />\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">State</label>\n                  <input\n                    type=\"text\"\n                    value={editForm.state}\n                    onChange={(e) => setEditForm({ ...editForm, state: e.target.value })}\n                    className=\"w-full p-2 border rounded\"\n                  />\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">Zip Code</label>\n                  <input\n                    type=\"text\"\n                    value={editForm.zipCode}\n                    onChange={(e) => setEditForm({ ...editForm, zipCode: e.target.value })}\n                    className=\"w-full p-2 border rounded\"\n                  />\n                </div>\n              </div>\n              \n              {/* Beds, Baths, Sq Ft */}\n              <div className=\"grid grid-cols-3 gap-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">Bedrooms</label>\n                  <input\n                    type=\"number\"\n                    value={editForm.bedrooms}\n                    onChange={(e) => setEditForm({ ...editForm, bedrooms: parseInt(e.target.value) })}\n                    className=\"w-full p-2 border rounded\"\n                  />\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">Bathrooms</label>\n                  <input\n                    type=\"number\"\n                    step=\"0.5\"\n                    value={editForm.bathrooms}\n                    onChange={(e) => setEditForm({ ...editForm, bathrooms: parseFloat(e.target.value) })}\n                    className=\"w-full p-2 border rounded\"\n                  />\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">Square Feet</label>\n                  <input\n                    type=\"number\"\n                    value={editForm.squareFeet}\n                    onChange={(e) => setEditForm({ ...editForm, squareFeet: parseInt(e.target.value) })}\n                    className=\"w-full p-2 border rounded\"\n                  />\n                </div>\n              </div>\n              \n              {/* Financial Info */}\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">List Price</label>\n                  <input\n                    type=\"number\"\n                    value={editForm.listPrice}\n                    onChange={(e) => setEditForm({ ...editForm, listPrice: parseFloat(e.target.value) })}\n                    className=\"w-full p-2 border rounded\"\n                  />\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">Down Payment</label>\n                  <input\n                    type=\"number\"\n                    value={editForm.downPaymentAmount}\n                    onChange={(e) => setEditForm({ ...editForm, downPaymentAmount: parseFloat(e.target.value) })}\n                    className=\"w-full p-2 border rounded\"\n                  />\n                </div>\n              </div>\n              \n              <div className=\"grid grid-cols-3 gap-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">Monthly Payment</label>\n                  <input\n                    type=\"number\"\n                    value={editForm.monthlyPayment}\n                    onChange={(e) => setEditForm({ ...editForm, monthlyPayment: parseFloat(e.target.value) })}\n                    className=\"w-full p-2 border rounded\"\n                  />\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">Interest Rate (%)</label>\n                  <input\n                    type=\"number\"\n                    step=\"0.1\"\n                    value={editForm.interestRate}\n                    onChange={(e) => setEditForm({ ...editForm, interestRate: parseFloat(e.target.value) })}\n                    className=\"w-full p-2 border rounded\"\n                  />\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">Term (Years)</label>\n                  <input\n                    type=\"number\"\n                    value={editForm.termYears}\n                    onChange={(e) => setEditForm({ ...editForm, termYears: parseInt(e.target.value) })}\n                    className=\"w-full p-2 border rounded\"\n                  />\n                </div>\n              </div>\n              \n              {/* Description */}\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">Description</label>\n                <textarea\n                  value={editForm.description}\n                  onChange={(e) => setEditForm({ ...editForm, description: e.target.value })}\n                  className=\"w-full p-2 border rounded\"\n                  rows={3}\n                />\n              </div>\n              \n              {/* Image URL */}\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">Image URL</label>\n                <input\n                  type=\"text\"\n                  value={editForm.imageUrl}\n                  onChange={(e) => setEditForm({ ...editForm, imageUrl: e.target.value })}\n                  className=\"w-full p-2 border rounded\"\n                />\n                {editForm.imageUrl && (\n                  <Image \n                    src={editForm.imageUrl || '/placeholder-house.jpg'} \n                    alt=\"Preview\" \n                    width={400}\n                    height={192}\n                    className=\"mt-2 w-full h-48 object-cover rounded\"\n                  />\n                )}\n              </div>\n              \n              {/* Active Status */}\n              <div className=\"flex items-center\">\n                <input\n                  type=\"checkbox\"\n                  id=\"isActive\"\n                  checked={editForm.isActive}\n                  onChange={(e) => setEditForm({ ...editForm, isActive: e.target.checked })}\n                  className=\"w-4 h-4 text-blue-600 border-gray-300 rounded\"\n                />\n                <label htmlFor=\"isActive\" className=\"ml-2 text-sm font-medium text-gray-700\">\n                  Property is Active\n                </label>\n              </div>\n              \n              {/* Action Buttons */}\n              <div className=\"flex justify-end space-x-3 pt-4\">\n                <button\n                  onClick={() => setEditingProperty(null)}\n                  className=\"px-4 py-2 bg-gray-200 text-gray-700 rounded hover:bg-gray-300 transition-colors\"\n                >\n                  Cancel\n                </button>\n                <button\n                  onClick={handleSaveProperty}\n                  className=\"px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors\"\n                >\n                  Save Changes\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n      \n      <Footer />\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/app/api/admin/activate-subscription/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":58,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":58,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { \n  doc,\n  updateDoc,\n  setDoc,\n  serverTimestamp\n} from 'firebase/firestore';\nimport { getSafeDb } from '@/lib/firebase-safe';\nimport { firestoreHelpers } from '@/lib/firestore';\n\nexport async function POST(request: NextRequest) {\n  try {\n    const { realtorId, plan, creditsToAdd } = await request.json();\n    \n    // Update realtor to active subscription\n    const db = getSafeDb();\n    await updateDoc(doc(db, 'realtors', realtorId), {\n      credits: 748 + creditsToAdd, // Keep existing credits plus new ones\n      currentPlan: plan,\n      subscriptionStatus: 'active',\n      isOnTrial: false,\n      updatedAt: serverTimestamp()\n    });\n    \n    // Create subscription record\n    const periodStart = new Date();\n    const periodEnd = new Date();\n    periodEnd.setDate(periodEnd.getDate() + 30);\n    \n    await setDoc(doc(db, 'realtorSubscriptions', firestoreHelpers.generateId()), {\n      realtorId: realtorId,\n      plan: plan,\n      status: 'active',\n      monthlyPrice: 1000,\n      creditsPerMonth: 10,\n      currentPeriodStart: periodStart,\n      currentPeriodEnd: periodEnd,\n      createdAt: serverTimestamp(),\n      updatedAt: serverTimestamp()\n    });\n    \n    // Add transaction record\n    await setDoc(doc(db, 'transactions', firestoreHelpers.generateId()), {\n      realtorId: realtorId,\n      type: 'subscription_start',\n      description: 'Professional Package subscription activated',\n      amount: 1000,\n      credits: creditsToAdd,\n      createdAt: serverTimestamp()\n    });\n    \n    return NextResponse.json({\n      success: true,\n      message: 'Subscription activated successfully',\n      newCredits: 748 + creditsToAdd\n    });\n    \n  } catch (error) {\n    return NextResponse.json(\n      { error: 'Failed to activate subscription' },\n      { status: 500 }\n    );\n  }\n}","usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/app/api/admin/add-credits/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/app/api/admin/check-credits/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":74,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":74,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextResponse } from 'next/server';\nimport { \n  collection, \n  query, \n  getDocs\n} from 'firebase/firestore';\nimport { db } from '@/lib/firebase';\n\nexport async function GET() {\n  try {\n    if (!db) {\n      return NextResponse.json(\n        { error: 'Database not available' },\n        { status: 500 }\n      );\n    }\n\n    // Find all realtors with your email/name\n    const realtorsQuery = query(\n      collection(db, 'realtors')\n    );\n    const realtorDocs = await getDocs(realtorsQuery);\n    \n    const accounts = [];\n    \n    for (const doc of realtorDocs.docs) {\n      const data = doc.data();\n      if (data.firstName?.toLowerCase().includes('abdullah') || \n          data.email?.includes('abunasrah') ||\n          data.lastName?.toLowerCase().includes('abunasrah')) {\n        accounts.push({\n          id: doc.id,\n          firstName: data.firstName,\n          lastName: data.lastName,\n          email: data.email,\n          credits: data.credits,\n          isOnTrial: data.isOnTrial,\n          userId: data.userId,\n          createdAt: data.createdAt?.toDate?.()?.toISOString() || data.createdAt,\n          updatedAt: data.updatedAt?.toDate?.()?.toISOString() || data.updatedAt\n        });\n      }\n    }\n    \n    // Also check transactions to see credit movements\n    const transactionsQuery = query(collection(db, 'transactions'));\n    const transactionDocs = await getDocs(transactionsQuery);\n    \n    const creditTransactions = [];\n    for (const doc of transactionDocs.docs) {\n      const data = doc.data();\n      if (accounts.some(acc => acc.id === data.realtorId)) {\n        creditTransactions.push({\n          id: doc.id,\n          realtorId: data.realtorId,\n          type: data.type,\n          credits: data.credits,\n          description: data.description,\n          createdAt: data.createdAt?.toDate?.()?.toISOString() || data.createdAt\n        });\n      }\n    }\n    \n    // Sort transactions by date\n    creditTransactions.sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());\n    \n    return NextResponse.json({\n      accounts,\n      totalAccounts: accounts.length,\n      totalCredits: accounts.reduce((sum, acc) => sum + (acc.credits || 0), 0),\n      recentTransactions: creditTransactions.slice(0, 10)\n    });\n    \n  } catch (error) {\n    return NextResponse.json(\n      { error: 'Failed to check credits' },\n      { status: 500 }\n    );\n  }\n}","usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/app/api/admin/check-session/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":64,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":64,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextResponse } from 'next/server';\nimport { getServerSession } from 'next-auth/next';\nimport { authOptions } from '@/lib/auth';\nimport { \n  collection, \n  query, \n  where,\n  getDocs\n} from 'firebase/firestore';\nimport { db } from '@/lib/firebase';\nimport { ExtendedSession } from '@/types/session';\n\nexport async function GET() {\n  try {\n    const session = await getServerSession(authOptions) as ExtendedSession;\n    \n    if (!session) {\n      return NextResponse.json({ \n        authenticated: false,\n        error: 'No session found' \n      });\n    }\n    \n    if (!db) {\n      return NextResponse.json(\n        { error: 'Database not available' },\n        { status: 500 }\n      );\n    }\n\n    // Find realtor profile for this user\n    const realtorsQuery = query(\n      collection(db, 'realtors'),\n      where('userId', '==', session.user.id)\n    );\n    const realtorDocs = await getDocs(realtorsQuery);\n    \n    let realtorProfile = null;\n    if (!realtorDocs.empty) {\n      const doc = realtorDocs.docs[0];\n      realtorProfile = {\n        id: doc.id,\n        ...doc.data(),\n        createdAt: doc.data().createdAt?.toDate?.()?.toISOString() || doc.data().createdAt,\n        updatedAt: doc.data().updatedAt?.toDate?.()?.toISOString() || doc.data().updatedAt\n      };\n    }\n    \n    return NextResponse.json({\n      authenticated: true,\n      session: {\n        user: {\n          id: session.user.id,\n          email: session.user.email,\n          name: session.user.name,\n          role: session.user.role\n        }\n      },\n      realtorProfile,\n      multipleProfiles: realtorDocs.docs.length > 1,\n      profileCount: realtorDocs.docs.length\n    });\n    \n  } catch (error) {\n    return NextResponse.json(\n      { error: 'Failed to check session' },\n      { status: 500 }\n    );\n  }\n}","usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/app/api/admin/contacts/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":52,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":52,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":96,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":96,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { \n  collection, \n  query, \n  getDocs, \n  orderBy,\n  doc,\n  deleteDoc\n} from 'firebase/firestore';\nimport { db } from '@/lib/firebase';\nimport { getServerSession } from 'next-auth/next';\nimport { authOptions } from '@/lib/auth';\nimport { ExtendedSession } from '@/types/session';\n\n// GET - Fetch all contact form submissions\nexport async function GET() {\n  try {\n    if (!db) {\n      return NextResponse.json(\n        { error: 'Database not available' },\n        { status: 500 }\n      );\n    }\n\n    const session = await getServerSession(authOptions) as ExtendedSession;\n    \n    if (!session?.user || session.user?.role !== 'admin') {\n      return NextResponse.json(\n        { error: 'Admin access required' },\n        { status: 403 }\n      );\n    }\n\n    const contactsQuery = query(\n      collection(db, 'contactSubmissions'),\n      orderBy('createdAt', 'desc')\n    );\n    const contactDocs = await getDocs(contactsQuery);\n\n    const contacts = contactDocs.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data(),\n      createdAt: doc.data().createdAt?.toDate?.()?.toISOString() || doc.data().createdAt,\n      updatedAt: doc.data().updatedAt?.toDate?.()?.toISOString() || doc.data().updatedAt\n    }));\n\n    return NextResponse.json({\n      contacts,\n      totalContacts: contacts.length\n    });\n\n  } catch (error) {\n    return NextResponse.json(\n      { error: 'Failed to load contact submissions' },\n      { status: 500 }\n    );\n  }\n}\n\n// DELETE - Delete a contact submission\nexport async function DELETE(request: NextRequest) {\n  try {\n    if (!db) {\n      return NextResponse.json(\n        { error: 'Database not available' },\n        { status: 500 }\n      );\n    }\n\n    const session = await getServerSession(authOptions) as ExtendedSession;\n    \n    if (!session?.user || session.user?.role !== 'admin') {\n      return NextResponse.json(\n        { error: 'Admin access required' },\n        { status: 403 }\n      );\n    }\n\n    const { searchParams } = new URL(request.url);\n    const contactId = searchParams.get('id');\n\n    if (!contactId) {\n      return NextResponse.json(\n        { error: 'Contact ID required' },\n        { status: 400 }\n      );\n    }\n\n    await deleteDoc(doc(db, 'contactSubmissions', contactId));\n\n    return NextResponse.json({\n      success: true,\n      message: 'Contact deleted successfully'\n    });\n\n  } catch (error) {\n    return NextResponse.json(\n      { error: 'Failed to delete contact' },\n      { status: 500 }\n    );\n  }\n}","usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/app/api/admin/disputes/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'where' is defined but never used.","line":11,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":65,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":65,"endColumn":23}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { \n  collection, \n  query, \n  getDocs, \n  doc,\n  updateDoc,\n  getDoc,\n  setDoc,\n  orderBy,\n  where,\n  serverTimestamp\n} from 'firebase/firestore';\nimport { db } from '@/lib/firebase';\nimport { logError, logInfo } from '@/lib/logger';\n\n// GET - Fetch all disputes for admin review\nexport async function GET() {\n  try {\n    if (!db) {\n      return NextResponse.json(\n        { error: 'Database not available' },\n        { status: 500 }\n      );\n    }\n\n    // TODO: Add admin role check when admin auth is implemented\n    // For now, this is open for development\n    \n    const disputesQuery = query(\n      collection(db!, 'leadDisputes'),\n      orderBy('submittedAt', 'desc')\n    );\n    const disputeDocs = await getDocs(disputesQuery);\n\n    // Fetch disputes and enhance with buyer details\n    const disputes = await Promise.all(disputeDocs.docs.map(async (docSnapshot) => {\n      const disputeData = docSnapshot.data();\n      let buyerDetails = null;\n      \n      // Try to fetch the related purchase to get buyer ID\n      if (disputeData.transactionId) {\n        try {\n          const purchaseDoc = await getDoc(doc(db!, 'buyerLeadPurchases', disputeData.transactionId));\n          if (purchaseDoc.exists()) {\n            const purchaseData = purchaseDoc.data();\n            \n            // Fetch buyer profile\n            if (purchaseData.buyerId) {\n              const buyerDoc = await getDoc(doc(db!, 'buyerProfiles', purchaseData.buyerId));\n              if (buyerDoc.exists()) {\n                const buyer = buyerDoc.data();\n                const criteria = buyer.searchCriteria || {};\n                buyerDetails = {\n                  buyerPhone: buyer.phone || 'No phone',\n                  buyerEmail: buyer.email || 'No email',\n                  buyerCity: criteria.cities?.[0] || buyer.preferredCity || 'Unknown',\n                  buyerState: criteria.state || buyer.preferredState || '',\n                  maxMonthlyPayment: criteria.maxMonthlyPayment || buyer.maxMonthlyPayment || 0,\n                  maxDownPayment: criteria.maxDownPayment || buyer.maxDownPayment || 0\n                };\n              }\n            }\n          }\n        } catch (error) {\n        }\n      }\n      \n      return {\n        id: docSnapshot.id,\n        ...disputeData,\n        ...buyerDetails,\n        status: disputeData.status || 'pending',\n        submittedAt: disputeData.submittedAt?.toDate?.()?.toISOString() || disputeData.submittedAt,\n        createdAt: disputeData.createdAt?.toDate?.()?.toISOString() || disputeData.createdAt,\n        updatedAt: disputeData.updatedAt?.toDate?.()?.toISOString() || disputeData.updatedAt,\n        resolvedAt: disputeData.resolvedAt?.toDate?.()?.toISOString() || disputeData.resolvedAt\n      };\n    }));\n\n    // Group by status\n    const pendingDisputes = disputes.filter(d => d.status === 'pending');\n    const resolvedDisputes = disputes.filter(d => d.status !== 'pending');\n\n    return NextResponse.json({\n      pendingDisputes,\n      resolvedDisputes,\n      totalDisputes: disputes.length,\n      stats: {\n        pending: pendingDisputes.length,\n        approved: disputes.filter(d => d.status === 'approved').length,\n        denied: disputes.filter(d => d.status === 'denied').length,\n        refunded: disputes.filter(d => d.status === 'refunded').length\n      }\n    });\n\n  } catch (error) {\n    await logError('Failed to fetch disputes', {\n      action: 'admin_disputes_fetch_error'\n    }, error as Error);\n\n    return NextResponse.json(\n      { error: 'Failed to load disputes' },\n      { status: 500 }\n    );\n  }\n}\n\n// POST - Resolve a dispute (approve/deny)\nexport async function POST(request: NextRequest) {\n  try {\n    if (!db) {\n      return NextResponse.json(\n        { error: 'Database not available' },\n        { status: 500 }\n      );\n    }\n\n    // TODO: Add admin role check when admin auth is implemented\n    \n    const body = await request.json();\n    const { disputeId, action, adminNotes, refundCredits } = body;\n\n    if (!disputeId || !action || !['approve', 'deny', 'refund'].includes(action)) {\n      return NextResponse.json(\n        { error: 'Invalid dispute resolution action' },\n        { status: 400 }\n      );\n    }\n\n    // Get dispute details\n    const disputeDoc = await getDoc(doc(db!, 'leadDisputes', disputeId));\n    \n    if (!disputeDoc.exists()) {\n      return NextResponse.json(\n        { error: 'Dispute not found' },\n        { status: 404 }\n      );\n    }\n\n    const dispute = disputeDoc.data();\n    \n    // Allow re-processing approved disputes if they don't have refund amounts\n    if (dispute.status === 'approved' && !dispute.refundAmount && refundCredits > 0) {\n    }\n\n    // Update dispute status\n    const updateData: Record<string, unknown> = {\n      status: action === 'refund' ? 'refunded' : action === 'approve' ? 'approved' : 'denied',\n      adminNotes: adminNotes || '',\n      resolvedAt: serverTimestamp(),\n      updatedAt: serverTimestamp()\n    };\n\n    // Refund credits when approving or explicitly refunding\n    if ((action === 'approve' || action === 'refund') && refundCredits > 0) {\n      updateData.refundAmount = refundCredits;\n      \n      // Add credits back to realtor account\n      const realtorDoc = await getDoc(doc(db!, 'realtors', dispute.realtorId));\n      if (realtorDoc.exists()) {\n        const currentCredits = realtorDoc.data()?.credits || 0;\n        await updateDoc(doc(db!, 'realtors', dispute.realtorId), {\n          credits: currentCredits + refundCredits,\n          updatedAt: serverTimestamp()\n        });\n        \n        // Create a transaction record for the refund\n        await setDoc(doc(collection(db!, 'transactions')), {\n          realtorId: dispute.realtorId,\n          type: 'dispute_refund',\n          description: `Refund for dispute #${disputeId.substring(0, 8)}`,\n          credits: refundCredits,\n          amount: 0, // No money transaction, just credits\n          status: 'completed',\n          createdAt: serverTimestamp()\n        });\n      }\n    }\n\n    await updateDoc(doc(db!, 'leadDisputes', disputeId), updateData);\n\n    await logInfo('Dispute resolved by admin', {\n      action: 'dispute_resolved',\n      metadata: {\n        resolution: action,\n        refundCredits: refundCredits || 0,\n        disputeId: disputeId\n      }\n    });\n\n    return NextResponse.json({\n      success: true,\n      message: `Dispute ${action}ed successfully`,\n      refundAmount: action === 'refund' ? refundCredits : 0\n    });\n\n  } catch (error) {\n    await logError('Failed to resolve dispute', {\n      action: 'admin_dispute_resolve_error'\n    }, error as Error);\n\n    return NextResponse.json(\n      { error: 'Failed to resolve dispute' },\n      { status: 500 }\n    );\n  }\n}","usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/app/api/admin/properties/[id]/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":43,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":43,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":88,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":88,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { getServerSession } from 'next-auth/next';\nimport { authOptions } from '@/lib/auth';\nimport { doc, getDoc, updateDoc, serverTimestamp } from 'firebase/firestore';\nimport { db } from '@/lib/firebase';\nimport { ExtendedSession } from '@/types/session';\n\n// GET single property\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    if (!db) {\n      return NextResponse.json(\n        { error: 'Database not available' },\n        { status: 500 }\n      );\n    }\n\n    const resolvedParams = await params;\n    const session = await getServerSession(authOptions) as ExtendedSession | null;\n    if (!session?.user || (session as ExtendedSession).user.role !== 'admin') {\n      return NextResponse.json(\n        { error: 'Admin access required' },\n        { status: 403 }\n      );\n    }\n\n    const propertyDoc = await getDoc(doc(db, 'properties', resolvedParams.id));\n    \n    if (!propertyDoc.exists()) {\n      return NextResponse.json(\n        { error: 'Property not found' },\n        { status: 404 }\n      );\n    }\n\n    return NextResponse.json({\n      id: propertyDoc.id,\n      ...propertyDoc.data()\n    });\n  } catch (error) {\n    return NextResponse.json(\n      { error: 'Failed to fetch property' },\n      { status: 500 }\n    );\n  }\n}\n\n// UPDATE property\nexport async function PUT(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    if (!db) {\n      return NextResponse.json(\n        { error: 'Database not available' },\n        { status: 500 }\n      );\n    }\n\n    const resolvedParams = await params;\n    const session = await getServerSession(authOptions) as ExtendedSession | null;\n    if (!session?.user || (session as ExtendedSession).user.role !== 'admin') {\n      return NextResponse.json(\n        { error: 'Admin access required' },\n        { status: 403 }\n      );\n    }\n\n    const updates = await request.json();\n    \n    // Remove id from updates if present\n    delete updates.id;\n    \n    // Update the property\n    await updateDoc(doc(db, 'properties', resolvedParams.id), {\n      ...updates,\n      updatedAt: serverTimestamp()\n    });\n\n    return NextResponse.json({ \n      success: true,\n      message: 'Property updated successfully'\n    });\n  } catch (error) {\n    return NextResponse.json(\n      { error: 'Failed to update property' },\n      { status: 500 }\n    );\n  }\n}","usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/app/api/admin/properties/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'orderBy' is defined but never used.","line":11,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":10}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { getServerSession } from 'next-auth/next';\nimport { authOptions } from '@/lib/auth';\nimport { \n  collection, \n  query, \n  getDocs,\n  doc,\n  updateDoc,\n  deleteDoc,\n  orderBy,\n  limit as firestoreLimit,\n  where\n} from 'firebase/firestore';\nimport { db } from '@/lib/firebase';\nimport { logError, logInfo } from '@/lib/logger';\nimport { ExtendedSession } from '@/types/session';\n\n// Get all properties for admin management\nexport async function GET(request: NextRequest) {\n  try {\n    if (!db) {\n      return NextResponse.json(\n        { error: 'Database not available' },\n        { status: 500 }\n      );\n    }\n\n    // Admin access control\n    const session = await getServerSession(authOptions) as ExtendedSession | null;\n    \n    if (!session?.user || (session as ExtendedSession).user.role !== 'admin') {\n      return NextResponse.json(\n        { error: 'Access denied. Admin access required.' },\n        { status: 403 }\n      );\n    }\n\n    const { searchParams } = new URL(request.url);\n    const limit = parseInt(searchParams.get('limit') || '200');\n    const status = searchParams.get('status') || 'all';\n    \n    // Build query\n    let propertiesQuery = query(collection(db, 'properties'));\n    \n    // Filter by status if specified\n    if (status !== 'all') {\n      propertiesQuery = query(\n        collection(db, 'properties'),\n        where('status', '==', status)\n      );\n    }\n    \n    // Add limit\n    propertiesQuery = query(propertiesQuery, firestoreLimit(limit));\n    \n    const propertiesSnapshot = await getDocs(propertiesQuery);\n    const properties = propertiesSnapshot.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data(),\n      // Convert Firestore timestamps\n      createdAt: doc.data().createdAt?.toDate?.()?.toISOString() || doc.data().createdAt,\n      updatedAt: doc.data().updatedAt?.toDate?.()?.toISOString() || doc.data().updatedAt\n    }));\n\n    // Get total count efficiently without fetching all docs\n    const totalQuery = query(collection(db, 'properties'));\n    const totalSnapshot = await getDocs(query(totalQuery, firestoreLimit(1000))); // Cap at 1000 for count\n    const estimatedTotal = totalSnapshot.size >= 1000 ? '1000+' : totalSnapshot.size;\n    \n    return NextResponse.json({ \n      properties,\n      count: properties.length,\n      total: estimatedTotal,\n      showing: `${properties.length} of ${estimatedTotal} properties`\n    });\n\n  } catch (error) {\n    await logError('Failed to fetch admin properties', {\n      action: 'admin_properties_fetch'\n    }, error as Error);\n\n    return NextResponse.json(\n      { error: 'Failed to fetch properties' },\n      { status: 500 }\n    );\n  }\n}\n\n// Update property\nexport async function PUT(request: NextRequest) {\n  try {\n    if (!db) {\n      return NextResponse.json(\n        { error: 'Database not available' },\n        { status: 500 }\n      );\n    }\n\n    const session = await getServerSession(authOptions) as ExtendedSession | null;\n    \n    if (!session?.user || (session as ExtendedSession).user.role !== 'admin') {\n      return NextResponse.json(\n        { error: 'Access denied. Admin access required.' },\n        { status: 403 }\n      );\n    }\n\n    const { propertyId, updates } = await request.json();\n    \n    if (!propertyId) {\n      return NextResponse.json(\n        { error: 'Property ID is required' },\n        { status: 400 }\n      );\n    }\n\n    // Update property in Firebase\n    await updateDoc(doc(db, 'properties', propertyId), {\n      ...updates,\n      updatedAt: new Date()\n    });\n\n    await logInfo('Property updated by admin', {\n      action: 'admin_property_update',\n      metadata: { \n        propertyId,\n        updatedFields: Object.keys(updates)\n      }\n    });\n\n    return NextResponse.json({ \n      success: true,\n      message: 'Property updated successfully' \n    });\n\n  } catch (error) {\n    await logError('Failed to update property', {\n      action: 'admin_property_update_error'\n    }, error as Error);\n\n    return NextResponse.json(\n      { error: 'Failed to update property' },\n      { status: 500 }\n    );\n  }\n}\n\n// Delete property\nexport async function DELETE(request: NextRequest) {\n  try {\n    if (!db) {\n      return NextResponse.json(\n        { error: 'Database not available' },\n        { status: 500 }\n      );\n    }\n\n    const session = await getServerSession(authOptions) as ExtendedSession | null;\n    \n    if (!session?.user || (session as ExtendedSession).user.role !== 'admin') {\n      return NextResponse.json(\n        { error: 'Access denied. Admin access required.' },\n        { status: 403 }\n      );\n    }\n\n    const { searchParams } = new URL(request.url);\n    const propertyId = searchParams.get('propertyId');\n    \n    if (!propertyId) {\n      return NextResponse.json(\n        { error: 'Property ID is required' },\n        { status: 400 }\n      );\n    }\n\n    // Completely delete the property from Firebase\n    await deleteDoc(doc(db, 'properties', propertyId));\n\n    await logInfo('Property deleted by admin', {\n      action: 'admin_property_delete',\n      metadata: { propertyId }\n    });\n\n    return NextResponse.json({ \n      success: true,\n      message: 'Property deleted successfully' \n    });\n\n  } catch (error) {\n    await logError('Failed to delete property', {\n      action: 'admin_property_delete_error'\n    }, error as Error);\n\n    return NextResponse.json(\n      { error: 'Failed to delete property' },\n      { status: 500 }\n    );\n  }\n}","usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/app/api/admin/system-health/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/app/api/admin/test-consolidation-simple/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":276,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":276,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// SIMPLE CONSOLIDATION TEST - Browser-accessible endpoint for testing\n// Creates Dallas buyer + Memphis buyer, then tests realtor matching\n\nimport { NextRequest, NextResponse } from 'next/server';\nimport { ConsolidatedLeadSystem } from '@/lib/consolidated-lead-system';\nimport { FirebaseDB } from '@/lib/firebase-db';\nimport { BuyerProfile, User } from '@/lib/firebase-models';\n\ninterface TestBuyer {\n  id: string;\n  name: string;\n  city: string;\n}\n\ninterface TestRealtor {\n  id: string;\n  name: string;\n  city: string;\n}\n\nexport async function GET() {\n  return NextResponse.json({\n    message: 'Consolidation Test Endpoint',\n    usage: 'POST to run Dallas-Memphis test',\n    availableActions: [\n      'create-dallas-memphis',\n      'test-matching', \n      'get-stats',\n      'cleanup-test-data'\n    ]\n  });\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json().catch(() => ({ action: 'create-dallas-memphis' }));\n    const { action = 'create-dallas-memphis' } = body;\n    \n    \n    switch (action) {\n      case 'create-dallas-memphis':\n        return await createDallasMemphisTest();\n        \n      case 'test-matching':\n        return await testMatching();\n        \n      case 'get-stats':\n        return await getStats();\n        \n      case 'cleanup-test-data':\n        return await cleanupTestData();\n        \n      default:\n        return NextResponse.json({ error: 'Invalid action' }, { status: 400 });\n    }\n    \n  } catch (error) {\n    return NextResponse.json({\n      error: 'Test failed',\n      details: (error as Error).message\n    }, { status: 500 });\n  }\n}\n\nasync function createDallasMemphisTest() {\n  \n  const results = {\n    dallasBuyer: null as TestBuyer | null,\n    memphisBuyer: null as TestBuyer | null,\n    dallasRealtor: null as TestRealtor | null,\n    memphisRealtor: null as TestRealtor | null,\n    errors: [] as string[]\n  };\n  \n  try {\n    // Create Dallas buyer\n    const dallasBuyerId = await ConsolidatedLeadSystem.createBuyerProfile({\n      userId: `dallas_buyer_${Date.now()}`,\n      firstName: 'John',\n      lastName: 'Smith',\n      email: 'john.smith.dallas@ownerfi.test',\n      phone: '214-555-1234',\n      city: 'Dallas, TX',\n      maxMonthlyPayment: 2500,\n      maxDownPayment: 60000,\n      languages: ['English']\n    });\n    \n    results.dallasBuyer = { id: dallasBuyerId, name: 'John Smith', city: 'Dallas, TX' };\n    \n    // Create Memphis buyer\n    const memphisBuyerId = await ConsolidatedLeadSystem.createBuyerProfile({\n      userId: `memphis_buyer_${Date.now()}`,\n      firstName: 'Maria',\n      lastName: 'Garcia',\n      email: 'maria.garcia.memphis@ownerfi.test',\n      phone: '901-555-5678',\n      city: 'Memphis, TN',\n      maxMonthlyPayment: 2000,\n      maxDownPayment: 45000,\n      languages: ['English']\n    });\n    \n    results.memphisBuyer = { id: memphisBuyerId, name: 'Maria Garcia', city: 'Memphis, TN' };\n    \n    // Create Dallas realtor\n    const dallasRealtorId = `dallas_realtor_${Date.now()}`;\n    const dallasRealtorData = {\n      email: 'sarah.johnson@dallasrealty.test',\n      name: 'Sarah Johnson',\n      role: 'realtor',\n      password: 'test123',\n      realtorData: {\n        firstName: 'Sarah',\n        lastName: 'Johnson',\n        company: 'Dallas Premier Realty',\n        credits: 15,\n        isOnTrial: true,\n        trialStartDate: new Date(),\n        trialEndDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000),\n        serviceArea: {\n          primaryCity: { name: 'Dallas', state: 'TX', stateCode: 'TX' },\n          totalCitiesServed: 1,\n          nearbyCities: []\n        },\n        serviceCities: ['Dallas, TX'],\n        languages: ['English']\n      }\n    };\n    \n    await FirebaseDB.createDocument('users', dallasRealtorData, dallasRealtorId);\n    results.dallasRealtor = { id: dallasRealtorId, name: 'Sarah Johnson', city: 'Dallas, TX' };\n    \n    // Create Memphis realtor\n    const memphisRealtorId = `memphis_realtor_${Date.now()}`;\n    const memphisRealtorData = {\n      email: 'michael.davis@memphisrealty.test',\n      name: 'Michael Davis',\n      role: 'realtor',\n      password: 'test123',\n      realtorData: {\n        firstName: 'Michael',\n        lastName: 'Davis',\n        company: 'Memphis Home Experts',\n        credits: 12,\n        isOnTrial: true,\n        trialStartDate: new Date(),\n        trialEndDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000),\n        serviceArea: {\n          primaryCity: { name: 'Memphis', state: 'TN', stateCode: 'TN' },\n          totalCitiesServed: 1,\n          nearbyCities: []\n        },\n        serviceCities: ['Memphis, TN'],\n        languages: ['English']\n      }\n    };\n    \n    await FirebaseDB.createDocument('users', memphisRealtorData, memphisRealtorId);\n    results.memphisRealtor = { id: memphisRealtorId, name: 'Michael Davis', city: 'Memphis, TN' };\n    \n  } catch (error) {\n    results.errors.push((error as Error).message);\n  }\n  \n  return NextResponse.json({\n    action: 'create-dallas-memphis',\n    success: results.errors.length === 0,\n    results\n  });\n}\n\nasync function testMatching() {\n  \n  const results = {\n    dallasRealtorMatches: [] as Array<{\n      id: string;\n      name: string;\n      city: string;\n      state: string;\n      score: number;\n      reasons: string[];\n    }>,\n    memphisRealtorMatches: [] as Array<{\n      id: string;\n      name: string;\n      city: string;\n      state: string;\n      score: number;\n      reasons: string[];\n    }>,\n    crossStateTest: {\n      dallasRealtorInMemphis: 0,\n      memphisRealtorInDallas: 0\n    },\n    summary: {\n      totalTests: 0,\n      passed: 0,\n      failed: 0\n    }\n  };\n  \n  try {\n    // Test Dallas realtor matching (should find Dallas buyers)\n    const dallasMatches = await ConsolidatedLeadSystem.findAvailableLeads({\n      cities: ['Dallas'],\n      languages: ['English'],\n      state: 'TX'\n    });\n    \n    results.dallasRealtorMatches = dallasMatches.map(m => ({\n      id: m.id,\n      name: `${m.firstName} ${m.lastName}`,\n      city: m.city,\n      state: m.state,\n      score: m.matchScore,\n      reasons: m.matchReasons\n    }));\n    \n    results.summary.totalTests++;\n    if (dallasMatches.length > 0) {\n      results.summary.passed++;\n    } else {\n      results.summary.failed++;\n    }\n    \n    // Test Memphis realtor matching (should find Memphis buyers)\n    const memphisMatches = await ConsolidatedLeadSystem.findAvailableLeads({\n      cities: ['Memphis'],\n      languages: ['English'],\n      state: 'TN'\n    });\n    \n    results.memphisRealtorMatches = memphisMatches.map(m => ({\n      id: m.id,\n      name: `${m.firstName} ${m.lastName}`,\n      city: m.city,\n      state: m.state,\n      score: m.matchScore,\n      reasons: m.matchReasons\n    }));\n    \n    results.summary.totalTests++;\n    if (memphisMatches.length > 0) {\n      results.summary.passed++;\n    } else {\n      results.summary.failed++;\n    }\n    \n    // Test cross-state isolation\n    \n    // Dallas realtor should NOT find Memphis buyers\n    const dallasInMemphis = await ConsolidatedLeadSystem.findAvailableLeads({\n      cities: ['Memphis'],  // Dallas realtor looking in Memphis\n      languages: ['English'],\n      state: 'TX'  // But with TX state - should find nothing\n    });\n    results.crossStateTest.dallasRealtorInMemphis = dallasInMemphis.length;\n    \n    // Memphis realtor should NOT find Dallas buyers  \n    const memphisInDallas = await ConsolidatedLeadSystem.findAvailableLeads({\n      cities: ['Dallas'],  // Memphis realtor looking in Dallas\n      languages: ['English'], \n      state: 'TN'  // But with TN state - should find nothing\n    });\n    results.crossStateTest.memphisRealtorInDallas = memphisInDallas.length;\n    \n    results.summary.totalTests += 2;\n    if (results.crossStateTest.dallasRealtorInMemphis === 0) results.summary.passed++;\n    else results.summary.failed++;\n    \n    if (results.crossStateTest.memphisRealtorInDallas === 0) results.summary.passed++;\n    else results.summary.failed++;\n    \n    \n  } catch (error) {\n    results.summary.failed++;\n  }\n  \n  return NextResponse.json({\n    action: 'test-matching',\n    success: results.summary.passed > results.summary.failed,\n    results\n  });\n}\n\nasync function getStats() {\n  \n  try {\n    const stats = await ConsolidatedLeadSystem.getSystemStatistics();\n    \n    return NextResponse.json({\n      action: 'get-stats',\n      success: true,\n      stats\n    });\n    \n  } catch (error) {\n    return NextResponse.json({\n      action: 'get-stats',\n      success: false,\n      error: (error as Error).message\n    });\n  }\n}\n\nasync function cleanupTestData() {\n  \n  const results = {\n    buyersDeleted: 0,\n    realtorsDeleted: 0,\n    errors: [] as string[]\n  };\n  \n  try {\n    // Find and delete test buyers\n    const testBuyers = await FirebaseDB.queryDocuments('buyerProfiles', []);\n    \n    for (const buyer of testBuyers) {\n      const b = buyer as BuyerProfile & { id: string };\n      if (b.email && (b.email.includes('.test') || b.email.includes('ownerfi.test'))) {\n        await FirebaseDB.deleteDocument('buyerProfiles', b.id);\n        results.buyersDeleted++;\n      }\n    }\n    \n    // Find and delete test realtors\n    const testRealtors = await FirebaseDB.queryDocuments('users', [\n      { field: 'role', operator: '==', value: 'realtor' }\n    ]);\n    \n    for (const realtor of testRealtors) {\n      const r = realtor as User & { id: string };\n      if (r.email && (r.email.includes('.test') || r.id.includes('test_'))) {\n        await FirebaseDB.deleteDocument('users', r.id);\n        results.realtorsDeleted++;\n      }\n    }\n    \n    \n  } catch (error) {\n    results.errors.push((error as Error).message);\n  }\n  \n  return NextResponse.json({\n    action: 'cleanup-test-data',\n    success: results.errors.length === 0,\n    results\n  });\n}","usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/app/api/admin/update-plan/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":50,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":50,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { \n  collection,\n  query,\n  where,\n  getDocs,\n  doc,\n  updateDoc,\n  serverTimestamp\n} from 'firebase/firestore';\nimport { db } from '@/lib/firebase';\n\nexport async function POST(request: NextRequest) {\n  try {\n    if (!db) {\n      return NextResponse.json(\n        { error: 'Database not available' },\n        { status: 500 }\n      );\n    }\n\n    const { realtorId, plan } = await request.json();\n    \n    // Update realtor document\n    await updateDoc(doc(db, 'realtors', realtorId), {\n      currentPlan: plan,\n      updatedAt: serverTimestamp()\n    });\n    \n    // Update all subscription records for this realtor\n    const subscriptionsQuery = query(\n      collection(db, 'realtorSubscriptions'),\n      where('realtorId', '==', realtorId)\n    );\n    const subscriptionDocs = await getDocs(subscriptionsQuery);\n    \n    for (const subscriptionDoc of subscriptionDocs.docs) {\n      await updateDoc(doc(db, 'realtorSubscriptions', subscriptionDoc.id), {\n        plan: plan,\n        updatedAt: serverTimestamp()\n      });\n    }\n    \n    return NextResponse.json({\n      success: true,\n      message: `Updated plan to ${plan}`,\n      updatedSubscriptions: subscriptionDocs.docs.length\n    });\n    \n  } catch (error) {\n    return NextResponse.json(\n      { error: 'Failed to update plan' },\n      { status: 500 }\n    );\n  }\n}","usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/app/api/admin/upload-properties/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'collection' is defined but never used.","line":5,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_csvContent' is assigned a value but never used.","line":59,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":59,"endColumn":22}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { getServerSession } from 'next-auth/next';\nimport { authOptions } from '@/lib/auth';\nimport { \n  collection, \n  doc, \n  setDoc, \n  serverTimestamp \n} from 'firebase/firestore';\nimport { db } from '@/lib/firebase';\nimport { logError, logInfo } from '@/lib/logger';\nimport { queueNearbyCitiesForProperty } from '@/lib/property-enhancement';\nimport { ExtendedSession } from '@/types/session';\nimport { PropertyListing } from '@/lib/property-schema';\n\nexport async function POST(request: NextRequest) {\n  try {\n    if (!db) {\n      return NextResponse.json(\n        { error: 'Database not available' },\n        { status: 500 }\n      );\n    }\n\n    // Strict admin access control\n    const session = await getServerSession(authOptions) as ExtendedSession | null;\n    \n    if (!session?.user || (session as ExtendedSession).user.role !== 'admin') {\n      return NextResponse.json(\n        { error: 'Access denied. Admin access required.' },\n        { status: 403 }\n      );\n    }\n    const formData = await request.formData();\n    const file = formData.get('file') as File;\n    \n    if (!file) {\n      return NextResponse.json(\n        { error: 'No file uploaded' },\n        { status: 400 }\n      );\n    }\n    \n    if (!file.name.match(/\\.(csv)$/i)) {\n      return NextResponse.json(\n        { error: 'File must be a CSV file (.csv)' },\n        { status: 400 }\n      );\n    }\n    \n    const buffer = Buffer.from(await file.arrayBuffer());\n    \n    await logInfo('Starting CSV file processing', {\n      action: 'upload_properties',\n      metadata: { fileName: file.name, fileSize: file.size }\n    });\n    \n    // Basic CSV parsing (simplified without GHL dependency)\n    const _csvContent = buffer.toString('utf-8');\n    const parseResult: { \n      success: PropertyListing[], \n      errors: string[], \n      totalRows: number, \n      duplicates: string[] \n    } = { success: [], errors: [], totalRows: 0, duplicates: [] };\n    \n    if (parseResult.success.length === 0) {\n      await logError('No valid properties found in CSV file', {\n        action: 'upload_properties',\n        metadata: { \n          fileName: file.name,\n          totalRows: parseResult.totalRows,\n          errorCount: parseResult.errors.length\n        }\n      });\n      \n      return NextResponse.json({\n        error: 'No valid properties found',\n        details: parseResult.errors\n      }, { status: 400 });\n    }\n    \n    // Insert properties into Firebase\n    const insertedProperties = [];\n    const insertErrors = [];\n    \n    for (const property of parseResult.success) {\n      try {\n        \n        // FAST: Create property immediately without waiting for nearby cities\n        await setDoc(doc(db!, 'properties', property.id), {\n          ...property,\n          nearbyCities: [], // Empty initially, populated by background job\n          createdAt: serverTimestamp(),\n          updatedAt: serverTimestamp(),\n          status: 'active',\n          source: 'csv-upload',\n          isActive: true // Ensure this flag is set for the matching service\n        });\n        \n        // Queue nearby cities population (non-blocking)\n        queueNearbyCitiesForProperty(property.id, property.city, property.state);\n        \n        \n        insertedProperties.push({\n          id: property.id,\n          address: property.address,\n          city: property.city,\n          state: property.state\n        });\n        \n      } catch (error) {\n        \n        await logError('Failed to insert property', {\n          action: 'insert_property',\n          metadata: { \n            property: property.address,\n            propertyId: property.id,\n            errorType: (error as Error).name,\n            errorMessage: (error as Error).message,\n            errorStack: (error as Error).stack\n          }\n        }, error as Error);\n        \n        insertErrors.push({\n          property: property.address,\n          propertyId: property.id,\n          error: (error as Error).message,\n          errorType: (error as Error).name\n        });\n      }\n    }\n    \n    await logInfo('Excel upload completed', {\n      action: 'upload_properties',\n      metadata: {\n        fileName: file.name,\n        totalProcessed: parseResult.totalRows,\n        successfulInserts: insertedProperties.length,\n        parseErrors: parseResult.errors.length,\n        insertErrors: insertErrors.length\n      }\n    });\n    \n    return NextResponse.json({\n      success: true,\n      summary: {\n        totalRows: parseResult.totalRows,\n        successfulParsing: parseResult.success.length,\n        successfulInserts: insertedProperties.length,\n        parseErrors: parseResult.errors.length,\n        duplicatesSkipped: parseResult.duplicates?.length || 0,\n        insertErrors: insertErrors.length\n      },\n      parseErrors: parseResult.errors,\n      duplicates: parseResult.duplicates || [],\n      insertErrors,\n      insertedProperties: insertedProperties.map(p => ({\n        id: p.id,\n        address: p.address,\n        city: p.city,\n        state: p.state\n      }))\n    });\n    \n  } catch (error) {\n    await logError('Excel upload failed', {\n      action: 'upload_properties'\n    }, error as Error);\n    \n    return NextResponse.json(\n      { error: 'Failed to process upload', details: (error as Error).message },\n      { status: 500 }\n    );\n  }\n}","usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/app/api/auth/[...nextauth]/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/app/api/auth/forgot-password/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/app/api/auth/reset-password/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/app/api/auth/signup/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/app/api/buyer/like-property/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'doc' is defined but never used.","line":7,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":6},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":75,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":75,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { \n  collection, \n  query, \n  where, \n  getDocs,\n  doc,\n  updateDoc,\n  arrayUnion,\n  arrayRemove,\n  serverTimestamp\n} from 'firebase/firestore';\nimport { db } from '@/lib/firebase';\nimport { getServerSession } from 'next-auth/next';\nimport { authOptions } from '@/lib/auth';\nimport { ExtendedSession } from '@/types/session';\n\nexport async function POST(request: NextRequest) {\n  try {\n    if (!db) {\n      return NextResponse.json(\n        { error: 'Database not available' },\n        { status: 500 }\n      );\n    }\n\n    const session = await getServerSession(authOptions) as ExtendedSession | null;\n    \n    if (!session?.user || session.user.role !== 'buyer') {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const { propertyId, action } = await request.json(); // action: 'like' or 'unlike'\n    \n    if (!propertyId || !action) {\n      return NextResponse.json({ \n        error: 'Missing propertyId or action' \n      }, { status: 400 });\n    }\n\n    // Get buyer profile\n    const profilesQuery = query(\n      collection(db, 'buyerProfiles'),\n      where('userId', '==', session.user.id)\n    );\n    const snapshot = await getDocs(profilesQuery);\n\n    if (snapshot.empty) {\n      return NextResponse.json({ \n        error: 'Buyer profile not found' \n      }, { status: 404 });\n    }\n\n    const profileDoc = snapshot.docs[0];\n\n    // Update liked properties array\n    if (action === 'like') {\n      await updateDoc(profileDoc.ref, {\n        likedProperties: arrayUnion(propertyId),\n        updatedAt: serverTimestamp()\n      });\n    } else if (action === 'unlike') {\n      await updateDoc(profileDoc.ref, {\n        likedProperties: arrayRemove(propertyId),\n        updatedAt: serverTimestamp()\n      });\n    }\n\n    return NextResponse.json({ \n      success: true,\n      action,\n      propertyId \n    });\n\n  } catch (error) {\n    return NextResponse.json({ \n      error: 'Failed to update property preference' \n    }, { status: 500 });\n  }\n}","usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/app/api/buyer/liked-properties/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":82,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":82,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextResponse } from 'next/server';\nimport { \n  collection, \n  query, \n  where, \n  getDocs,\n  documentId\n} from 'firebase/firestore';\nimport { db } from '@/lib/firebase';\nimport { getServerSession } from 'next-auth/next';\nimport { authOptions } from '@/lib/auth';\nimport { ExtendedSession } from '@/types/session';\n\nexport async function GET() {\n  try {\n    if (!db) {\n      return NextResponse.json(\n        { error: 'Database not available' },\n        { status: 500 }\n      );\n    }\n\n    const session = await getServerSession(authOptions) as ExtendedSession | null;\n    \n    if (!session?.user || session.user.role !== 'buyer') {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    // Get buyer profile with liked properties\n    const profilesQuery = query(\n      collection(db, 'buyerProfiles'),\n      where('userId', '==', session.user.id)\n    );\n    const snapshot = await getDocs(profilesQuery);\n\n    if (snapshot.empty) {\n      return NextResponse.json({ \n        likedProperties: [],\n        profile: null \n      });\n    }\n\n    const profile = snapshot.docs[0].data();\n    const likedPropertyIds = profile.likedProperties || [];\n\n    if (likedPropertyIds.length === 0) {\n      return NextResponse.json({ \n        likedProperties: [],\n        profile \n      });\n    }\n\n    // Get property details for liked properties\n    const allProperties = [];\n    \n    // Batch fetch in groups of 10 (Firestore limit)\n    for (let i = 0; i < likedPropertyIds.length; i += 10) {\n      const batch = likedPropertyIds.slice(i, i + 10);\n      \n      const batchQuery = query(\n        collection(db, 'properties'),\n        where(documentId(), 'in', batch)\n      );\n      \n      const batchSnapshot = await getDocs(batchQuery);\n      const batchProperties = batchSnapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data(),\n        isLiked: true\n      }));\n      \n      allProperties.push(...batchProperties);\n    }\n\n\n    return NextResponse.json({\n      likedProperties: allProperties,\n      profile,\n      total: allProperties.length\n    });\n\n  } catch (error) {\n    return NextResponse.json({ \n      error: 'Failed to load liked properties',\n      likedProperties: []\n    }, { status: 500 });\n  }\n}","usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/app/api/buyer/profile/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":61,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":61,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":182,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":182,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { \n  collection, \n  query, \n  where, \n  getDocs,\n  doc,\n  setDoc,\n  updateDoc,\n  serverTimestamp\n} from 'firebase/firestore';\nimport { db } from '@/lib/firebase';\nimport { getServerSession } from 'next-auth/next';\nimport { authOptions } from '@/lib/auth';\nimport { unifiedDb } from '@/lib/unified-db';\nimport { ExtendedSession } from '@/types/session';\n\n/**\n * SIMPLIFIED BUYER PROFILE API\n * \n * Stores ONLY essential buyer data:\n * - Contact info (from user record)\n * - Search preferences (city, budgets)\n * \n * NO realtor matching, NO complex algorithms, NO dependencies.\n */\n\nexport async function GET() {\n  try {\n    if (!db) {\n      return NextResponse.json(\n        { error: 'Database not available' },\n        { status: 500 }\n      );\n    }\n\n    const session = await getServerSession(authOptions) as ExtendedSession | null;\n    \n    if (!session?.user || session.user.role !== 'buyer') {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    // Get buyer profile\n    const profilesQuery = query(\n      collection(db, 'buyerProfiles'),\n      where('userId', '==', session.user.id)\n    );\n    const snapshot = await getDocs(profilesQuery);\n\n    if (snapshot.empty) {\n      return NextResponse.json({ profile: null });\n    }\n\n    const profile = {\n      id: snapshot.docs[0].id,\n      ...snapshot.docs[0].data()\n    };\n\n    return NextResponse.json({ profile });\n\n  } catch (error) {\n    return NextResponse.json({ error: 'Failed to load profile' }, { status: 500 });\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    if (!db) {\n      return NextResponse.json(\n        { error: 'Database not available' },\n        { status: 500 }\n      );\n    }\n\n    const session = await getServerSession(authOptions) as ExtendedSession | null;\n    \n    if (!session?.user || session.user.role !== 'buyer') {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const body = await request.json();\n    \n    const {\n      firstName,\n      lastName,\n      phone,\n      city,\n      state,\n      maxMonthlyPayment,\n      maxDownPayment\n    } = body;\n\n\n    // Validate required fields\n    if (!city || !state || !maxMonthlyPayment || !maxDownPayment) {\n      return NextResponse.json({ \n        error: 'Missing required: city, state, maxMonthlyPayment, maxDownPayment' \n      }, { status: 400 });\n    }\n\n    // Get user contact info from database if not provided\n    const userRecord = await unifiedDb.users.findById(session.user.id);\n    \n    // Consolidated profile structure - includes lead selling fields\n    const profileData = {\n      userId: session.user.id,\n      \n      // Contact info (try request first, fallback to user record)\n      firstName: firstName || userRecord?.name?.split(' ')[0] || '',\n      lastName: lastName || userRecord?.name?.split(' ').slice(1).join(' ') || '',\n      email: session.user.email!,\n      phone: phone || '',\n      \n      // Location (both formats for compatibility)\n      preferredCity: city,\n      preferredState: state,\n      city: city,                    // API compatibility\n      state: state,                  // API compatibility\n      searchRadius: 25,\n      \n      // Budget constraints\n      maxMonthlyPayment: Number(maxMonthlyPayment),\n      maxDownPayment: Number(maxDownPayment),\n      \n      // Communication preferences\n      languages: ['English'],\n      emailNotifications: true,\n      smsNotifications: true,\n      \n      // System fields\n      profileComplete: true,\n      isActive: true,\n      \n      // Property interaction arrays\n      matchedPropertyIds: [],\n      likedPropertyIds: [],\n      passedPropertyIds: [],\n      \n      // Lead selling fields\n      isAvailableForPurchase: true,\n      leadPrice: 1,\n      \n      // Activity tracking\n      lastActiveAt: serverTimestamp(),\n      \n      // Metadata\n      createdAt: serverTimestamp(),\n      updatedAt: serverTimestamp()\n    };\n\n\n    // Find existing profile or create new one\n    const existingQuery = query(\n      collection(db, 'buyerProfiles'),\n      where('userId', '==', session.user.id)\n    );\n    const existing = await getDocs(existingQuery);\n\n    let buyerId: string;\n\n    if (existing.empty) {\n      // Create new profile\n      buyerId = `buyer_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n      await setDoc(doc(db, 'buyerProfiles', buyerId), {\n        ...profileData,\n        id: buyerId\n      });\n    } else {\n      // Update existing profile\n      buyerId = existing.docs[0].id;\n      await updateDoc(doc(db, 'buyerProfiles', buyerId), profileData);\n    }\n\n    // Lead selling fields are now part of the main profile - no separate buyerLinks needed\n\n    return NextResponse.json({ \n      success: true,\n      buyerId,\n      message: 'Profile saved successfully'\n    });\n\n  } catch (error) {\n    return NextResponse.json({ \n      error: 'Failed to save profile' \n    }, { status: 500 });\n  }\n}\n\nexport async function OPTIONS(request: NextRequest) {\n  return new NextResponse(null, {\n    status: 200,\n    headers: {\n      'Access-Control-Allow-Credentials': 'true',\n      'Access-Control-Allow-Origin': request.headers.get('origin') || '*',\n      'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type, Authorization, Cookie',\n    },\n  });\n}","usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/app/api/buyer/properties-nearby/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_cityName' is defined but never used.","line":88,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":88,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_cityName' is defined but never used.","line":104,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":104,"endColumn":26}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { \n  collection, \n  getDocs\n} from 'firebase/firestore';\nimport { db } from '@/lib/firebase';\nimport { getServerSession } from 'next-auth/next';\nimport { authOptions } from '@/lib/auth';\nimport { ExtendedSession } from '@/types/session';\nimport { getCitiesWithinRadius } from '@/lib/cities';\nimport { PropertyListing } from \"@/lib/property-schema\";\n\n/**\n * BUYER NEARBY PROPERTIES API\n * \n * Shows buyers what properties are available in cities AROUND their search city\n * This helps buyers discover options in surrounding areas they might not have considered\n */\n\nexport async function GET(request: NextRequest) {\n  try {\n    if (!db) {\n      return NextResponse.json(\n        { error: 'Database not available' },\n        { status: 500 }\n      );\n    }\n\n    const session = await getServerSession(authOptions) as ExtendedSession | null;\n    \n    if (!session?.user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const { searchParams } = new URL(request.url);\n    const centerCity = searchParams.get('city');\n    const state = searchParams.get('state'); \n    const maxMonthlyPayment = parseFloat(searchParams.get('maxMonthlyPayment') || '5000');\n    const maxDownPayment = parseFloat(searchParams.get('maxDownPayment') || '100000');\n    const radiusMiles = parseInt(searchParams.get('radius') || '30');\n    const minProperties = parseInt(searchParams.get('minProperties') || '3');\n    \n    if (!centerCity || !state) {\n      return NextResponse.json({ \n        error: 'Missing required parameters: city, state' \n      }, { status: 400 });\n    }\n\n\n    // Get all cities within radius using existing fast database\n    const nearbyCities = getCitiesWithinRadius(centerCity, state, radiusMiles);\n    \n\n    // Get all properties and group by city\n    const snapshot = await getDocs(collection(db, 'properties'));\n    const propertiesByCity: Record<string, PropertyListing[]> = {};\n    \n    snapshot.docs.forEach(doc => {\n      const property = { id: doc.id, ...doc.data() } as PropertyListing & { id: string };\n      \n      if (property.isActive === false) return;\n      \n      const propertyCity = property.city?.split(',')[0].trim();\n      const propertyState = property.state;\n      \n      // Check if this property is in one of our nearby cities\n      const isInNearbyCity = nearbyCities.some(nearbyCity => \n        propertyCity?.toLowerCase() === nearbyCity.name.toLowerCase() &&\n        propertyState === nearbyCity.state\n      );\n      \n      if (isInNearbyCity) {\n        // Filter by budget\n        const monthlyMatch = property.monthlyPayment <= maxMonthlyPayment;\n        const downMatch = property.downPaymentAmount <= maxDownPayment;\n        \n        if (monthlyMatch && downMatch) {\n          if (!propertiesByCity[propertyCity]) {\n            propertiesByCity[propertyCity] = [];\n          }\n          propertiesByCity[propertyCity].push(property);\n        }\n      }\n    });\n\n    // Filter cities that have at least minProperties (default 3)\n    const citiesWithSufficientProperties = Object.entries(propertiesByCity)\n      .filter(([_cityName, properties]) => properties.length >= minProperties)\n      .map(([cityName, properties]) => ({\n        cityName,\n        state: properties[0]?.state || state,\n        propertyCount: properties.length,\n        properties: properties\n          .sort((a, b) => a.monthlyPayment - b.monthlyPayment) // Sort by affordability\n          .slice(0, 10), // Limit to 10 properties per city for response size\n        avgMonthlyPayment: Math.round(properties.reduce((sum, p) => sum + p.monthlyPayment, 0) / properties.length),\n        avgDownPayment: Math.round(properties.reduce((sum, p) => sum + p.downPaymentAmount, 0) / properties.length)\n      }))\n      .sort((a, b) => b.propertyCount - a.propertyCount); // Cities with most properties first\n\n    \n    // Also include cities with fewer properties for context\n    const citiesWithFewProperties = Object.entries(propertiesByCity)\n      .filter(([_cityName, properties]) => properties.length > 0 && properties.length < minProperties)\n      .map(([cityName, properties]) => ({\n        cityName,\n        state: properties[0]?.state || state,\n        propertyCount: properties.length,\n        properties: properties.slice(0, 3), // Show all for smaller lists\n        avgMonthlyPayment: Math.round(properties.reduce((sum, p) => sum + p.monthlyPayment, 0) / properties.length),\n        avgDownPayment: Math.round(properties.reduce((sum, p) => sum + p.downPaymentAmount, 0) / properties.length)\n      }))\n      .sort((a, b) => b.propertyCount - a.propertyCount);\n\n    return NextResponse.json({\n      searchCenter: {\n        city: centerCity,\n        state: state,\n        radius: radiusMiles\n      },\n      searchCriteria: {\n        maxMonthlyPayment,\n        maxDownPayment,\n        minPropertiesPerCity: minProperties\n      },\n      totalCitiesSearched: nearbyCities.length,\n      citiesWithSufficientProperties: {\n        count: citiesWithSufficientProperties.length,\n        cities: citiesWithSufficientProperties\n      },\n      citiesWithFewProperties: {\n        count: citiesWithFewProperties.length,\n        cities: citiesWithFewProperties\n      },\n      summary: {\n        totalCitiesWithProperties: citiesWithSufficientProperties.length + citiesWithFewProperties.length,\n        totalProperties: Object.values(propertiesByCity).flat().length,\n        recommendation: citiesWithSufficientProperties.length > 0 \n          ? `Consider expanding your search to include ${citiesWithSufficientProperties.map(c => c.cityName).slice(0, 3).join(', ')}`\n          : 'Try increasing your budget or expanding your search radius'\n      }\n    });\n\n  } catch (error) {\n    return NextResponse.json({ \n      error: 'Failed to search nearby properties',\n      details: (error as Error).message\n    }, { status: 500 });\n  }\n}","usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/app/api/buyer/properties/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'documentId' is defined but never used.","line":7,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":216,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":216,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { \n  collection, \n  getDocs,\n  query,\n  where,\n  documentId\n} from 'firebase/firestore';\nimport { db } from '@/lib/firebase';\nimport { getServerSession } from 'next-auth/next';\nimport { authOptions } from '@/lib/auth';\nimport { ExtendedSession } from '@/types/session';\nimport { PropertyListing } from \"@/lib/property-schema\";\n\n/**\n * BUYER PROPERTY API WITH NEARBY CITIES\n * \n * Shows properties that match buyer's simple criteria:\n * 1. DIRECT: Properties in the exact search city\n * 2. NEARBY: Properties from nearby cities (within 30 miles) \n * 3. Budget filters: Monthly payment <= budget, Down payment <= budget\n * \n * Uses pre-computed nearbyCities data for fast nearby property discovery.\n */\n\nexport async function GET(request: NextRequest) {\n  try {\n    if (!db) {\n      return NextResponse.json(\n        { error: 'Database not available' },\n        { status: 500 }\n      );\n    }\n\n    const session = await getServerSession(authOptions) as ExtendedSession | null;\n    \n    if (!session?.user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    // Get buyer's search criteria from URL params\n    const { searchParams } = new URL(request.url);\n    const city = searchParams.get('city');\n    const state = searchParams.get('state');\n    const maxMonthlyPayment = searchParams.get('maxMonthlyPayment');\n    const maxDownPayment = searchParams.get('maxDownPayment');\n    const pageSize = parseInt(searchParams.get('limit') || '20');\n    \n    if (!city || !state || !maxMonthlyPayment || !maxDownPayment) {\n      return NextResponse.json({ \n        error: 'Missing required parameters: city, state, maxMonthlyPayment, maxDownPayment' \n      }, { status: 400 });\n    }\n\n    const maxMonthly = Number(maxMonthlyPayment);\n    const maxDown = Number(maxDownPayment);\n    const searchCity = city.split(',')[0].trim();\n    const searchState = state;\n\n    // Get buyer's liked properties first\n    const buyerProfileQuery = query(\n      collection(db, 'buyerProfiles'),\n      where('userId', '==', session.user.id)\n    );\n    const buyerSnapshot = await getDocs(buyerProfileQuery);\n    let likedPropertyIds: string[] = [];\n    \n    if (!buyerSnapshot.empty) {\n      const profile = buyerSnapshot.docs[0].data();\n      likedPropertyIds = profile.likedProperties || [];\n    }\n\n    // Get ALL properties\n    const snapshot = await getDocs(collection(db, 'properties'));\n    const allProperties = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() } as PropertyListing & { id: string }));\n    \n    // 1. DIRECT MATCHES: Properties IN the search city AND state\n    const directProperties = allProperties.filter((property: PropertyListing & { id: string }) => {\n      const propertyCity = property.city?.split(',')[0].trim();\n      return propertyCity?.toLowerCase() === searchCity.toLowerCase() && \n             property.state === searchState &&\n             property.isActive !== false &&\n             property.monthlyPayment <= maxMonthly &&\n             property.downPaymentAmount <= maxDown;\n    });\n    \n    // 2. NEARBY MATCHES: Properties FROM other cities IN SAME STATE that consider search city nearby\n    const nearbyProperties = allProperties.filter((property: PropertyListing & { id: string }) => {\n      const propertyCity = property.city?.split(',')[0].trim();\n      \n      // Must be different city but SAME STATE\n      if (propertyCity?.toLowerCase() === searchCity.toLowerCase()) return false;\n      if (property.state !== searchState) return false;\n      \n      // Must have search city in nearbyCities array\n      const considersSearchCityNearby = property.nearbyCities && \n        Array.isArray(property.nearbyCities) &&\n        property.nearbyCities.some((nearbyCity: string) => \n          nearbyCity.toLowerCase() === searchCity.toLowerCase()\n        );\n      \n      return considersSearchCityNearby &&\n             property.isActive !== false &&\n             property.monthlyPayment <= maxMonthly &&\n             property.downPaymentAmount <= maxDown;\n    });\n\n    // 3. LIKED PROPERTIES: Always include liked properties regardless of search criteria\n    const likedProperties = likedPropertyIds.length > 0 ? \n      allProperties.filter((property: PropertyListing & { id: string }) => \n        likedPropertyIds.includes(property.id) && property.isActive !== false\n      ) : [];\n\n    // 4. COMBINE AND FORMAT FOR BUYER DASHBOARD WITH SMART DE-DUPLICATION\n    const processedResults = new Map();\n    \n    // First add liked properties (highest priority)\n    likedProperties.forEach(property => {\n      const propertyCity = property.city?.split(',')[0].trim();\n      const isInSearchCity = propertyCity?.toLowerCase() === searchCity.toLowerCase() && property.state === searchState;\n      const meetsCurrentBudget = property.monthlyPayment <= maxMonthly && property.downPaymentAmount <= maxDown;\n      \n      let displayTag = '‚ù§Ô∏è Liked';\n      let matchReason = 'Previously liked';\n      const sortOrder = 0; // Highest priority\n      \n      if (!meetsCurrentBudget) {\n        displayTag = '‚ù§Ô∏è Liked (Over Budget)';\n        matchReason = 'Previously liked - exceeds current budget';\n      } else if (isInSearchCity) {\n        displayTag = '‚ù§Ô∏è Liked';\n        matchReason = `Previously liked - located in ${searchCity}`;\n      } else if (property.state !== searchState) {\n        displayTag = `‚ù§Ô∏è Liked from ${property.city}`;\n        matchReason = `Previously liked from ${property.city}, ${property.state}`;\n      } else {\n        displayTag = `‚ù§Ô∏è Liked from ${propertyCity}`;\n        matchReason = `Previously liked from ${propertyCity}`;\n      }\n      \n      processedResults.set(property.id, {\n        ...property,\n        resultType: 'liked',\n        displayTag,\n        sortOrder,\n        matchReason,\n        isLiked: true\n      });\n    });\n    \n    // Then add direct properties (if not already added as liked)\n    directProperties.forEach(property => {\n      if (!processedResults.has(property.id)) {\n        processedResults.set(property.id, {\n          ...property,\n          resultType: 'direct',\n          displayTag: null,\n          sortOrder: 1,\n          matchReason: `Located in ${searchCity}`,\n          isLiked: false\n        });\n      } else {\n        // If it's already added as liked, update the match reason to show both\n        const existing = processedResults.get(property.id);\n        existing.matchReason = `‚ù§Ô∏è Liked - located in ${searchCity}`;\n        existing.displayTag = '‚ù§Ô∏è Liked';\n      }\n    });\n    \n    // Finally add nearby properties (if not already added)\n    nearbyProperties.forEach(property => {\n      if (!processedResults.has(property.id)) {\n        processedResults.set(property.id, {\n          ...property,\n          resultType: 'nearby',\n          displayTag: 'Nearby',\n          sortOrder: 2,\n          matchReason: `Near ${searchCity} (in ${property.city?.split(',')[0].trim()})`,\n          isLiked: false\n        });\n      } else {\n        // If it's already added as liked, update to show it's also nearby\n        const existing = processedResults.get(property.id);\n        if (existing.resultType === 'liked') {\n          existing.matchReason = `‚ù§Ô∏è Liked - near ${searchCity} (in ${property.city?.split(',')[0].trim()})`;\n          existing.displayTag = '‚ù§Ô∏è Liked ‚Ä¢ Nearby';\n        }\n      }\n    });\n\n    const allResults = Array.from(processedResults.values())\n      .sort((a, b) => {\n        // First sort by type (liked -> direct -> nearby), then by monthly payment\n        if (a.sortOrder !== b.sortOrder) return a.sortOrder - b.sortOrder;\n        return a.monthlyPayment - b.monthlyPayment;\n      })\n      .slice(0, pageSize);\n\n\n    return NextResponse.json({\n      properties: allResults,\n      total: allResults.length,\n      breakdown: {\n        liked: likedProperties.length,\n        direct: directProperties.length,\n        nearby: nearbyProperties.length,\n        totalLikedIncluded: allResults.filter(p => p.resultType === 'liked').length\n      },\n      searchCriteria: {\n        city: searchCity,\n        maxMonthlyPayment: maxMonthly,\n        maxDownPayment: maxDown\n      }\n    });\n\n  } catch (error) {\n    return NextResponse.json({ \n      error: 'Failed to load properties',\n      properties: [],\n      total: 0 \n    }, { status: 500 });\n  }\n}","usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/app/api/cities/coordinates/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":64,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":64,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\n\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const placeId = searchParams.get('place_id');\n\n    if (!placeId) {\n      return NextResponse.json({ error: 'Missing place_id' }, { status: 400 });\n    }\n\n    const googleApiKey = process.env.GOOGLE_MAPS_API_KEY;\n    \n    if (!googleApiKey) {\n      throw new Error('Google API key not configured');\n    }\n\n    // Get coordinates for selected city\n    const response = await fetch(\n      `https://maps.googleapis.com/maps/api/place/details/json?place_id=${placeId}&fields=name,geometry,address_components&key=${googleApiKey}`,\n      {\n        headers: {\n          'Accept': 'application/json',\n        }\n      }\n    );\n\n    if (!response.ok) {\n      throw new Error(`Google API error: ${response.status}`);\n    }\n\n    const data = await response.json();\n\n    if (data.error_message) {\n      throw new Error(`Google API error: ${data.error_message}`);\n    }\n\n    if (data.result?.geometry?.location) {\n      // Extract city and state from address components\n      const addressComponents = data.result.address_components || [];\n      let cityName = data.result.name;\n      let state = '';\n      \n      for (const component of addressComponents) {\n        if (component.types.includes('locality')) {\n          cityName = component.long_name;\n        }\n        if (component.types.includes('administrative_area_level_1')) {\n          state = component.short_name;\n        }\n      }\n\n      return NextResponse.json({\n        name: cityName,\n        state: state,\n        fullName: `${cityName}, ${state}`,\n        lat: data.result.geometry.location.lat,\n        lng: data.result.geometry.location.lng\n      });\n    }\n\n    throw new Error('No location data found');\n\n  } catch (error) {\n    return NextResponse.json(\n      { error: 'Failed to get coordinates' },\n      { status: 500 }\n    );\n  }\n}","usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/app/api/cities/list/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/app/api/cities/nearby/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_parseError' is defined but never used.","line":75,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":75,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":88,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":88,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\n\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const lat = parseFloat(searchParams.get('lat') || '0');\n    const lng = parseFloat(searchParams.get('lng') || '0');\n    const radius = parseInt(searchParams.get('radius') || '25');\n\n    if (!lat || !lng) {\n      return NextResponse.json({ error: 'Missing latitude or longitude' }, { status: 400 });\n    }\n\n    const googleApiKey = process.env.GOOGLE_MAPS_API_KEY;\n    \n    if (!googleApiKey) {\n      throw new Error('Google API key not configured');\n    }\n\n    const radiusMeters = radius * 1609.34; // Convert miles to meters\n    const allCities = new Map();\n\n    // FAST STRATEGY: Parallel API calls for better coverage and speed\n    const searchPromises = [\n      // Primary locality search\n      fetch(`https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=${lat},${lng}&radius=${radiusMeters}&type=locality&key=${googleApiKey}`),\n      \n      // Secondary searches for more coverage\n      fetch(`https://maps.googleapis.com/maps/api/place/textsearch/json?query=city&location=${lat},${lng}&radius=${radiusMeters}&type=locality&key=${googleApiKey}`),\n      \n      fetch(`https://maps.googleapis.com/maps/api/place/textsearch/json?query=town&location=${lat},${lng}&radius=${radiusMeters}&type=locality&key=${googleApiKey}`)\n    ];\n\n    // Execute all searches in parallel for speed\n    const responses = await Promise.allSettled(searchPromises);\n\n    for (const response of responses) {\n      if (response.status === 'fulfilled' && response.value.ok) {\n        try {\n          const data = await response.value.json();\n          \n          for (const place of data.results || []) {\n            if (place.geometry?.location && place.name) {\n              const distance = calculateDistance(\n                lat, lng,\n                place.geometry.location.lat,\n                place.geometry.location.lng\n              );\n              \n              // Use slightly larger radius for edge cases like Fort Worth suburbs\n              if (distance <= radius + 2) { // +2 miles buffer for suburbs\n                const state = extractStateFromAddress(place.vicinity || place.formatted_address || '');\n                \n                if (state) {\n                  const key = `${place.name.toLowerCase()}-${state}`;\n                  \n                  // Only include if within actual radius or if it's a major city slightly outside\n                  const shouldInclude = distance <= radius || \n                    (distance <= radius + 5 && isMajorCity(place.name));\n                  \n                  if (shouldInclude && (!allCities.has(key) || allCities.get(key).distance > distance)) {\n                    allCities.set(key, {\n                      name: place.name,\n                      state: state,\n                      fullName: `${place.name}, ${state}`,\n                      lat: place.geometry.location.lat,\n                      lng: place.geometry.location.lng,\n                      distance: Math.round(distance * 10) / 10\n                    });\n                  }\n                }\n              }\n            }\n          }\n        } catch (_parseError) {\n        }\n      }\n    }\n\n    // Convert to array and sort alphabetically\n    const cities = Array.from(allCities.values())\n      .sort((a, b) => a.name.localeCompare(b.name))\n      .slice(0, 50);\n\n\n    return NextResponse.json({ cities });\n\n  } catch (error) {\n    return NextResponse.json(\n      { error: 'Failed to fetch nearby cities' },\n      { status: 500 }\n    );\n  }\n}\n\n// Check if a city is considered major (should be included even if slightly outside radius)\nfunction isMajorCity(cityName: string): boolean {\n  const majorCities = [\n    'Fort Worth', 'Arlington', 'Grand Prairie', 'Irving', 'Garland', \n    'Plano', 'McKinney', 'Mesquite', 'Carrollton', 'Richardson',\n    'Frisco', 'Allen', 'Denton', 'Lewisville'\n  ];\n  \n  return majorCities.some(major => \n    cityName.toLowerCase().includes(major.toLowerCase())\n  );\n}\n\n// Calculate distance between coordinates\nfunction calculateDistance(lat1: number, lng1: number, lat2: number, lng2: number): number {\n  const R = 3959; // Earth's radius in miles\n  const dLat = (lat2 - lat1) * Math.PI / 180;\n  const dLng = (lng2 - lng1) * Math.PI / 180;\n  \n  const a = \n    Math.sin(dLat/2) * Math.sin(dLat/2) +\n    Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * \n    Math.sin(dLng/2) * Math.sin(dLng/2);\n  \n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n  return R * c;\n}\n\n// Extract state from address string\nfunction extractStateFromAddress(address: string): string | null {\n  const stateMatch = address.match(/,\\s*([A-Z]{2})\\s*\\d/) || \n                    address.match(/,\\s*([A-Z]{2})$/) ||\n                    address.match(/\\b(TX|TN|FL|GA|CA|AZ|CO|NV|IL|NY|NC|VA)\\b/);\n  \n  return stateMatch ? stateMatch[1] : null;\n}","usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/app/api/cities/search/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":46,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":46,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// CITY SEARCH API - Backend proxy for Google Places API\n// Handles CORS and API key security\n\nimport { NextRequest, NextResponse } from 'next/server';\nimport { GooglePlacesService, validateCityQuery, googlePlacesRateLimiter } from '@/lib/google-places-service';\n\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const query = searchParams.get('q');\n    const limit = parseInt(searchParams.get('limit') || '5');\n\n    if (!query) {\n      return NextResponse.json(\n        { error: 'Query parameter \"q\" is required' },\n        { status: 400 }\n      );\n    }\n\n    // Validate query\n    const validation = validateCityQuery(query);\n    if (!validation.isValid) {\n      return NextResponse.json(\n        { error: validation.error },\n        { status: 400 }\n      );\n    }\n\n    // Rate limiting\n    const clientIP = request.headers.get('x-forwarded-for') || 'unknown';\n    if (!googlePlacesRateLimiter.canMakeRequest(clientIP, 10, 1)) {\n      return NextResponse.json(\n        { error: 'Too many requests. Please try again in a minute.' },\n        { status: 429 }\n      );\n    }\n\n    // Search cities using Google Places API\n    const cities = await GooglePlacesService.searchCities(query, limit);\n\n    return NextResponse.json({\n      cities,\n      hasMore: cities.length === limit\n    });\n\n  } catch (error) {\n    return NextResponse.json(\n      { error: 'City search failed. Please try again.' },\n      { status: 500 }\n    );\n  }\n}","usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/app/api/cities/within-radius/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_apiError' is defined but never used.","line":104,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":104,"endColumn":23}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\n\ninterface OverpassElement {\n  id: number;\n  type: string;\n  lat?: number;\n  lon?: number;\n  center?: {\n    lat: number;\n    lon: number;\n  };\n  tags?: {\n    name?: string;\n    place?: string;\n    state?: string;\n    'addr:state'?: string;\n  };\n}\n\ninterface OverpassResponse {\n  elements: OverpassElement[];\n}\n\ninterface CityResult {\n  name: string;\n  state: string;\n  lat: number;\n  lng: number;\n  distance: number;\n  type: string;\n}\n\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const lat = parseFloat(searchParams.get('lat') || '0');\n    const lng = parseFloat(searchParams.get('lng') || '0');\n    const radius = parseInt(searchParams.get('radius') || '50');\n\n    if (!lat || !lng) {\n      return NextResponse.json(\n        { error: 'Latitude and longitude required' },\n        { status: 400 }\n      );\n    }\n\n    // Use Overpass API to find all cities within radius\n    const overpassQuery = `\n      [out:json][timeout:25];\n      (\n        node[\"place\"~\"^(city|town|village)$\"](around:${radius * 1609.34},${lat},${lng});\n        way[\"place\"~\"^(city|town|village)$\"](around:${radius * 1609.34},${lat},${lng});\n        relation[\"place\"~\"^(city|town|village)$\"](around:${radius * 1609.34},${lat},${lng});\n      );\n      out center;\n    `;\n\n    try {\n      const response = await fetch('https://overpass-api.de/api/interpreter', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'text/plain',\n        },\n        body: overpassQuery\n      });\n\n      if (!response.ok) {\n        throw new Error('Overpass API error');\n      }\n\n      const data: OverpassResponse = await response.json();\n      \n      // Process and filter results\n      const cities = data.elements\n        .filter((element: OverpassElement) => element.tags && element.tags.name)\n        .map((element: OverpassElement) => {\n          const elementLat = element.lat || element.center?.lat;\n          const elementLng = element.lon || element.center?.lon;\n          \n          if (!elementLat || !elementLng) return null;\n          \n          // Calculate actual distance\n          const distance = calculateDistance(lat, lng, elementLat, elementLng);\n          \n          return {\n            name: element.tags?.name || 'Unknown',\n            state: element.tags?.['addr:state'] || element.tags?.state || 'Unknown',\n            lat: elementLat,\n            lng: elementLng,\n            distance: Math.round(distance * 10) / 10,\n            type: element.tags?.place || 'city'\n          };\n        })\n        .filter((city): city is CityResult => city !== null && city.name !== 'Unknown' && city.distance <= radius)\n        .sort((a, b) => a.distance - b.distance);\n\n      return NextResponse.json({\n        centerCity: { lat, lng },\n        radius,\n        totalCities: cities.length,\n        cities: cities.slice(0, 100) // Limit to 100 cities\n      });\n\n    } catch (_apiError) {\n      // Fallback to simple radius calculation using major cities\n      return NextResponse.json({\n        centerCity: { lat, lng },\n        radius,\n        totalCities: 0,\n        cities: [],\n        error: 'Unable to fetch cities in radius'\n      });\n    }\n\n  } catch (error) {\n    return NextResponse.json(\n      { error: 'Search failed', details: (error as Error).message },\n      { status: 500 }\n    );\n  }\n}\n\n// Calculate distance between two coordinates using Haversine formula\nfunction calculateDistance(lat1: number, lng1: number, lat2: number, lng2: number): number {\n  const R = 3959; // Earth's radius in miles\n  const dLat = (lat2 - lat1) * Math.PI / 180;\n  const dLng = (lng2 - lng1) * Math.PI / 180;\n  const a = \n    Math.sin(dLat/2) * Math.sin(dLat/2) +\n    Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * \n    Math.sin(dLng/2) * Math.sin(dLng/2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n  const distance = R * c;\n  return distance;\n}","usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/app/api/debug/add-credits/route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":16,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[498,501],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[498,501],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":21,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[681,684],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[681,684],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":38,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":38,"endColumn":17}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { FirebaseDB } from '@/lib/firebase-db';\n\nexport async function POST(request: NextRequest) {\n  try {\n    const { email, credits } = await request.json();\n    \n    \n    // Find user by email\n    const user = await FirebaseDB.findUserByEmail(email);\n    if (!user) {\n      return NextResponse.json({ error: 'User not found' }, { status: 404 });\n    }\n    \n    // Get current credits and add new ones\n    const currentCredits = (user as any).realtorData?.credits || 0;\n    const newCredits = currentCredits + parseInt(credits);\n    \n    // Update user with new credits\n    const updatedRealtorData = {\n      ...(user as any).realtorData || {},\n      credits: newCredits,\n      updatedAt: new Date()\n    };\n\n    await FirebaseDB.updateDocument('users', user.id, {\n      realtorData: updatedRealtorData,\n      updatedAt: new Date()\n    });\n\n    \n    return NextResponse.json({\n      success: true,\n      message: `Added ${credits} credits. New balance: ${newCredits}`,\n      newBalance: newCredits\n    });\n\n  } catch (error) {\n    return NextResponse.json({ error: 'Failed' }, { status: 500 });\n  }\n}","usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/app/api/debug/analyze-dallas-buyers/route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":12,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[391,394],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[391,394],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":19,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[631,634],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[631,634],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":57,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":57,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2015,2018],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2015,2018],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextResponse } from 'next/server';\nimport { FirebaseDB } from '@/lib/firebase-db';\nimport { ConsolidatedLeadSystem } from '@/lib/consolidated-lead-system';\n\nexport async function GET() {\n  try {\n    \n    // Get all buyers \n    const allBuyers = await FirebaseDB.queryDocuments('buyerProfiles', []);\n    \n    // Filter Dallas buyers\n    const dallasBuyers = allBuyers.filter((buyer: any) => {\n      const city = buyer.preferredCity || buyer.city || '';\n      return city.toLowerCase().includes('dallas');\n    });\n    \n    \n    // Check each Dallas buyer's data structure\n    const dallasAnalysis = dallasBuyers.map((buyer: any) => {\n      return {\n        id: buyer.id,\n        name: `${buyer.firstName} ${buyer.lastName}`,\n        userId: buyer.userId,\n        \n        // Check all city/state fields\n        preferredCity: buyer.preferredCity,\n        preferredState: buyer.preferredState,\n        city: buyer.city,\n        state: buyer.state,\n        \n        // Check availability flags\n        isAvailableForPurchase: buyer.isAvailableForPurchase,\n        isActive: buyer.isActive,\n        profileComplete: buyer.profileComplete,\n        \n        // Check if this buyer would be found by state query\n        wouldMatchTXQuery: buyer.preferredState === 'TX' || buyer.state === 'TX',\n        \n        // Other data\n        maxMonthlyPayment: buyer.maxMonthlyPayment,\n        maxDownPayment: buyer.maxDownPayment,\n        languages: buyer.languages,\n        createdAt: buyer.createdAt,\n        updatedAt: buyer.updatedAt\n      };\n    });\n    \n    // Test the exact query ConsolidatedLeadSystem uses\n    const txBuyersQuery = await FirebaseDB.queryDocuments('buyerProfiles', [\n      { field: 'preferredState', operator: '==', value: 'TX' },\n      { field: 'isAvailableForPurchase', operator: '==', value: true },\n      { field: 'isActive', operator: '==', value: true },\n      { field: 'profileComplete', operator: '==', value: true }\n    ]);\n    \n    \n    const txQueryResults = txBuyersQuery.map((buyer: any) => ({\n      id: buyer.id,\n      name: `${buyer.firstName} ${buyer.lastName}`,\n      city: buyer.preferredCity || buyer.city,\n      state: buyer.preferredState || buyer.state\n    }));\n    \n    // Test Dallas realtor profile matching manually\n    const dallasRealtorProfile = {\n      cities: ['Dallas'],\n      languages: ['English'],\n      state: 'TX'\n    };\n    \n    const dallasMatches = await ConsolidatedLeadSystem.findAvailableLeads(dallasRealtorProfile);\n    \n    return NextResponse.json({\n      summary: {\n        totalBuyers: allBuyers.length,\n        dallasBuyers: dallasBuyers.length,\n        txQueryResults: txBuyersQuery.length,\n        dallasMatches: dallasMatches.length\n      },\n      dallasBuyersAnalysis: dallasAnalysis,\n      txQueryResults: txQueryResults,\n      dallasMatchingTest: {\n        realtorProfile: dallasRealtorProfile,\n        matches: dallasMatches.map(m => ({\n          id: m.id,\n          name: `${m.firstName} ${m.lastName}`,\n          city: m.city,\n          state: m.state,\n          score: m.matchScore,\n          reasons: m.matchReasons\n        }))\n      }\n    });\n\n  } catch (error) {\n    return NextResponse.json({ \n      error: 'Analysis failed',\n      details: (error as Error).message\n    }, { status: 500 });\n  }\n}","usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/app/api/debug/check-buyer-profiles/route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":15,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[485,488],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[485,488],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextResponse } from 'next/server';\nimport { FirebaseDB } from '@/lib/firebase-db';\nimport { ConsolidatedLeadSystem } from '@/lib/consolidated-lead-system';\n\nexport async function GET() {\n  try {\n    \n    // Get all buyer profiles\n    const allBuyerProfiles = await FirebaseDB.queryDocuments('buyerProfiles', []);\n    \n    \n    // Get system statistics\n    const stats = await ConsolidatedLeadSystem.getSystemStatistics();\n    \n    const summary = allBuyerProfiles.map((buyer: any) => ({\n      id: buyer.id,\n      name: `${buyer.firstName} ${buyer.lastName}`,\n      city: buyer.preferredCity || buyer.city,\n      state: buyer.preferredState || buyer.state,\n      budget: `$${buyer.maxMonthlyPayment}/mo`,\n      languages: buyer.languages,\n      isAvailable: buyer.isAvailableForPurchase,\n      isActive: buyer.isActive,\n      profileComplete: buyer.profileComplete,\n      purchasedBy: buyer.purchasedBy || null\n    }));\n    \n    return NextResponse.json({\n      totalProfiles: allBuyerProfiles.length,\n      profiles: summary,\n      systemStats: stats\n    });\n\n  } catch (error) {\n    return NextResponse.json({ error: 'Failed', details: (error as Error).message }, { status: 500 });\n  }\n}","usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/app/api/debug/check-buyers/route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":12,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[345,348],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[345,348],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":17,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[481,484],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[481,484],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":33,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":33,"endColumn":17}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextResponse } from 'next/server';\nimport { FirebaseDB } from '@/lib/firebase-db';\n\nexport async function GET() {\n  try {\n    \n    // Get all buyer links\n    const allBuyerLinks = await FirebaseDB.queryDocuments('buyerLinks', []);\n    \n    \n    // Filter Dallas buyers specifically\n    const dallasBuyers = allBuyerLinks.filter((buyer: any) => \n      buyer.city && buyer.city.toLowerCase().includes('dallas')\n    );\n    \n    \n    const summary = allBuyerLinks.map((buyer: any) => ({\n      id: buyer.id,\n      name: `${buyer.firstName} ${buyer.lastName}`,\n      city: buyer.city,\n      state: buyer.state,\n      budget: `$${buyer.maxMonthlyPayment}/mo`,\n      languages: buyer.languages,\n      isAvailable: buyer.isAvailable\n    }));\n    \n    return NextResponse.json({\n      totalBuyers: allBuyerLinks.length,\n      dallasBuyers: dallasBuyers.length,\n      buyers: summary\n    });\n\n  } catch (error) {\n    return NextResponse.json({ error: 'Failed' }, { status: 500 });\n  }\n}","usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/app/api/debug/check-realtor-matching/route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":22,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":22,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[688,691],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[688,691],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":44,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":44,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1383,1386],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1383,1386],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":65,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":65,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2099,2102],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2099,2102],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":91,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":91,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2953,2956],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2953,2956],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":106,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":106,"endColumn":17}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextResponse } from 'next/server';\nimport { FirebaseDB } from '@/lib/firebase-db';\nimport { ConsolidatedLeadSystem } from '@/lib/consolidated-lead-system';\n\nexport async function GET() {\n  try {\n    \n    // Get all realtor users\n    const realtorUsers = await FirebaseDB.queryDocuments('users', [\n      { field: 'role', operator: '==', value: 'realtor' }\n    ]);\n    \n    // Get all buyer profiles  \n    const allBuyers = await FirebaseDB.queryDocuments('buyerProfiles', [\n      { field: 'isAvailableForPurchase', operator: '==', value: true }\n    ]);\n    \n    \n    const debugResults = [];\n    \n    for (const realtorUser of realtorUsers) {\n      const realtor = realtorUser as any;\n      \n      \n      if (!realtor.realtorData?.serviceArea?.primaryCity) {\n        debugResults.push({\n          realtorId: realtor.id,\n          realtorName: realtor.name,\n          issue: 'No service area configured',\n          serviceArea: null,\n          matches: []\n        });\n        continue;\n      }\n      \n      // Extract service cities\n      const serviceArea = realtor.realtorData.serviceArea;\n      let cities: string[] = [];\n      \n      if (serviceArea.primaryCity?.name) {\n        cities = [serviceArea.primaryCity.name];\n        \n        if (serviceArea.nearbyCities && serviceArea.nearbyCities.length > 0) {\n          const nearbyCities = serviceArea.nearbyCities.map((c: any) => c.name || c);\n          cities.push(...nearbyCities);\n        }\n      }\n      \n      if (realtor.realtorData.serviceCities && realtor.realtorData.serviceCities.length > 0) {\n        cities = realtor.realtorData.serviceCities.map((city: string) => city.split(',')[0]?.trim());\n      }\n      \n      const realtorProfile = {\n        cities: cities,\n        languages: realtor.realtorData.languages || ['English'],\n        state: serviceArea.primaryCity?.state || 'TX'\n      };\n      \n      \n      // Test matching\n      const matches = await ConsolidatedLeadSystem.findAvailableLeads(realtorProfile);\n      \n      \n      // Check which buyers should match\n      const potentialBuyers = allBuyers.filter((buyer: any) => {\n        const buyerCity = buyer.preferredCity || buyer.city;\n        const buyerState = buyer.preferredState || buyer.state;\n        \n        const cityMatch = cities.some(city => \n          city.toLowerCase() === buyerCity?.toLowerCase()\n        );\n        const stateMatch = buyerState === realtorProfile.state;\n        \n        \n        return cityMatch && stateMatch;\n      });\n      \n      debugResults.push({\n        realtorId: realtor.id,\n        realtorName: realtor.name,\n        serviceArea: realtorProfile,\n        potentialBuyers: potentialBuyers.length,\n        actualMatches: matches.length,\n        matches: matches.map(m => ({\n          id: m.id,\n          name: `${m.firstName} ${m.lastName}`,\n          city: m.city,\n          state: m.state,\n          score: m.matchScore\n        })),\n        buyers: potentialBuyers.map((b: any) => ({\n          id: b.id,\n          name: `${b.firstName} ${b.lastName}`,\n          city: b.preferredCity || b.city,\n          state: b.preferredState || b.state\n        }))\n      });\n    }\n    \n    return NextResponse.json({\n      totalRealtors: realtorUsers.length,\n      totalBuyers: allBuyers.length,\n      debugResults\n    });\n\n  } catch (error) {\n    return NextResponse.json({ error: 'Debug failed' }, { status: 500 });\n  }\n}","usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/app/api/debug/check-realtor-service-area/route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":22,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":22,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[701,704],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[701,704],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":35,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":35,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1249,1252],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1249,1252],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { FirebaseDB } from '@/lib/firebase-db';\n\nexport async function POST(request: NextRequest) {\n  try {\n    const { email } = await request.json();\n    \n    if (!email) {\n      return NextResponse.json({ error: 'Email required' }, { status: 400 });\n    }\n    \n    // Find realtor by email\n    const realtors = await FirebaseDB.queryDocuments('users', [\n      { field: 'email', operator: '==', value: email },\n      { field: 'role', operator: '==', value: 'realtor' }\n    ]);\n    \n    if (realtors.length === 0) {\n      return NextResponse.json({ error: 'Realtor not found' }, { status: 404 });\n    }\n    \n    const realtor = realtors[0] as any;\n    const realtorData = realtor.realtorData || {};\n    \n    // Extract service cities like the dashboard does\n    const serviceArea = realtorData.serviceArea || {};\n    let cities: string[] = [];\n    \n    // Get primary city and nearby cities from serviceArea\n    if (serviceArea.primaryCity?.name) {\n      cities = [serviceArea.primaryCity.name];\n      \n      // Add all nearby cities from service area\n      if (serviceArea.nearbyCities && serviceArea.nearbyCities.length > 0) {\n        const nearbyCities = serviceArea.nearbyCities.map((c: any) => \n          typeof c === 'string' ? c : (c.name || 'Unknown')\n        );\n        cities.push(...nearbyCities);\n      }\n    }\n    \n    // Also check if cities are saved directly in serviceCities field\n    if (realtorData.serviceCities && realtorData.serviceCities.length > 0) {\n      cities = realtorData.serviceCities.map((city: string) => city.split(',')[0]?.trim());\n    }\n    \n    const realtorProfile = {\n      cities: cities,\n      languages: ['English'], // Default - can be extended later\n      state: serviceArea.primaryCity?.state || 'Unknown'\n    };\n    \n    return NextResponse.json({\n      success: true,\n      realtor: {\n        name: `${realtorData.firstName} ${realtorData.lastName}`,\n        email: realtor.email\n      },\n      rawServiceArea: serviceArea,\n      rawServiceCities: realtorData.serviceCities,\n      extractedProfile: realtorProfile,\n      fullRealtorData: realtorData\n    });\n    \n  } catch (error) {\n    return NextResponse.json({ \n      error: 'Failed', \n      details: (error as Error).message \n    }, { status: 500 });\n  }\n}","usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/app/api/debug/check-user-profile/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":38,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":38,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { FirebaseDB } from '@/lib/firebase-db';\n\nexport async function POST(request: NextRequest) {\n  try {\n    const { email } = await request.json();\n    \n    \n    // Find user by email\n    const user = await FirebaseDB.findUserByEmail(email);\n    if (!user) {\n      return NextResponse.json({ error: 'User not found' }, { status: 404 });\n    }\n    \n    \n    // Get buyer profile\n    const buyerProfile = await FirebaseDB.findBuyerByUserId(user.id);\n    \n    \n    // Get buyer link profile  \n    const buyerLinks = await FirebaseDB.queryDocuments(\n      'buyerLinks',\n      [{ field: 'userId', operator: '==', value: user.id }]\n    );\n    \n\n    return NextResponse.json({\n      user: {\n        id: user.id,\n        name: user.name,\n        email: user.email,\n        role: user.role\n      },\n      buyerProfile: buyerProfile,\n      buyerLinks: buyerLinks\n    });\n\n  } catch (error) {\n    return NextResponse.json({ error: 'Failed' }, { status: 500 });\n  }\n}","usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/app/api/debug/create-test-buyers/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":81,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":81,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextResponse } from 'next/server';\nimport { ConsolidatedLeadSystem } from '@/lib/consolidated-lead-system';\n\nexport async function POST() {\n  try {\n    const testBuyers = [\n      {\n        userId: \"buyer1_test\",\n        firstName: \"John\",\n        lastName: \"Smith\", \n        email: \"john.smith@test.com\",\n        phone: \"555-111-1111\",\n        city: \"Dallas, TX\",\n        maxMonthlyPayment: 2000,\n        maxDownPayment: 50000,\n        languages: [\"English\"]\n      },\n      {\n        userId: \"buyer2_test\", \n        firstName: \"Maria\",\n        lastName: \"Garcia\",\n        email: \"maria.garcia@test.com\", \n        phone: \"555-222-2222\",\n        city: \"Houston, TX\",\n        maxMonthlyPayment: 1500,\n        maxDownPayment: 30000,\n        languages: [\"Spanish\"]\n      },\n      {\n        userId: \"buyer3_test\",\n        firstName: \"Pierre\", \n        lastName: \"Johnson\",\n        email: \"pierre.johnson@test.com\",\n        phone: \"555-333-3333\",\n        city: \"Austin, TX\", \n        maxMonthlyPayment: 2500,\n        maxDownPayment: 75000,\n        languages: [\"English\", \"French\"]\n      },\n      {\n        userId: \"buyer4_test\",\n        firstName: \"Carlos\",\n        lastName: \"Rodriguez\",\n        email: \"carlos.rodriguez@test.com\",\n        phone: \"555-444-4444\", \n        city: \"San Antonio, TX\",\n        maxMonthlyPayment: 1800,\n        maxDownPayment: 40000,\n        languages: [\"Spanish\", \"English\"]\n      },\n      {\n        userId: \"buyer5_test\",\n        firstName: \"Lisa\",\n        lastName: \"Williams\", \n        email: \"lisa.williams@test.com\",\n        phone: \"555-555-5555\",\n        city: \"Fort Worth, TX\",\n        maxMonthlyPayment: 3000,\n        maxDownPayment: 100000,\n        languages: [\"English\"]\n      }\n    ];\n\n    const results = [];\n    \n    for (const buyer of testBuyers) {\n      try {\n        const profileId = await ConsolidatedLeadSystem.createBuyerProfile(buyer);\n        results.push({ success: true, profileId, buyer: buyer.firstName });\n      } catch (error) {\n        results.push({ success: false, error: (error as Error).message || 'Unknown error', buyer: buyer.firstName });\n      }\n    }\n\n    return NextResponse.json({ \n      success: true,\n      message: 'Test buyer profiles created in buyerProfiles collection',\n      results: results\n    });\n\n  } catch (error) {\n    return NextResponse.json({ error: 'Failed' }, { status: 500 });\n  }\n}","usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/app/api/debug/create-test-profiles/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/app/api/debug/fix-dallas-buyers/route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":10,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[297,300],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[297,300],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":19,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[537,540],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[537,540],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextResponse } from 'next/server';\nimport { FirebaseDB } from '@/lib/firebase-db';\n\nexport async function POST() {\n  try {\n    \n    // Get all Dallas buyers\n    const allBuyers = await FirebaseDB.queryDocuments('buyerProfiles', []);\n    \n    const dallasBuyers = allBuyers.filter((buyer: any) => {\n      const city = buyer.preferredCity || buyer.city || '';\n      return city.toLowerCase().includes('dallas');\n    });\n    \n    \n    const fixes = [];\n    \n    for (const buyer of dallasBuyers) {\n      const buyerData = buyer as any;\n      \n      try {\n        // Check what needs fixing\n        const needsFix = \n          buyerData.isAvailableForPurchase === false ||\n          buyerData.isAvailableForPurchase === undefined ||\n          !buyerData.preferredState ||\n          !buyerData.preferredCity;\n        \n        if (needsFix) {\n          const updates = {\n            // Ensure availability \n            isAvailableForPurchase: true,\n            \n            // Ensure proper location fields\n            preferredCity: buyerData.preferredCity || buyerData.city?.split(',')[0] || 'Dallas',\n            preferredState: buyerData.preferredState || buyerData.state || 'TX',\n            city: buyerData.city || buyerData.preferredCity || 'Dallas',\n            state: buyerData.state || buyerData.preferredState || 'TX',\n            \n            // Ensure required arrays exist\n            likedPropertyIds: buyerData.likedPropertyIds || [],\n            passedPropertyIds: buyerData.passedPropertyIds || [],\n            matchedPropertyIds: buyerData.matchedPropertyIds || [],\n            \n            // Ensure system fields\n            isActive: buyerData.isActive ?? true,\n            profileComplete: buyerData.profileComplete ?? true,\n            languages: buyerData.languages || ['English'],\n            \n            // Lead selling\n            leadPrice: buyerData.leadPrice || 1,\n            \n            // Clear purchase data to make available\n            purchasedBy: null,\n            purchasedAt: null,\n            \n            // Update timestamp\n            updatedAt: new Date()\n          };\n          \n          await FirebaseDB.updateDocument('buyerProfiles', buyerData.id, updates);\n          \n          fixes.push({\n            id: buyerData.id,\n            name: `${buyerData.firstName} ${buyerData.lastName}`,\n            wasAvailable: buyerData.isAvailableForPurchase,\n            nowAvailable: true,\n            city: updates.preferredCity,\n            state: updates.preferredState\n          });\n          \n        }\n        \n      } catch (error) {\n        fixes.push({\n          id: buyerData.id,\n          name: `${buyerData.firstName} ${buyerData.lastName}`,\n          error: (error as Error).message\n        });\n      }\n    }\n    \n    \n    return NextResponse.json({\n      success: true,\n      message: `Fixed ${fixes.length} Dallas buyers`,\n      fixes\n    });\n\n  } catch (error) {\n    return NextResponse.json({ \n      error: 'Fix failed',\n      details: (error as Error).message\n    }, { status: 500 });\n  }\n}","usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/app/api/debug/list-realtors/route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":11,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[337,340],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[337,340],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextResponse } from 'next/server';\nimport { FirebaseDB } from '@/lib/firebase-db';\n\nexport async function GET() {\n  try {\n    // Get all realtors\n    const realtors = await FirebaseDB.queryDocuments('users', [\n      { field: 'role', operator: '==', value: 'realtor' }\n    ]);\n    \n    const realtorList = realtors.map((realtor: any) => {\n      const realtorData = realtor.realtorData || {};\n      const serviceArea = realtorData.serviceArea || {};\n      \n      return {\n        id: realtor.id,\n        email: realtor.email,\n        name: `${realtorData.firstName || ''} ${realtorData.lastName || ''}`.trim(),\n        primaryCity: serviceArea.primaryCity?.name || 'Unknown',\n        primaryState: serviceArea.primaryCity?.state || 'Unknown',\n        serviceCities: realtorData.serviceCities || [],\n        createdAt: realtor.createdAt || realtorData.createdAt\n      };\n    });\n    \n    // Sort by creation date (most recent first)\n    realtorList.sort((a, b) => {\n      const aTime = a.createdAt?.seconds || 0;\n      const bTime = b.createdAt?.seconds || 0;\n      return bTime - aTime;\n    });\n    \n    return NextResponse.json({\n      success: true,\n      totalRealtors: realtors.length,\n      realtors: realtorList\n    });\n    \n  } catch (error) {\n    return NextResponse.json({ \n      error: 'Failed', \n      details: (error as Error).message \n    }, { status: 500 });\n  }\n}","usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/app/api/debug/test-matching/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/app/api/debug/test-memphis/route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":26,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[783,786],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[783,786],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextResponse } from 'next/server';\nimport { ConsolidatedLeadSystem } from '@/lib/consolidated-lead-system';\nimport { FirebaseDB } from '@/lib/firebase-db';\n\nexport async function GET() {\n  try {\n    // Test Memphis realtor profile\n    const memphisRealtorProfile = {\n      cities: [\"Memphis\"],\n      languages: [\"English\"],\n      state: \"TN\"\n    };\n\n\n    // Get all TN buyers first\n    const tnBuyers = await FirebaseDB.queryDocuments('buyerProfiles', [\n      { field: 'state', operator: '==', value: 'TN' }\n    ]);\n\n    // Test the matching system\n    const leads = await ConsolidatedLeadSystem.findAvailableLeads(memphisRealtorProfile);\n\n    return NextResponse.json({ \n      success: true,\n      realtorProfile: memphisRealtorProfile,\n      allTnBuyers: tnBuyers.map((b: any) => ({\n        name: `${b.firstName} ${b.lastName}`,\n        city: b.preferredCity || b.city,\n        state: b.preferredState || b.state,\n        isAvailable: b.isAvailableForPurchase,\n        isActive: b.isActive,\n        profileComplete: b.profileComplete,\n        languages: b.languages\n      })),\n      matchedLeads: leads.map(lead => ({\n        name: `${lead.firstName} ${lead.lastName}`,\n        city: lead.city,\n        state: lead.state,\n        matchScore: lead.matchScore,\n        matchReasons: lead.matchReasons\n      }))\n    });\n\n  } catch (error) {\n    return NextResponse.json({ \n      error: 'Failed', \n      details: (error as Error).message \n    }, { status: 500 });\n  }\n}","usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/app/api/properties/details/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":69,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":69,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { \n  collection, \n  query, \n  where, \n  getDocs,\n  documentId \n} from 'firebase/firestore';\nimport { db } from '@/lib/firebase';\n\nexport async function GET(request: NextRequest) {\n  try {\n    if (!db) {\n      return NextResponse.json(\n        { error: 'Database not available' },\n        { status: 500 }\n      );\n    }\n\n    const { searchParams } = new URL(request.url);\n    const idsParam = searchParams.get('ids');\n    \n    if (!idsParam) {\n      return NextResponse.json({ properties: [] });\n    }\n\n    const propertyIds = JSON.parse(idsParam);\n    \n    if (!Array.isArray(propertyIds) || propertyIds.length === 0) {\n      return NextResponse.json({ properties: [] });\n    }\n\n\n    // Firestore 'in' query has a limit of 10, so batch if needed\n    const properties = [];\n    \n    for (let i = 0; i < propertyIds.length; i += 10) {\n      const batch = propertyIds.slice(i, i + 10);\n      \n      const batchQuery = query(\n        collection(db, 'properties'),\n        where(documentId(), 'in', batch)\n      );\n      \n      const snapshot = await getDocs(batchQuery);\n      const batchProperties = snapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data(),\n        createdAt: doc.data().createdAt?.toDate?.()?.toISOString() || doc.data().createdAt,\n        updatedAt: doc.data().updatedAt?.toDate?.()?.toISOString() || doc.data().updatedAt\n      }));\n      \n      properties.push(...batchProperties);\n    }\n\n    // Sort properties in the same order as requested IDs\n    const sortedProperties = properties.sort((a, b) => {\n      const aIndex = propertyIds.indexOf(a.id);\n      const bIndex = propertyIds.indexOf(b.id);\n      return aIndex - bIndex;\n    });\n\n\n    return NextResponse.json({\n      properties: sortedProperties,\n      count: sortedProperties.length\n    });\n\n  } catch (error) {\n    return NextResponse.json(\n      { error: 'Failed to fetch property details' },\n      { status: 500 }\n    );\n  }\n}","usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/app/api/properties/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":46,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":46,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { \n  collection, \n  query, \n  where, \n  getDocs, \n  limit as firestoreLimit,\n  orderBy \n} from 'firebase/firestore';\nimport { db } from '@/lib/firebase';\n\nexport async function GET(request: NextRequest) {\n  try {\n    if (!db) {\n      return NextResponse.json(\n        { error: 'Database not available' },\n        { status: 500 }\n      );\n    }\n\n    const { searchParams } = new URL(request.url);\n    const limit = Math.min(parseInt(searchParams.get('limit') || '20'), 100); // Cap at 100 for performance\n    \n    // Fetch properties from Firebase with proper indexing\n    const propertiesQuery = query(\n      collection(db, 'properties'),\n      where('isActive', '==', true),\n      orderBy('createdAt', 'desc'), // Add ordering for consistent pagination\n      firestoreLimit(limit)\n    );\n    \n    const propertiesSnapshot = await getDocs(propertiesQuery);\n    const properties = propertiesSnapshot.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data(),\n      // Convert Firestore timestamps to readable format\n      createdAt: doc.data().createdAt?.toDate?.()?.toISOString() || doc.data().createdAt,\n      updatedAt: doc.data().updatedAt?.toDate?.()?.toISOString() || doc.data().updatedAt\n    }));\n\n    return NextResponse.json({ \n      properties,\n      count: properties.length \n    });\n\n  } catch (error) {\n\n    return NextResponse.json(\n      { error: 'Failed to fetch properties' },\n      { status: 500 }\n    );\n  }\n}","usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/app/api/properties/search-optimized/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/app/api/properties/search-with-nearby/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/app/api/properties/similar/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'query' is defined but never used.","line":5,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'where' is defined but never used.","line":6,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'orderBy' is defined but never used.","line":7,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'firestoreLimit' is defined but never used.","line":8,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":108,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":108,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { \n  collection, \n  getDocs,\n  query,\n  where,\n  orderBy,\n  limit as firestoreLimit\n} from 'firebase/firestore';\nimport { db } from '@/lib/firebase';\nimport { expandSearchToNearbyCities, enhancePropertyWithNearbyCities } from '@/lib/property-enhancement';\nimport { PropertyListing } from \"@/lib/property-schema\";\n\n/**\n * SIMILAR PROPERTIES API\n * \n * Returns properties similar to a given property by:\n * 1. Finding all cities within 30-mile radius of the property\n * 2. Searching for properties in those nearby cities\n * 3. Filtering by similar price range, bedrooms, and bathrooms\n */\n\nexport async function GET(request: NextRequest) {\n  try {\n    if (!db) {\n      return NextResponse.json(\n        { error: 'Database not available' },\n        { status: 500 }\n      );\n    }\n\n    const { searchParams } = new URL(request.url);\n    const propertyId = searchParams.get('propertyId');\n    const city = searchParams.get('city');\n    const state = searchParams.get('state');\n    const listPrice = parseFloat(searchParams.get('listPrice') || '0');\n    const bedrooms = parseInt(searchParams.get('bedrooms') || '0');\n    const bathrooms = parseFloat(searchParams.get('bathrooms') || '0');\n    const limit = parseInt(searchParams.get('limit') || '10');\n\n    if (!city || !state) {\n      return NextResponse.json({ \n        error: 'City and state are required' \n      }, { status: 400 });\n    }\n\n\n    // Get all cities within 30-mile radius\n    const searchCities = expandSearchToNearbyCities(city, state, 30);\n    \n\n    // Get all properties and filter in JavaScript (since we need complex city matching)\n    const snapshot = await getDocs(collection(db, 'properties'));\n    \n    const similarProperties = snapshot.docs\n      .map(doc => ({ id: doc.id, ...doc.data() } as PropertyListing & { id: string }))\n      .filter((property: PropertyListing & { id: string }) => {\n        // Exclude the original property\n        if (property.id === propertyId) return false;\n        \n        // Must be active\n        if (property.isActive === false) return false;\n        \n        // Must be in same state first\n        if (property.state !== state) return false;\n        \n        // Check if property city is in our nearby cities list\n        const propertyCity = property.city?.split(',')[0].trim();\n        const cityMatch = searchCities.some(searchCity => \n          propertyCity?.toLowerCase() === searchCity.toLowerCase()\n        );\n        \n        if (!cityMatch) return false;\n        \n        // Similar price range (within 20% of original price)\n        const priceMatch = listPrice === 0 || (\n          property.listPrice >= listPrice * 0.8 && \n          property.listPrice <= listPrice * 1.2\n        );\n        \n        // Similar bedrooms (exact match or within 1)\n        const bedroomMatch = bedrooms === 0 || (\n          Math.abs(property.bedrooms - bedrooms) <= 1\n        );\n        \n        // Similar bathrooms (within 0.5)\n        const bathroomMatch = bathrooms === 0 || (\n          Math.abs(property.bathrooms - bathrooms) <= 0.5\n        );\n        \n        return priceMatch && bedroomMatch && bathroomMatch;\n      })\n      // Sort by monthly payment (most affordable first)\n      .sort((a, b) => (a.monthlyPayment || 0) - (b.monthlyPayment || 0))\n      .slice(0, limit)\n      // Enhance each property with nearby cities data\n      .map(property => enhancePropertyWithNearbyCities(property));\n\n\n    return NextResponse.json({\n      originalProperty: { city, state, listPrice, bedrooms, bathrooms },\n      searchRadius: 30,\n      searchCities: searchCities,\n      totalFound: similarProperties.length,\n      properties: similarProperties\n    });\n\n  } catch (error) {\n    return NextResponse.json({ \n      error: 'Failed to find similar properties',\n      properties: []\n    }, { status: 500 });\n  }\n}","usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/app/api/properties/sync-matches/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":77,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":77,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":176,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":176,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'buyerLocation' is assigned a value but never used.","line":197,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":197,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":254,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":254,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { \n  collection, \n  query, \n  where, \n  getDocs,\n  updateDoc,\n  doc,\n  arrayRemove,\n  arrayUnion,\n  serverTimestamp \n} from 'firebase/firestore';\nimport { db } from '@/lib/firebase';\nimport { isPropertyMatch } from '@/lib/matching';\nimport { BuyerProfile } from '@/lib/firebase-models';\nimport { PropertyListing } from '@/lib/property-schema';\n\n// Sync property matches across all buyers when properties change\nexport async function POST(request: NextRequest) {\n  try {\n    if (!db) {\n      return NextResponse.json(\n        { error: 'Database not available' },\n        { status: 500 }\n      );\n    }\n    const body = await request.json();\n    const { action, propertyId, propertyData } = body;\n    // action: 'delete', 'add', 'update'\n\n    if (!action || !propertyId) {\n      return NextResponse.json(\n        { error: 'Missing action or propertyId' },\n        { status: 400 }\n      );\n    }\n\n    switch (action) {\n      case 'delete':\n        await removePropertyFromAllBuyers(propertyId);\n        break;\n        \n      case 'add':\n        if (!propertyData) {\n          return NextResponse.json(\n            { error: 'Missing propertyData for add action' },\n            { status: 400 }\n          );\n        }\n        await addPropertyToMatchingBuyers(propertyData);\n        break;\n        \n      case 'update':\n        if (!propertyData) {\n          return NextResponse.json(\n            { error: 'Missing propertyData for update action' },\n            { status: 400 }\n          );\n        }\n        // For updates: remove from all, then re-add to matching buyers\n        await removePropertyFromAllBuyers(propertyId);\n        await addPropertyToMatchingBuyers(propertyData);\n        break;\n        \n      default:\n        return NextResponse.json(\n          { error: 'Invalid action' },\n          { status: 400 }\n        );\n    }\n\n    return NextResponse.json({\n      success: true,\n      message: `Property matches synced for ${action} action`\n    });\n\n  } catch (error) {\n    return NextResponse.json(\n      { error: 'Failed to sync property matches' },\n      { status: 500 }\n    );\n  }\n}\n\n// Remove property from all buyer match lists\nasync function removePropertyFromAllBuyers(propertyId: string) {\n  try {\n    // Get all buyer profiles that have this property in their matches\n    const buyersQuery = query(\n      collection(db!, 'buyerProfiles'),\n      where('matchedPropertyIds', 'array-contains', propertyId)\n    );\n    const buyerDocs = await getDocs(buyersQuery);\n\n    // Update each buyer profile to remove the property\n    const updatePromises = buyerDocs.docs.map(buyerDoc => {\n      const buyerRef = doc(db!, 'buyerProfiles', buyerDoc.id);\n      return updateDoc(buyerRef, {\n        matchedPropertyIds: arrayRemove(propertyId),\n        likedPropertyIds: arrayRemove(propertyId), // Also remove from likes\n        passedPropertyIds: arrayRemove(propertyId), // And from passed\n        updatedAt: serverTimestamp()\n      });\n    });\n\n    await Promise.all(updatePromises);\n    \n  } catch (error) {\n    throw error;\n  }\n}\n\n// Add new property to buyers whose criteria it matches\nasync function addPropertyToMatchingBuyers(property: PropertyListing & { id: string }) {\n  try {\n    // Get all buyer profiles\n    const allBuyersQuery = query(collection(db!, 'buyerProfiles'));\n    const buyerDocs = await getDocs(allBuyersQuery);\n\n    const updatePromises = [];\n\n    for (const buyerDoc of buyerDocs.docs) {\n      const buyerData = buyerDoc.data();\n      \n      // Check if this property matches the buyer's criteria\n      const matches = await checkPropertyMatchesBuyer(property, buyerData as BuyerProfile);\n      \n      if (matches) {\n        const buyerRef = doc(db!, 'buyerProfiles', buyerDoc.id);\n        updatePromises.push(\n          updateDoc(buyerRef, {\n            matchedPropertyIds: arrayUnion(property.id),\n            lastMatchUpdate: serverTimestamp(),\n            updatedAt: serverTimestamp()\n          })\n        );\n      }\n    }\n\n    await Promise.all(updatePromises);\n    \n  } catch (error) {\n    throw error;\n  }\n}\n\n// Check if a property matches a buyer's criteria\nasync function checkPropertyMatchesBuyer(property: PropertyListing & { id: string }, buyerData: BuyerProfile): Promise<boolean> {\n  try {\n    // Location match - use buyer's stored cities from searchCriteria\n    const criteria = buyerData.searchCriteria || {};\n    const buyerCities = criteria.cities || [buyerData.preferredCity]; // fallback to flat field\n    const locationMatch = buyerCities.some((cityName: string) =>\n      property.city.toLowerCase() === cityName.toLowerCase() &&\n      property.state === (criteria.state || buyerData.preferredState)\n    );\n    \n    if (!locationMatch) return false;\n\n    // Budget match - read from nested structure\n    const budgetMatch = \n      property.monthlyPayment <= (criteria.maxMonthlyPayment || buyerData.maxMonthlyPayment || 0) &&\n      property.downPaymentAmount <= (criteria.maxDownPayment || buyerData.maxDownPayment || 0);\n    \n    if (!budgetMatch) return false;\n\n    // Requirements match\n    const requirementsMatch = \n      (!buyerData.minBedrooms || property.bedrooms >= buyerData.minBedrooms) &&\n      (!buyerData.minBathrooms || property.bathrooms >= buyerData.minBathrooms) &&\n      (!buyerData.minPrice || property.listPrice >= buyerData.minPrice) &&\n      (!buyerData.maxPrice || property.listPrice <= buyerData.maxPrice);\n    \n    return requirementsMatch;\n    \n  } catch (error) {\n    return false;\n  }\n}\n\n// GET endpoint to refresh all matches (maintenance operation)\nexport async function GET() {\n  try {\n    // This can be called periodically to refresh all buyer matches\n    // Useful for cleaning up stale data or after system updates\n    \n    const allBuyersQuery = query(collection(db!, 'buyerProfiles'));\n    const buyerDocs = await getDocs(allBuyersQuery);\n    \n    let refreshedCount = 0;\n    \n    for (const buyerDoc of buyerDocs.docs) {\n      const buyerData = buyerDoc.data();\n      \n      // Use the existing matching logic to get fresh matches\n      const criteria = buyerData.searchCriteria || {};\n      const buyerLocation = {\n        centerCity: criteria.cities?.[0] || buyerData.preferredCity || '',\n        centerState: criteria.state || buyerData.preferredState || '',\n        searchRadius: criteria.searchRadius || buyerData.searchRadius || 25,\n        serviceCities: criteria.cities || buyerData.searchAreaCities || [buyerData.preferredCity]\n      };\n\n      // Get all properties and filter using existing matching logic\n      const propertiesQuery = query(collection(db!, 'properties'));\n      const propertiesSnapshot = await getDocs(propertiesQuery);\n      \n      const matchingProperties = propertiesSnapshot.docs\n        .map(doc => ({ id: doc.id, ...doc.data() } as PropertyListing))\n        .filter(property => {\n          // Use the isPropertyMatch function with proper data structure\n          const propertyForMatching = {\n            id: property.id,\n            monthlyPayment: property.monthlyPayment || 0,\n            downPaymentAmount: property.downPaymentAmount || 0,\n            city: property.city || '',\n            state: property.state || '',\n            bedrooms: property.bedrooms || 0,\n            bathrooms: property.bathrooms || 0\n          };\n          \n          const buyerForMatching = {\n            id: buyerData.id,\n            maxMonthlyPayment: criteria.maxMonthlyPayment || buyerData.maxMonthlyPayment || 0,\n            maxDownPayment: criteria.maxDownPayment || buyerData.maxDownPayment || 0,\n            preferredCity: buyerData.preferredCity || '',\n            preferredState: buyerData.preferredState || '',\n            searchRadius: criteria.searchRadius || buyerData.searchRadius || 25,\n            minBedrooms: buyerData.minBedrooms,\n            minBathrooms: buyerData.minBathrooms\n          };\n          \n          return isPropertyMatch(propertyForMatching, buyerForMatching).matches;\n        });\n\n      const matchedIds = matchingProperties.map(p => p.id);\n      \n      // Update the buyer's matched properties\n      const buyerRef = doc(db!, 'buyerProfiles', buyerDoc.id);\n      await updateDoc(buyerRef, {\n        matchedPropertyIds: matchedIds,\n        lastMatchUpdate: serverTimestamp(),\n        updatedAt: serverTimestamp()\n      });\n      \n      refreshedCount++;\n    }\n\n    return NextResponse.json({\n      success: true,\n      message: `Refreshed matches for ${refreshedCount} buyers`\n    });\n\n  } catch (error) {\n    return NextResponse.json(\n      { error: 'Failed to refresh matches' },\n      { status: 500 }\n    );\n  }\n}","usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/app/api/property-actions/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":91,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":91,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { \n  doc, \n  setDoc, \n  updateDoc,\n  collection, \n  query, \n  where, \n  getDocs,\n  serverTimestamp \n} from 'firebase/firestore';\nimport { getSafeDb } from '@/lib/firebase-safe';\nimport { firestoreHelpers } from '@/lib/firestore';\n\n/**\n * CLEAN PROPERTY ACTIONS API\n * \n * Handles: like, pass, undo_like, undo_pass\n * Updates both propertyMatches status and creates action history\n */\n\nexport async function POST(request: NextRequest) {\n  try {\n    const db = getSafeDb();\n    const { buyerId, propertyId, action } = await request.json();\n    \n    if (!buyerId || !propertyId || !action) {\n      return NextResponse.json({ error: 'Missing required fields' }, { status: 400 });\n    }\n\n\n    // Find the property match record\n    const matchQuery = query(\n      collection(db, 'propertyMatches'),\n      where('buyerId', '==', buyerId),\n      where('propertyId', '==', propertyId)\n    );\n    const matchDocs = await getDocs(matchQuery);\n\n    if (matchDocs.empty) {\n      return NextResponse.json({ error: 'Property match not found' }, { status: 404 });\n    }\n\n    const matchDoc = matchDocs.docs[0];\n    \n    // Update property match status\n    let newStatus;\n    switch (action) {\n      case 'like':\n        newStatus = 'liked';\n        break;\n      case 'pass': \n        newStatus = 'disliked';\n        break;\n      case 'undo_like':\n        newStatus = 'pending';\n        break;\n      case 'undo_pass':\n        newStatus = 'pending';\n        break;\n      default:\n        return NextResponse.json({ error: 'Invalid action' }, { status: 400 });\n    }\n\n    // Update the match status\n    await updateDoc(matchDoc.ref, {\n      status: newStatus,\n      lastActionAt: new Date().toISOString(),\n      updatedAt: serverTimestamp()\n    });\n\n    // Create action history record (immutable event log)\n    const actionId = firestoreHelpers.generateId();\n    await setDoc(doc(collection(db, 'propertyActions'), actionId), {\n      id: actionId,\n      buyerId: buyerId,\n      propertyId: propertyId,\n      action: action,\n      timestamp: new Date().toISOString(),\n      source: 'dashboard',\n      createdAt: serverTimestamp()\n    });\n\n\n    return NextResponse.json({\n      success: true,\n      newStatus: newStatus,\n      message: `Property ${action}ed successfully`\n    });\n\n  } catch (error) {\n    return NextResponse.json({ error: 'Failed to update property' }, { status: 500 });\n  }\n}","usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/app/api/property-matching/calculate/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setDoc' is defined but never used.","line":4,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":158,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":158,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { \n  doc, \n  setDoc, \n  collection, \n  query, \n  where, \n  getDocs,\n  writeBatch,\n  serverTimestamp \n} from 'firebase/firestore';\nimport { db } from '@/lib/firebase';\nimport { firestoreHelpers } from '@/lib/firestore';\nimport { PropertyListing } from '@/lib/property-schema';\n\n/**\n * BACKGROUND PROPERTY MATCHING CALCULATOR\n * \n * Purpose: Calculate property matches for a buyer and store in separate collection\n * Called after buyer profile is saved (non-blocking)\n */\n\nexport async function POST(request: NextRequest) {\n  try {\n    if (!db) {\n      return NextResponse.json(\n        { error: 'Database not available' },\n        { status: 500 }\n      );\n    }\n\n    const { buyerId } = await request.json();\n    \n    if (!buyerId) {\n      return NextResponse.json({ error: 'Missing buyerId' }, { status: 400 });\n    }\n\n\n    // Get buyer profile\n    const buyerDoc = await getDocs(query(\n      collection(db!, 'buyerProfiles'),\n      where('__name__', '==', buyerId)\n    ));\n\n    if (buyerDoc.empty) {\n      return NextResponse.json({ error: 'Buyer profile not found' }, { status: 404 });\n    }\n\n    const buyerData = buyerDoc.docs[0].data();\n    const criteria = buyerData.searchCriteria;\n\n    if (!criteria) {\n      return NextResponse.json({ error: 'No search criteria found' }, { status: 400 });\n    }\n\n    // Get all active properties in buyer's state\n    const propertiesQuery = query(\n      collection(db!, 'properties'),\n      where('isActive', '==', true),\n      where('state', '==', criteria.state)\n    );\n    \n    const propertiesSnapshot = await getDocs(propertiesQuery);\n    const allProperties = propertiesSnapshot.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data()\n    } as PropertyListing));\n\n\n    // Calculate matches with scoring\n    const matches = [];\n    \n    for (const property of allProperties) {\n      let matchScore = 0;\n      const matchReasons = [];\n\n      // Location match (required)\n      const cityMatch = criteria.cities.some((city: string) => \n        property.city.toLowerCase() === city.toLowerCase()\n      );\n      if (!cityMatch) continue; // Skip if not in buyer's cities\n\n      matchScore += 30;\n      matchReasons.push('location_match');\n\n      // Budget matches\n      if (property.monthlyPayment <= criteria.maxMonthlyPayment) {\n        matchScore += 35;\n        matchReasons.push('monthly_budget_match');\n      } else continue; // Skip if over budget\n\n      if (property.downPaymentAmount <= criteria.maxDownPayment) {\n        matchScore += 35;\n        matchReasons.push('down_payment_match');\n      } else continue; // Skip if over budget\n\n      // Bedroom match (bonus)\n      if (!criteria.minBedrooms || property.bedrooms >= criteria.minBedrooms) {\n        if (criteria.minBedrooms) {\n          matchScore += 10;\n          matchReasons.push('bedroom_match');\n        }\n      } else continue;\n\n      // Bathroom match (bonus)  \n      if (!criteria.minBathrooms || property.bathrooms >= criteria.minBathrooms) {\n        if (criteria.minBathrooms) {\n          matchScore += 10;\n          matchReasons.push('bathroom_match');\n        }\n      } else continue;\n\n      // Create match record\n      matches.push({\n        id: firestoreHelpers.generateId(),\n        buyerId: buyerId,\n        propertyId: property.id,\n        matchScore: Math.min(100, matchScore),\n        matchReasons: matchReasons,\n        status: 'pending',\n        matchedAt: new Date().toISOString(),\n        createdAt: serverTimestamp(),\n        updatedAt: serverTimestamp()\n      });\n    }\n\n\n    // Save matches to database using batch write for performance\n    const batch = writeBatch(db);\n    \n    // Clear existing matches for this buyer\n    const existingMatchesQuery = query(\n      collection(db!, 'propertyMatches'),\n      where('buyerId', '==', buyerId)\n    );\n    const existingMatches = await getDocs(existingMatchesQuery);\n    \n    existingMatches.docs.forEach(matchDoc => {\n      batch.delete(matchDoc.ref);\n    });\n\n    // Add new matches\n    matches.forEach(match => {\n      const matchRef = doc(collection(db!, 'propertyMatches'), match.id);\n      batch.set(matchRef, match);\n    });\n\n    await batch.commit();\n\n\n    return NextResponse.json({\n      success: true,\n      totalMatches: matches.length,\n      perfectMatches: matches.filter(m => m.matchScore >= 90).length,\n      goodMatches: matches.filter(m => m.matchScore >= 70 && m.matchScore < 90).length\n    });\n\n  } catch (error) {\n    return NextResponse.json({ error: 'Failed to calculate matches' }, { status: 500 });\n  }\n}","usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/app/api/realtor/buyer-liked-properties/route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":9,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[367,370],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[367,370],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":29,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1052,1055],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1052,1055],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":34,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":34,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1215,1218],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1215,1218],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":35,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":35,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1268,1271],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1268,1271],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":46,"column":84,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":46,"endColumn":87,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1579,1582],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1579,1582],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":71,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":71,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2470,2473],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2470,2473],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":72,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":72,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2521,2524],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2521,2524],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":77,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":77,"endColumn":17}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { getServerSession } from 'next-auth/next';\nimport { authOptions } from '@/lib/auth';\nimport { FirebaseDB } from '@/lib/firebase-db';\nimport { ExtendedSession } from '@/types/session';\n\nexport async function GET(request: NextRequest) {\n  try {\n    const session = await getServerSession(authOptions) as any as ExtendedSession;\n    \n    if (!session?.user || session.user.role !== 'realtor') {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const { searchParams } = new URL(request.url);\n    const buyerId = searchParams.get('buyerId');\n\n    if (!buyerId) {\n      return NextResponse.json({ error: 'Buyer ID required' }, { status: 400 });\n    }\n\n    // Get buyer's profile to access their liked properties\n    const buyerProfile = await FirebaseDB.getDocument('buyerProfiles', buyerId);\n    \n    if (!buyerProfile) {\n      return NextResponse.json({ error: 'Buyer not found' }, { status: 404 });\n    }\n\n    const likedPropertyIds = (buyerProfile as any).likedProperties || [];\n    \n    if (likedPropertyIds.length === 0) {\n      return NextResponse.json({ \n        buyer: {\n          firstName: (buyerProfile as any).firstName,\n          lastName: (buyerProfile as any).lastName\n        },\n        properties: [] \n      });\n    }\n\n    // Fetch property details directly from properties database\n    const likedProperties = [];\n    \n    for (const propertyId of likedPropertyIds) {\n      try {\n        const property = await FirebaseDB.getDocument('properties', propertyId) as any;\n        if (property) {\n          // Format property data with all needed fields\n          likedProperties.push({\n            id: propertyId,\n            address: property.address || '',\n            city: property.city || '',\n            state: property.state || '',\n            bedrooms: property.bedrooms || 0,\n            bathrooms: property.bathrooms || 0,\n            squareFeet: property.squareFeet || 0,\n            listPrice: property.listPrice || 0,\n            monthlyPayment: property.monthlyPayment || 0,\n            downPaymentAmount: property.downPaymentAmount || 0,\n            imageUrl: property.imageUrl || property.zillowImageUrl,\n            ...property\n          });\n        }\n      } catch (err) {\n        console.error(`Failed to load property ${propertyId}:`, err);\n      }\n    }\n\n    return NextResponse.json({\n      buyer: {\n        firstName: (buyerProfile as any).firstName,\n        lastName: (buyerProfile as any).lastName\n      },\n      properties: likedProperties\n    });\n\n  } catch (error) {\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });\n  }\n}","usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/app/api/realtor/dashboard/route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":11,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[446,449],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[446,449],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":12,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[468,471],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[468,471],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":13,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[491,494],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[491,494],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'request' is defined but never used.","line":27,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":34},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":41,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":41,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1207,1210],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1207,1210],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getAvailableLeads' is defined but never used.","line":107,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":107,"endColumn":33},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":107,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":107,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3227,3230],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3227,3230],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":107,"column":77,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":107,"endColumn":80,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3241,3244],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3241,3244],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":117,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":117,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3625,3628],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3625,3628],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":180,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":180,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":186,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":186,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5917,5920],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5917,5920],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":198,"column":84,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":198,"endColumn":87,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6311,6314],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6311,6314],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":199,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":199,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6359,6362],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6359,6362],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":212,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":212,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6818,6821],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6818,6821],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":212,"column":77,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":212,"endColumn":80,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6858,6861],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6858,6861],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":213,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":213,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6957,6960],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6957,6960],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":225,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":225,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":231,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":231,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7375,7378],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7375,7378],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":240,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":240,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7683,7686],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7683,7686],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":250,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":250,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":322,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":322,"endColumn":17}],"suppressedMessages":[],"errorCount":15,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// REALTOR DASHBOARD API - Single endpoint for all dashboard data\n// Returns available leads, owned buyers, and transaction history\n\nimport { NextRequest, NextResponse } from 'next/server';\nimport { getSessionWithRole } from '@/lib/auth-utils';\nimport { FirebaseDB } from '@/lib/firebase-db';\nimport { RealtorDataHelper } from '@/lib/realtor-models';\nimport { logError, logInfo } from '@/lib/logger';\n\ninterface DashboardData {\n  availableLeads: any[];\n  ownedBuyers: any[];\n  transactions: any[];\n  realtorData: {\n    firstName: string;\n    lastName: string;\n    credits: number;\n    isOnTrial: boolean;\n    trialDaysRemaining: number;\n    serviceArea: {\n      primaryCity: string;\n      totalCitiesServed: number;\n    };\n  };\n}\n\nexport async function GET(request: NextRequest) {\n  try {\n    // Enforce realtor role only\n    const session = await getSessionWithRole('realtor');\n    \n    if (!session?.user?.email || !session.user.id) {\n      return NextResponse.json(\n        { error: 'Not authenticated' },\n        { status: 401 }\n      );\n    }\n\n    // Get user document with embedded realtor data\n    const userData = await FirebaseDB.getDocument('users', session.user.id);\n    const user = userData as any; // TODO: Add proper typing\n    \n    if (!user || user.role !== 'realtor' || !user.realtorData) {\n      return NextResponse.json(\n        { error: 'Realtor profile not found. Please complete your registration.' },\n        { status: 400 }\n      );\n    }\n\n    const { realtorData } = user;\n\n    // Get available buyer leads using new matching module\n    const availableLeads = await getMatchedBuyerLeads(realtorData);\n    \n    // Get owned buyers (purchased by this realtor)\n    const ownedBuyers = await getOwnedBuyers(session.user.id);\n    \n    // Get transaction history\n    const transactions = await getTransactionHistory(session.user.id);\n\n    // Calculate trial days remaining\n    const trialDaysRemaining = RealtorDataHelper.getTrialDaysRemaining(realtorData);\n\n    const dashboardData: DashboardData = {\n      availableLeads,\n      ownedBuyers,\n      transactions,\n      realtorData: {\n        firstName: realtorData.firstName,\n        lastName: realtorData.lastName,\n        credits: realtorData.credits,\n        isOnTrial: realtorData.isOnTrial,\n        trialDaysRemaining,\n        serviceArea: {\n          primaryCity: realtorData.serviceArea.primaryCity.name,\n          totalCitiesServed: realtorData.serviceArea.totalCitiesServed\n        }\n      }\n    };\n\n    await logInfo('Realtor dashboard loaded', {\n      action: 'realtor_dashboard_load',\n      userId: session.user.id,\n      metadata: {\n        availableLeadsCount: availableLeads.length,\n        ownedBuyersCount: ownedBuyers.length,\n        transactionCount: transactions.length,\n        credits: realtorData.credits\n      }\n    });\n\n    return NextResponse.json(dashboardData);\n\n  } catch (error) {\n    await logError('Failed to load realtor dashboard', {\n      action: 'realtor_dashboard_error'\n    }, error as Error);\n\n    return NextResponse.json(\n      { error: 'Failed to load dashboard data' },\n      { status: 500 }\n    );\n  }\n}\n\n// Get available buyer leads for this realtor\nasync function getAvailableLeads(userId: string, realtorData: any): Promise<any[]> {\n  try {\n    // Get all complete buyer profiles\n    const allBuyers = await FirebaseDB.getCompleteBuyers();\n    \n    // Get already purchased leads to filter them out\n    const purchasedLeads = await FirebaseDB.queryDocuments(\n      'leadPurchases',\n      [{ field: 'realtorUserId', operator: '==', value: userId }]\n    );\n    const purchasedBuyerIds = purchasedLeads.map((p: any) => p.buyerId);\n\n    // Get realtor's service cities\n    const serviceCities = RealtorDataHelper.getAllCitiesServed(realtorData);\n    const serviceCityNames = serviceCities.map(city => city.name.toLowerCase());\n    const realtorState = realtorData.serviceArea.primaryCity.stateCode;\n\n    const availableLeads = [];\n\n    for (const buyer of allBuyers) {\n      // Skip if already purchased by this realtor\n      if (purchasedBuyerIds.includes(buyer.id)) {\n        continue;\n      }\n\n      // Skip if buyer is inactive\n      if (buyer.isActive === false) {\n        continue;\n      }\n\n      // Match by location (buyer's preferred city must be in realtor's service area)\n      const buyerCity = buyer.preferredCity?.toLowerCase();\n      const buyerState = buyer.preferredState;\n\n      // Check if buyer is in realtor's service area\n      const isInServiceArea = \n        buyerState === realtorState && // Same state\n        serviceCityNames.includes(buyerCity); // City is served\n\n      if (!isInServiceArea) {\n        continue;\n      }\n\n      // Calculate basic match percentage (for now, simple 85% for in-area matches)\n      const matchPercentage = 85;\n\n      // Format the lead data\n      const leadData = {\n        id: buyer.id,\n        firstName: buyer.firstName,\n        lastName: buyer.lastName,\n        email: buyer.email,\n        phone: buyer.phone,\n        city: buyer.preferredCity,\n        state: buyer.preferredState,\n        maxMonthlyPayment: buyer.maxMonthlyPayment,\n        maxDownPayment: buyer.maxDownPayment,\n        minBedrooms: buyer.minBedrooms,\n        minBathrooms: buyer.minBathrooms,\n        languages: buyer.languages || ['English'],\n        createdAt: buyer.createdAt?.toDate ? buyer.createdAt.toDate().toISOString() : new Date().toISOString(),\n        matchPercentage,\n        propertyMatches: 5 // Placeholder - would need to calculate real property matches\n      };\n\n      availableLeads.push(leadData);\n    }\n\n    // Sort by creation date (newest first)\n    availableLeads.sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());\n\n    return availableLeads.slice(0, 20); // Limit to 20 most recent\n\n  } catch (error) {\n    return [];\n  }\n}\n\n// Get buyers owned by this realtor\nasync function getOwnedBuyers(userId: string): Promise<any[]> {\n  try {\n    // Get all lead purchases by this realtor\n    const purchases = await FirebaseDB.queryDocuments(\n      'leadPurchases',\n      [{ field: 'realtorUserId', operator: '==', value: userId }]\n    );\n\n    const ownedBuyers = [];\n\n    for (const purchase of purchases) {\n      // Get buyer details\n      const buyerData = await FirebaseDB.getDocument('buyerProfiles', (purchase as any).buyerId);\n      const buyer = buyerData as any; // TODO: Add proper typing\n      \n      if (buyer) {\n        const ownedBuyer = {\n          id: buyer.id,\n          firstName: buyer.firstName,\n          lastName: buyer.lastName,\n          email: buyer.email,\n          phone: buyer.phone,\n          city: buyer.preferredCity,\n          state: buyer.preferredState,\n          maxMonthlyPayment: buyer.maxMonthlyPayment,\n          maxDownPayment: buyer.maxDownPayment,\n          purchasedAt: (purchase as any).purchasedAt?.toDate ? (purchase as any).purchasedAt.toDate().toISOString() : new Date().toISOString(),\n          status: (purchase as any).status || 'purchased'\n        };\n\n        ownedBuyers.push(ownedBuyer);\n      }\n    }\n\n    // Sort by purchase date (most recent first)\n    ownedBuyers.sort((a, b) => new Date(b.purchasedAt).getTime() - new Date(a.purchasedAt).getTime());\n\n    return ownedBuyers;\n\n  } catch (error) {\n    return [];\n  }\n}\n\n// Get transaction history for this realtor\nasync function getTransactionHistory(userId: string): Promise<any[]> {\n  try {\n    // Get all transactions for this realtor\n    const transactions = await FirebaseDB.queryDocuments(\n      'realtorTransactions',\n      [{ field: 'realtorUserId', operator: '==', value: userId }],\n      50 // Limit to last 50 transactions\n    );\n\n    return transactions.map((transaction: any) => ({\n      id: transaction.id,\n      type: transaction.type,\n      description: transaction.description,\n      creditsChange: transaction.creditsChange,\n      runningBalance: transaction.runningBalance,\n      createdAt: transaction.createdAt?.toDate ? transaction.createdAt.toDate().toISOString() : new Date().toISOString(),\n      details: transaction.details || {}\n    }));\n\n  } catch (error) {\n    return [];\n  }\n}\n\n// UPDATED: Get matched buyer leads using consolidated system\nasync function getMatchedBuyerLeads(realtorData: {\n  serviceArea?: {\n    primaryCity?: { name: string; state: string };\n    nearbyCities?: Array<{ name?: string } | string>;\n  };\n  serviceCities?: string[];\n}): Promise<Array<{\n  id: string;\n  firstName: string;\n  lastName: string;\n  email: string;\n  phone: string;\n  city: string;\n  state: string;\n  maxMonthlyPayment: number;\n  maxDownPayment: number;\n  languages: string[];\n  matchScore: number;\n  matchReasons: string[];\n  likedPropertiesCount: number;\n  leadPrice: number;\n  createdAt: Date | string;\n}>> {\n  try {\n    const { ConsolidatedLeadSystem } = await import('@/lib/consolidated-lead-system');\n    \n    // Extract service cities from realtor data\n    const serviceArea = realtorData.serviceArea || {};\n    let cities: string[] = [];\n    \n    // Get primary city and nearby cities from serviceArea\n    if (serviceArea.primaryCity?.name) {\n      cities = [serviceArea.primaryCity.name];\n      \n      // Add all nearby cities from service area\n      if (serviceArea.nearbyCities && serviceArea.nearbyCities.length > 0) {\n        const nearbyCities = serviceArea.nearbyCities.map(c => \n          typeof c === 'string' ? c : (c.name || 'Unknown')\n        );\n        cities.push(...nearbyCities);\n      }\n    }\n    \n    // Also check if cities are saved directly in serviceCities field\n    if (realtorData.serviceCities && realtorData.serviceCities.length > 0) {\n      cities = realtorData.serviceCities.map((city: string) => city.split(',')[0]?.trim());\n    }\n    \n    const realtorProfile = {\n      cities: cities,\n      languages: ['English'], // Default - can be extended later  \n      state: serviceArea.primaryCity?.state || 'Unknown'\n    };\n    \n    \n    // Get matches from consolidated system\n    const leads = await ConsolidatedLeadSystem.findAvailableLeads(realtorProfile);\n    \n    // Convert Timestamp to Date for compatibility\n    const convertedLeads = leads.map(lead => ({\n      ...lead,\n      createdAt: lead.createdAt?.toDate ? lead.createdAt.toDate() : new Date()\n    }));\n    \n    return convertedLeads;\n    \n  } catch (error) {\n    // Fallback to empty array if matching fails\n    return [];\n  }\n}","usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/app/api/realtor/dispute-lead/route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":51,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":51,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1446,1449],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1446,1449],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":80,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":80,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2323,2326],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2323,2326],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":97,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":97,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2850,2853],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2850,2853],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":97,"column":73,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":97,"endColumn":76,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2885,2888],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2885,2888],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":98,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":98,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2937,2940],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2937,2940],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":99,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":99,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2984,2987],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2984,2987],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":100,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":100,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3030,3033],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3030,3033],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":101,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":101,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3076,3079],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3076,3079],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":102,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":102,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3130,3133],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3130,3133],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":103,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":103,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3193,3196],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3193,3196],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":106,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":106,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3294,3297],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3294,3297],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":106,"column":75,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":106,"endColumn":78,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3324,3327],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3324,3327],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":12,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { getSessionWithRole } from '@/lib/auth-utils';\nimport { FirebaseDB } from '@/lib/firebase-db';\nimport { Timestamp } from 'firebase/firestore';\nimport { logError, logInfo } from '@/lib/logger';\n\ninterface DisputeLeadRequest {\n  buyerId: string;\n  reason: string;\n  description: string;\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    // Enforce realtor role only\n    const session = await getSessionWithRole('realtor');\n    \n    if (!session?.user?.email || !session.user.id) {\n      return NextResponse.json(\n        { error: 'Not authenticated' },\n        { status: 401 }\n      );\n    }\n\n    const body = await request.json() as DisputeLeadRequest;\n    const { buyerId, reason, description } = body;\n\n    if (!buyerId || !reason || !description) {\n      return NextResponse.json(\n        { error: 'All fields are required' },\n        { status: 400 }\n      );\n    }\n\n    // Verify the realtor purchased this lead\n    const purchases = await FirebaseDB.queryDocuments(\n      'leadPurchases',\n      [\n        { field: 'realtorUserId', operator: '==', value: session.user.id },\n        { field: 'buyerId', operator: '==', value: buyerId }\n      ]\n    );\n\n    if (purchases.length === 0) {\n      return NextResponse.json(\n        { error: 'You can only dispute leads you have purchased' },\n        { status: 403 }\n      );\n    }\n\n    const purchase = purchases[0] as any;\n\n    // Get full buyer details from buyerProfiles\n    const buyerProfile = await FirebaseDB.getDocument('buyerProfiles', buyerId);\n    \n    if (!buyerProfile) {\n      return NextResponse.json(\n        { error: 'Buyer profile not found' },\n        { status: 404 }\n      );\n    }\n\n    // Get realtor details from realtor profile\n    const realtorProfile = await FirebaseDB.queryDocuments(\n      'realtors',\n      [{ field: 'userId', operator: '==', value: session.user.id }]\n    );\n    \n    const realtor = realtorProfile.length > 0 ? realtorProfile[0] : null;\n\n    // Check if already disputed\n    const existingDisputes = await FirebaseDB.queryDocuments(\n      'leadDisputes',\n      [\n        { field: 'realtorUserId', operator: '==', value: session.user.id },\n        { field: 'buyerId', operator: '==', value: buyerId }\n      ]\n    );\n\n    if (existingDisputes.some((d: any) => d.status === 'pending')) {\n      return NextResponse.json(\n        { error: 'You already have a pending dispute for this lead' },\n        { status: 400 }\n      );\n    }\n\n    // Create comprehensive dispute record with all required fields\n    const disputeData = {\n      realtorUserId: session.user.id,\n      buyerId: buyerId,\n      transactionId: purchase.id,\n      reason: reason,\n      description: description,\n      status: 'pending',\n      \n      // Complete buyer information\n      buyerName: `${(buyerProfile as any).firstName} ${(buyerProfile as any).lastName}`,\n      buyerPhone: (buyerProfile as any).phone,\n      buyerEmail: (buyerProfile as any).email,\n      buyerCity: (buyerProfile as any).city,\n      buyerState: (buyerProfile as any).state,\n      maxMonthlyPayment: (buyerProfile as any).maxMonthlyPayment,\n      maxDownPayment: (buyerProfile as any).maxDownPayment,\n      \n      // Realtor information\n      realtorName: realtor ? `${(realtor as any).firstName} ${(realtor as any).lastName}` : session.user.email || 'Unknown Realtor',\n      realtorEmail: session.user.email,\n      \n      // Purchase information\n      purchaseDate: purchase.createdAt || new Date().toISOString(),\n      creditsCost: purchase.creditsCost || 1,\n      \n      // Timestamps\n      submittedAt: Timestamp.now(),\n      createdAt: Timestamp.now()\n    };\n\n    const disputeId = await FirebaseDB.createDocument('leadDisputes', disputeData);\n\n    // Log dispute submission\n    await logInfo('Lead dispute submitted', {\n      action: 'dispute_submitted',\n      userId: session.user.id,\n      metadata: {\n        disputeId,\n        buyerId,\n        reason\n      }\n    });\n\n    return NextResponse.json({\n      success: true,\n      disputeId,\n      message: 'Dispute submitted successfully. Our team will review it within 24-48 hours.'\n    });\n\n  } catch (error) {\n    await logError('Lead dispute submission failed', {\n      action: 'dispute_submission_error'\n    }, error as Error);\n\n    return NextResponse.json(\n      { error: 'Failed to submit dispute. Please try again.' },\n      { status: 500 }\n    );\n  }\n}","usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/app/api/realtor/profile/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'request' is defined but never used.","line":7,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":34},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":9,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[367,370],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[367,370],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":22,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":22,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[794,797],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[794,797],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":34,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":34,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":44,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":44,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1381,1384],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1381,1384],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":81,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":81,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2541,2544],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2541,2544],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":82,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":82,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2595,2598],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2595,2598],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":83,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":83,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2656,2659],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2656,2659],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":84,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":84,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2730,2733],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2730,2733],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":92,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":92,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3014,3017],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3014,3017],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":93,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":93,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3076,3079],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3076,3079],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":108,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":108,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":118,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":118,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3646,3649],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3646,3649],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":138,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":138,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4277,4280],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4277,4280],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":147,"column":81,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":147,"endColumn":84,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4715,4718],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4715,4718],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":174,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":174,"endColumn":17}],"suppressedMessages":[],"errorCount":12,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { getServerSession } from 'next-auth/next';\nimport { authOptions } from '@/lib/auth';\nimport { FirebaseDB } from '@/lib/firebase-db';\nimport { ExtendedSession } from '@/types/session';\n\nexport async function GET(request: NextRequest) {\n  try {\n    const session = await getServerSession(authOptions) as any as ExtendedSession;\n    \n    if (!session?.user || session.user.role !== 'realtor') {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    // Get current user data\n    const userData = await FirebaseDB.getDocument('users', session.user.id);\n    \n    if (!userData) {\n      return NextResponse.json({ error: 'User not found' }, { status: 404 });\n    }\n\n    const realtorData = (userData as any).realtorData || {};\n    \n    return NextResponse.json({\n      success: true,\n      data: {\n        targetCity: realtorData.targetCity || '',\n        serviceCities: realtorData.serviceCities || [],\n        totalCitiesServed: realtorData.totalCitiesServed || 0,\n        serviceArea: realtorData.serviceArea || null\n      }\n    });\n\n  } catch (error) {\n    return NextResponse.json(\n      { error: 'Failed to fetch profile data' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const session = await getServerSession(authOptions) as any as ExtendedSession;\n    \n    if (!session?.user || session.user.role !== 'realtor') {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const body = await request.json();\n    const { targetCity, serviceCities, totalCitiesServed } = body;\n\n\n    // Parse target city first\n    const cityParts = targetCity.split(',');\n\n    // Get current user data\n    const userData = await FirebaseDB.getDocument('users', session.user.id);\n    \n    if (!userData) {\n      return NextResponse.json({ error: 'User not found' }, { status: 404 });\n    }\n\n    // Create service area in the format the dashboard expects\n    const serviceArea = {\n      primaryCity: {\n        name: cityParts[0]?.trim() || 'Dallas',\n        state: cityParts[1]?.trim() || 'TX'\n      },\n      nearbyCities: serviceCities.map((city: string) => ({\n        name: city.split(',')[0]?.trim() || city,\n        state: city.split(',')[1]?.trim() || 'TX'\n      })),\n      radiusMiles: 30,\n      totalCitiesServed: totalCitiesServed,\n      lastUpdated: new Date()\n    };\n\n    // Update realtor data in user document\n    const updatedRealtorData = {\n      ...(userData as any).realtorData || {},\n      firstName: (userData as any).name?.split(' ')[0] || '',\n      lastName: (userData as any).name?.split(' ').slice(1).join(' ') || '',\n      email: (userData as any).email,\n      serviceArea: serviceArea,\n      // ALSO save in the format dashboard expects\n      targetCity: targetCity,\n      serviceCities: serviceCities,\n      totalCitiesServed: totalCitiesServed,\n      profileComplete: true,\n      isActive: true,\n      credits: (userData as any).realtorData?.credits || 3,\n      isOnTrial: (userData as any).realtorData?.isOnTrial ?? true,\n      updatedAt: new Date()\n    };\n\n    await FirebaseDB.updateDocument('users', session.user.id, {\n      realtorData: updatedRealtorData,\n      updatedAt: new Date()\n    });\n\n\n    return NextResponse.json({\n      success: true,\n      message: 'Settings saved successfully'\n    });\n\n  } catch (error) {\n    return NextResponse.json(\n      { error: 'Failed to save settings' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function DELETE(request: NextRequest) {\n  try {\n    const session = await getServerSession(authOptions) as any as ExtendedSession;\n    \n    if (!session?.user || session.user.role !== 'realtor') {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const body = await request.json();\n    const { cityToRemove } = body;\n\n    if (!cityToRemove) {\n      return NextResponse.json({ error: 'City to remove is required' }, { status: 400 });\n    }\n\n    // Get current user data\n    const userData = await FirebaseDB.getDocument('users', session.user.id);\n    \n    if (!userData) {\n      return NextResponse.json({ error: 'User not found' }, { status: 404 });\n    }\n\n    const currentRealtorData = (userData as any).realtorData || {};\n    const currentServiceCities = currentRealtorData.serviceCities || [];\n\n    // Remove the specified city\n    const updatedServiceCities = currentServiceCities.filter((city: string) => city !== cityToRemove);\n\n    // Update the service area structure as well\n    const updatedServiceArea = {\n      ...currentRealtorData.serviceArea,\n      nearbyCities: currentRealtorData.serviceArea?.nearbyCities?.filter((city: any) => \n        `${city.name}, ${city.state}` !== cityToRemove\n      ) || [],\n      totalCitiesServed: updatedServiceCities.length,\n      lastUpdated: new Date()\n    };\n\n    // Update realtor data\n    const updatedRealtorData = {\n      ...currentRealtorData,\n      serviceCities: updatedServiceCities,\n      totalCitiesServed: updatedServiceCities.length,\n      serviceArea: updatedServiceArea,\n      updatedAt: new Date()\n    };\n\n    await FirebaseDB.updateDocument('users', session.user.id, {\n      realtorData: updatedRealtorData,\n      updatedAt: new Date()\n    });\n\n    return NextResponse.json({\n      success: true,\n      message: 'City removed successfully',\n      updatedServiceCities: updatedServiceCities\n    });\n\n  } catch (error) {\n    return NextResponse.json(\n      { error: 'Failed to remove city' },\n      { status: 500 }\n    );\n  }\n}","usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/app/api/realtor/purchase-lead/route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":53,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":53,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1425,1428],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1425,1428],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":72,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":72,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2068,2071],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2068,2071],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// LEAD PURCHASE API - Atomic transaction for purchasing buyer leads\n// Deducts 1 credit and creates lead purchase record\n\nimport { NextRequest, NextResponse } from 'next/server';\nimport { getSessionWithRole } from '@/lib/auth-utils';\nimport { FirebaseDB } from '@/lib/firebase-db';\nimport { Timestamp } from 'firebase/firestore';\nimport { logError, logInfo } from '@/lib/logger';\n\ninterface PurchaseLeadRequest {\n  leadId: string;\n}\n\ninterface PurchaseLeadResponse {\n  success: boolean;\n  buyerDetails?: {\n    firstName: string;\n    lastName: string;\n    email: string;\n    phone: string;\n    city: string;\n    state: string;\n    maxMonthlyPayment: number;\n    maxDownPayment: number;\n  };\n  creditsRemaining?: number;\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    // Enforce realtor role only\n    const session = await getSessionWithRole('realtor');\n    \n    if (!session?.user?.email || !session.user.id) {\n      return NextResponse.json(\n        { error: 'Not authenticated' },\n        { status: 401 }\n      );\n    }\n\n    const body = await request.json() as PurchaseLeadRequest;\n    const { leadId } = body;\n\n    if (!leadId) {\n      return NextResponse.json(\n        { error: 'Lead ID is required' },\n        { status: 400 }\n      );\n    }\n\n    // Get user document with embedded realtor data\n    const userData = await FirebaseDB.getDocument('users', session.user.id);\n    const user = userData as any; // TODO: Add proper typing\n    \n    if (!user || user.role !== 'realtor' || !user.realtorData) {\n      return NextResponse.json(\n        { error: 'Realtor profile not found' },\n        { status: 400 }\n      );\n    }\n\n    // Check if realtor has sufficient credits\n    if (user.realtorData.credits < 1) {\n      return NextResponse.json(\n        { error: 'Insufficient credits. Please purchase more credits to continue.' },\n        { status: 400 }\n      );\n    }\n\n    // Get buyer details from consolidated buyerProfiles collection\n    const buyerData = await FirebaseDB.getDocument('buyerProfiles', leadId);\n    const buyer = buyerData as any; // TODO: Add proper typing\n    \n    if (!buyer) {\n      return NextResponse.json(\n        { error: 'Buyer lead not found' },\n        { status: 404 }\n      );\n    }\n\n    // Check if buyer is still available for purchase\n    if (buyer.isAvailableForPurchase === false) {\n      return NextResponse.json(\n        { error: 'This buyer lead is no longer available' },\n        { status: 400 }\n      );\n    }\n\n    // Check if this realtor has already purchased this lead\n    const existingPurchase = await FirebaseDB.queryDocuments(\n      'leadPurchases',\n      [\n        { field: 'realtorUserId', operator: '==', value: session.user.id },\n        { field: 'buyerId', operator: '==', value: leadId }\n      ]\n    );\n\n    if (existingPurchase.length > 0) {\n      return NextResponse.json(\n        { error: 'You have already purchased this lead' },\n        { status: 400 }\n      );\n    }\n\n    // ATOMIC TRANSACTION: Deduct credit and create purchase record\n    const now = Timestamp.now();\n    const newCredits = user.realtorData.credits - 1;\n\n    // Create lead purchase record\n    const purchaseData = {\n      realtorUserId: session.user.id,\n      buyerId: leadId,\n      buyerName: `${buyer.firstName} ${buyer.lastName}`,\n      buyerCity: buyer.preferredCity || buyer.city,  // Use either field for compatibility\n      buyerState: buyer.preferredState || buyer.state, // Use either field for compatibility\n      creditsCost: 1,\n      purchasePrice: 8, // Internal cost tracking\n      status: 'purchased',\n      purchasedAt: now,\n      createdAt: now\n    };\n\n    const purchaseId = await FirebaseDB.createDocument('leadPurchases', purchaseData);\n\n    // Update realtor credits in user document\n    const updatedRealtorData = {\n      ...user.realtorData,\n      credits: newCredits,\n      updatedAt: now\n    };\n\n    await FirebaseDB.updateDocument('users', session.user.id, {\n      realtorData: updatedRealtorData,\n      updatedAt: now\n    });\n\n    // Create transaction record\n    const transactionData = {\n      realtorUserId: session.user.id,\n      type: 'lead_purchase',\n      description: `Purchased lead: ${buyer.firstName} ${buyer.lastName}`,\n      creditsChange: -1,\n      runningBalance: newCredits,\n      relatedId: purchaseId,\n      details: {\n        buyerName: `${buyer.firstName} ${buyer.lastName}`,\n        buyerCity: buyer.preferredCity,\n        purchasePrice: 8\n      },\n      createdAt: now\n    };\n\n    await FirebaseDB.createDocument('realtorTransactions', transactionData);\n\n    // Mark buyer as purchased in consolidated system\n    await FirebaseDB.updateDocument('buyerProfiles', leadId, {\n      isAvailableForPurchase: false,\n      purchasedBy: session.user.id,\n      purchasedAt: now,\n      updatedAt: now\n    });\n\n    // Log successful purchase\n    await logInfo('Lead purchased successfully', {\n      action: 'lead_purchase',\n      userId: session.user.id,\n      metadata: {\n        leadId,\n        buyerName: `${buyer.firstName} ${buyer.lastName}`,\n        creditsRemaining: newCredits,\n        purchasePrice: 8\n      }\n    });\n\n    const response: PurchaseLeadResponse = {\n      success: true,\n      buyerDetails: {\n        firstName: buyer.firstName,\n        lastName: buyer.lastName,\n        email: buyer.email,\n        phone: buyer.phone,\n        city: buyer.preferredCity || buyer.city,      // Compatibility\n        state: buyer.preferredState || buyer.state,   // Compatibility\n        maxMonthlyPayment: buyer.maxMonthlyPayment,\n        maxDownPayment: buyer.maxDownPayment\n      },\n      creditsRemaining: newCredits\n    };\n\n    return NextResponse.json(response);\n\n  } catch (error) {\n    await logError('Lead purchase failed', {\n      action: 'lead_purchase_error'\n    }, error as Error);\n\n    return NextResponse.json(\n      { error: 'Failed to purchase lead. Please try again.' },\n      { status: 500 }\n    );\n  }\n}","usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/app/api/realtor/signup/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/app/api/stripe/billing-portal/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_' is defined but never used.","line":14,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":28},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":38,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":38,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1109,1112],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1109,1112],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":59,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":59,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1840,1843],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1840,1843],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":67,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":67,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_' is defined but never used.","line":75,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":75,"endColumn":29},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":95,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":95,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2856,2859],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2856,2859],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":132,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":132,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":142,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":142,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4258,4261],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4258,4261],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":162,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":162,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":181,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":181,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5317,5320],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5317,5320],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { getSessionWithRole } from '@/lib/auth-utils';\nimport { FirebaseDB } from '@/lib/firebase-db';\nimport { db } from '@/lib/firebase';\nimport Stripe from 'stripe';\n\nconst stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {\n  apiVersion: '2025-08-27.basil',\n});\n\n// Credit packages that have subscriptions (only 4 and 10 credit packages)\nconst SUBSCRIPTION_PACKAGES = ['4_credits', '10_credits'];\n\nexport async function GET(_: NextRequest) {\n  try {\n    if (!db) {\n      return NextResponse.json(\n        { error: 'Database not available' },\n        { status: 500 }\n      );\n    }\n\n    const session = await getSessionWithRole('realtor');\n    \n    if (!session?.user?.email || !session?.user?.id) {\n      return NextResponse.json(\n        { error: 'Not authenticated' },\n        { status: 401 }\n      );\n    }\n\n    // Get user data from new system\n    const userData = await FirebaseDB.getDocument('users', session.user.id!);\n    if (!userData) {\n      return NextResponse.json({ subscriptions: [] });\n    }\n\n    const realtorData = (userData as any).realtorData;\n    if (!realtorData?.stripeCustomerId) {\n      return NextResponse.json({ subscriptions: [] });\n    }\n\n    // Only show subscriptions if user has a subscription plan (4 or 10 credits)\n    const currentPlan = realtorData.currentPlan;\n    if (!currentPlan || !SUBSCRIPTION_PACKAGES.includes(currentPlan)) {\n      return NextResponse.json({ subscriptions: [] });\n    }\n\n    // Get active subscriptions from Stripe\n    const subscriptions = await stripe.subscriptions.list({\n      customer: realtorData.stripeCustomerId,\n      status: 'active',\n      limit: 10\n    });\n\n    const formattedSubscriptions = subscriptions.data.map(sub => ({\n      id: sub.id,\n      status: sub.status,\n      current_period_end: (sub as any).current_period_end,\n      credits: sub.metadata.credits ? parseInt(sub.metadata.credits) : 0,\n      price: sub.items.data[0]?.price.unit_amount ? (sub.items.data[0].price.unit_amount / 100) : 0,\n      plan: currentPlan\n    }));\n\n    return NextResponse.json({ subscriptions: formattedSubscriptions });\n\n  } catch (error) {\n    return NextResponse.json(\n      { error: 'Failed to fetch subscriptions' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function POST(_: NextRequest) {\n  try {\n    const session = await getSessionWithRole('realtor');\n    \n    if (!session?.user?.email || !session?.user?.id) {\n      return NextResponse.json(\n        { error: 'Not authenticated' },\n        { status: 401 }\n      );\n    }\n\n    // Get user data from new system\n    const userData = await FirebaseDB.getDocument('users', session.user.id!);\n    if (!userData) {\n      return NextResponse.json(\n        { error: 'User profile not found' },\n        { status: 404 }\n      );\n    }\n\n    const realtorData = (userData as any).realtorData;\n    \n    // Only allow billing portal access if user has active subscription\n    const currentPlan = realtorData?.currentPlan;\n    if (!currentPlan || !SUBSCRIPTION_PACKAGES.includes(currentPlan)) {\n      return NextResponse.json(\n        { error: 'No active subscription found' },\n        { status: 400 }\n      );\n    }\n\n    // Get customer ID\n    let customerId = realtorData?.stripeCustomerId;\n\n    // If no customer ID found, try to find customer by email\n    if (!customerId) {\n      try {\n        const customers = await stripe.customers.list({\n          email: session.user.email,\n          limit: 1\n        });\n        \n        if (customers.data.length > 0) {\n          customerId = customers.data[0].id;\n          \n          // Store the found customer ID for future use\n          const updatedRealtorData = {\n            ...realtorData || {},\n            stripeCustomerId: customerId,\n            updatedAt: new Date()\n          };\n\n          await FirebaseDB.updateDocument('users', session.user.id!, {\n            realtorData: updatedRealtorData,\n            updatedAt: new Date()\n          });\n        }\n      } catch (e) {\n        // Handle error silently\n      }\n    }\n\n    // If still no customer, create one\n    if (!customerId) {\n      try {\n        const customer = await stripe.customers.create({\n          email: session.user.email,\n          name: (userData as any).name || session.user.email,\n          metadata: {\n            userId: session.user.id,\n            userRole: 'realtor'\n          }\n        });\n        customerId = customer.id;\n        \n        // Save the customer ID in user record\n        const updatedRealtorData = {\n          ...realtorData || {},\n          stripeCustomerId: customerId,\n          updatedAt: new Date()\n        };\n\n        await FirebaseDB.updateDocument('users', session.user.id!, {\n          realtorData: updatedRealtorData,\n          updatedAt: new Date()\n        });\n\n      } catch (e) {\n        return NextResponse.json(\n          { error: 'Failed to create customer account' },\n          { status: 500 }\n        );\n      }\n    }\n\n    // Create billing portal session\n    try {\n      const portalSession = await stripe.billingPortal.sessions.create({\n        customer: customerId,\n        return_url: `${process.env.NEXTAUTH_URL}/realtor-dashboard?portal=closed`,\n      });\n\n      return NextResponse.json({ \n        url: portalSession.url \n      });\n\n    } catch (stripeError: any) {\n      return NextResponse.json(\n        { \n          error: 'Failed to create billing portal session',\n          details: stripeError.message\n        },\n        { status: 500 }\n      );\n    }\n\n  } catch (error) {\n    return NextResponse.json(\n      { \n        error: 'Failed to create billing portal session',\n        details: (error as Error).message\n      },\n      { status: 500 }\n    );\n  }\n}","usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/app/api/stripe/cancel-subscription/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'request' is defined but never used.","line":20,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":35},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":113,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":113,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3605,3608],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3605,3608],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":113,"column":102,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":113,"endColumn":105,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3665,3668],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3665,3668],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":131,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":131,"endColumn":17}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { getSessionWithRole } from '@/lib/auth-utils';\nimport Stripe from 'stripe';\nimport { \n  collection, \n  query, \n  where, \n  getDocs, \n  updateDoc, \n  doc, \n  serverTimestamp \n} from 'firebase/firestore';\nimport { getSafeDb } from '@/lib/firebase-safe';\nimport { RealtorProfile } from '@/lib/firebase-models';\n\nconst stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {\n  apiVersion: '2025-08-27.basil',\n});\n\nexport async function POST(request: NextRequest) {\n  try {\n    const session = await getSessionWithRole('realtor');\n    \n    if (!session?.user?.email || !session?.user?.id) {\n      return NextResponse.json(\n        { error: 'Not authenticated' },\n        { status: 401 }\n      );\n    }\n\n    // Get the realtor's profile to find their subscription\n    const db = getSafeDb();\n    const realtorsQuery = query(\n      collection(db, 'realtors'),\n      where('userId', '==', session.user.id!)\n    );\n    const realtorDocs = await getDocs(realtorsQuery);\n    const realtor = realtorDocs.empty ? null : { id: realtorDocs.docs[0].id, ...realtorDocs.docs[0].data() } as RealtorProfile;\n\n    if (!realtor) {\n      return NextResponse.json(\n        { error: 'Realtor profile not found' },\n        { status: 404 }\n      );\n    }\n\n    // Check if they're on a trial\n    if (realtor.isOnTrial) {\n      return NextResponse.json(\n        { error: 'You are currently on a free trial. No subscription to cancel.' },\n        { status: 400 }\n      );\n    }\n    \n    // Check if they have a Stripe subscription ID\n    let stripeSubscriptionId = realtor.stripeSubscriptionId;\n    let subscriptionDocId = null;\n    \n    // Also check in realtorSubscriptions collection\n    const subscriptionsQuery = query(\n      collection(db, 'realtorSubscriptions'),\n      where('realtorId', '==', realtor.id),\n      where('status', '==', 'active')\n    );\n    const subscriptionDocs = await getDocs(subscriptionsQuery);\n    \n    if (!subscriptionDocs.empty) {\n      const subscriptionDoc = subscriptionDocs.docs[0];\n      const subscription = subscriptionDoc.data();\n      \n      // Check if this is a trial subscription\n      if (subscription.plan === 'trial') {\n        return NextResponse.json(\n          { error: 'You are currently on a free trial. No paid subscription to cancel.' },\n          { status: 400 }\n        );\n      }\n      \n      stripeSubscriptionId = subscription.stripeSubscriptionId || stripeSubscriptionId;\n      subscriptionDocId = subscriptionDoc.id;\n    }\n    \n    if (!stripeSubscriptionId) {\n      return NextResponse.json(\n        { error: 'No active paid subscription found' },\n        { status: 400 }\n      );\n    }\n\n    // Cancel the subscription in Stripe\n    try {\n      const canceledSubscription = await stripe.subscriptions.cancel(stripeSubscriptionId);\n      \n      // Update the realtor record\n      await updateDoc(doc(db, 'realtors', realtor.id), {\n        subscriptionStatus: 'canceled',\n        updatedAt: serverTimestamp()\n      });\n      \n      // Update the subscription record if it exists\n      if (subscriptionDocId) {\n        await updateDoc(doc(db, 'realtorSubscriptions', subscriptionDocId), {\n          status: 'canceled',\n          canceledAt: new Date(canceledSubscription.canceled_at! * 1000),\n          cancelAtPeriodEnd: true,\n          updatedAt: serverTimestamp()\n        });\n      }\n\n      return NextResponse.json({ \n        success: true,\n        message: 'Subscription cancelled successfully. You will retain access until the end of your current billing period.',\n        endsAt: (canceledSubscription as any).current_period_end ? new Date((canceledSubscription as any).current_period_end * 1000) : null\n      });\n\n    } catch (stripeError: unknown) {\n      \n      if ((stripeError as Stripe.errors.StripeError).code === 'resource_missing') {\n        return NextResponse.json(\n          { error: 'Subscription not found in Stripe. It may have already been cancelled.' },\n          { status: 404 }\n        );\n      }\n      \n      return NextResponse.json(\n        { error: 'Failed to cancel subscription in Stripe' },\n        { status: 500 }\n      );\n    }\n\n  } catch (error) {\n    return NextResponse.json(\n      { error: 'Failed to cancel subscription' },\n      { status: 500 }\n    );\n  }\n}","usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/app/api/stripe/checkout/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":71,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":71,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { getSessionWithRole } from '@/lib/auth-utils';\nimport Stripe from 'stripe';\n\nconst stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {\n  apiVersion: '2025-08-27.basil',\n});\n\n// New credit package system - matches simple-checkout\nconst CREDIT_PACKAGES = {\n  '1_credit': { credits: 1, price: 300, name: '1 Lead Credit', recurring: false },\n  '4_credits': { credits: 4, price: 500, name: '4 Lead Credits (Monthly)', recurring: true },\n  '10_credits': { credits: 10, price: 1000, name: '10 Lead Credits (Monthly)', recurring: true },\n  '60_credits': { credits: 60, price: 3000, name: '60 Lead Credits', recurring: false },\n};\n\nexport async function POST(request: NextRequest) {\n  try {\n    const session = await getSessionWithRole('realtor');\n    \n    if (!session?.user?.email) {\n      return NextResponse.json(\n        { error: 'Not authenticated' },\n        { status: 401 }\n      );\n    }\n\n    const { creditPackId, successUrl, cancelUrl } = await request.json();\n    \n    const package_ = CREDIT_PACKAGES[creditPackId as keyof typeof CREDIT_PACKAGES];\n    if (!package_) {\n      return NextResponse.json({ error: 'Invalid credit package' }, { status: 400 });\n    }\n\n    // Create Stripe checkout session\n    const checkoutSession = await stripe.checkout.sessions.create({\n      payment_method_types: ['card'],\n      mode: package_.recurring ? 'subscription' : 'payment',\n      customer_email: session.user.email,\n      metadata: {\n        userId: session.user.id!,\n        userEmail: session.user.email,\n        creditPackId: creditPackId,\n        credits: package_.credits.toString()\n      },\n      line_items: [\n        {\n          price_data: {\n            currency: 'usd',\n            ...(package_.recurring ? {\n              recurring: { interval: 'month' },\n            } : {}),\n            product_data: {\n              name: package_.name,\n              description: `${package_.credits} buyer lead credits${package_.recurring ? ' (renews monthly)' : ''}`,\n            },\n            unit_amount: package_.price * 100, // Convert to cents\n          },\n          quantity: 1,\n        },\n      ],\n      success_url: successUrl || `${process.env.NEXTAUTH_URL}/realtor-dashboard?payment=success&credits=${package_.credits}`,\n      cancel_url: cancelUrl || `${process.env.NEXTAUTH_URL}/buy-credits?payment=cancelled`,\n    });\n\n    return NextResponse.json({\n      checkoutUrl: checkoutSession.url,\n      sessionId: checkoutSession.id\n    });\n\n  } catch (error) {\n    return NextResponse.json(\n      { error: 'Failed to create checkout session' },\n      { status: 500 }\n    );\n  }\n}","usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/app/api/stripe/one-time-purchase/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'collection' is defined but never used.","line":4,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'query' is defined but never used.","line":5,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'where' is defined but never used.","line":6,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getDocs' is defined but never used.","line":7,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'increment' is defined but never used.","line":11,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":80,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":80,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { getSessionWithRole } from '@/lib/auth-utils';\nimport { \n  collection, \n  query, \n  where, \n  getDocs,\n  doc,\n  getDoc,\n  updateDoc,\n  increment\n} from 'firebase/firestore';\nimport { db } from '@/lib/firebase';\nimport { logInfo, logError } from '@/lib/logger';\nimport Stripe from 'stripe';\n\nconst stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {\n  apiVersion: '2025-08-27.basil',\n});\n\nexport async function POST(request: NextRequest) {\n  try {\n    if (!db) {\n      return NextResponse.json(\n        { error: 'Database not available' },\n        { status: 500 }\n      );\n    }\n\n    const session = await getSessionWithRole('realtor');\n    \n    if (!session?.user?.email) {\n      return NextResponse.json(\n        { error: 'Not authenticated' },\n        { status: 401 }\n      );\n    }\n\n    const { credits, amount } = await request.json();\n    \n    // Validate request\n    if (!credits || !amount || credits !== 1 || amount !== 300) {\n      return NextResponse.json(\n        { error: 'Invalid purchase: Only 1 credit for $300 allowed' },\n        { status: 400 }\n      );\n    }\n\n    // Get user's stored Stripe customer ID\n    const userDoc = await getDoc(doc(db, 'users', session.user.id!));\n    const userData = userDoc.exists() ? userDoc.data() : null;\n    let stripeCustomerId = userData?.stripeCustomerId;\n\n    // If no customer ID stored, try to find or create one\n    if (!stripeCustomerId) {\n      try {\n        const customers = await stripe.customers.list({\n          email: session.user.email,\n          limit: 1\n        });\n        \n        if (customers.data.length > 0) {\n          stripeCustomerId = customers.data[0].id;\n        } else {\n          const customer = await stripe.customers.create({\n            email: session.user.email,\n            name: session.user.name || 'Unknown',\n            metadata: {\n              userId: session.user.id!,\n              userType: 'realtor'\n            }\n          });\n          stripeCustomerId = customer.id;\n        }\n\n        // Update user record with customer ID\n        await updateDoc(doc(db, 'users', session.user.id!), {\n          stripeCustomerId: stripeCustomerId\n        });\n      } catch (error) {\n      }\n    }\n\n    // Create one-time payment checkout\n    const checkoutSession = await stripe.checkout.sessions.create({\n      mode: 'payment', // ONE-TIME payment, not subscription\n      payment_method_types: ['card'],\n      customer: stripeCustomerId || undefined,\n      customer_email: stripeCustomerId ? undefined : session.user.email,\n      line_items: [\n        {\n          price_data: {\n            currency: 'usd',\n            product_data: {\n              name: 'Single Credit Purchase',\n              description: '1 buyer lead credit for immediate use'\n            },\n            unit_amount: 30000 // $300.00 in cents\n          },\n          quantity: 1,\n        },\n      ],\n      metadata: {\n        userId: session.user.id!,\n        userEmail: session.user.email!,\n        planId: 'payAsYouGo',\n        type: 'credit_purchase',\n        credits: '1',\n        amount: '300',\n        customerId: stripeCustomerId || 'unknown'\n      },\n      success_url: `${process.env.NEXTAUTH_URL}/realtor/settings?success=credit&credits=1`,\n      cancel_url: `${process.env.NEXTAUTH_URL}/realtor/settings?canceled=true`,\n    });\n\n    await logInfo('Single credit checkout created', {\n      action: 'single_credit_checkout',\n      userId: session.user.id,\n      userType: 'realtor',\n      metadata: {\n        amount: 300,\n        credits: 1,\n        sessionId: checkoutSession.id\n      }\n    });\n\n    return NextResponse.json({ \n      url: checkoutSession.url,\n      sessionId: checkoutSession.id \n    });\n\n  } catch (error) {\n    \n    await logError('Single credit purchase failed', {\n      action: 'single_credit_purchase_error'\n    }, error as Error);\n    \n    return NextResponse.json(\n      { \n        error: 'Failed to create credit purchase',\n        details: (error as Error).message\n      },\n      { status: 500 }\n    );\n  }\n}","usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/app/api/stripe/simple-checkout/route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":20,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[844,847],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[844,847],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":22,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":22,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[904,907],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[904,907],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":68,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":68,"endColumn":17}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { getServerSession } from 'next-auth/next';\nimport { authOptions } from '@/lib/auth';\nimport Stripe from 'stripe';\n\nconst stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {\n  apiVersion: '2025-08-27.basil',\n});\n\n// Simple credit packages - no complex pricing tiers\nconst CREDIT_PACKAGES = {\n  '1_credit': { credits: 1, price: 300, name: '1 Lead Credit', recurring: false },\n  '4_credits': { credits: 4, price: 500, name: '4 Lead Credits (Monthly)', recurring: true },\n  '10_credits': { credits: 10, price: 1000, name: '10 Lead Credits (Monthly)', recurring: true },\n  '60_credits': { credits: 60, price: 3000, name: '60 Lead Credits', recurring: false },\n};\n\nexport async function POST(request: NextRequest) {\n  try {\n    const session = await getServerSession(authOptions) as any;\n    \n    if (!session?.user?.email || (session.user as any).role !== 'realtor') {\n      return NextResponse.json({ error: 'Realtor access required' }, { status: 401 });\n    }\n\n    const { creditPackId } = await request.json();\n    \n    const package_ = CREDIT_PACKAGES[creditPackId as keyof typeof CREDIT_PACKAGES];\n    if (!package_) {\n      return NextResponse.json({ error: 'Invalid credit package' }, { status: 400 });\n    }\n\n\n    // Create Stripe checkout session\n    const checkoutSession = await stripe.checkout.sessions.create({\n      payment_method_types: ['card'],\n      mode: package_.recurring ? 'subscription' : 'payment',\n      customer_email: session.user.email,\n      metadata: {\n        userId: session.user.id!,\n        creditPackId: creditPackId,\n        credits: package_.credits.toString()\n      },\n      line_items: [\n        {\n          price_data: {\n            currency: 'usd',\n            ...(package_.recurring ? {\n              recurring: { interval: 'month' },\n            } : {}),\n            product_data: {\n              name: package_.name,\n              description: `${package_.credits} buyer lead credits${package_.recurring ? ' (renews monthly)' : ''}`,\n            },\n            unit_amount: package_.price * 100, // Convert to cents\n          },\n          quantity: 1,\n        },\n      ],\n      success_url: `${process.env.NEXTAUTH_URL}/realtor-dashboard?payment=success&credits=${package_.credits}`,\n      cancel_url: `${process.env.NEXTAUTH_URL}/buy-credits?payment=cancelled`,\n    });\n\n    return NextResponse.json({\n      checkoutUrl: checkoutSession.url\n    });\n\n  } catch (error) {\n    return NextResponse.json(\n      { error: 'Failed to create checkout session' },\n      { status: 500 }\n    );\n  }\n}","usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/app/api/stripe/webhook/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":33,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":33,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":69,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":69,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'userEmail' is assigned a value but never used.","line":81,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":81,"endColumn":28},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":101,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":101,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3005,3008],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3005,3008],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":106,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":106,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3252,3255],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3252,3255],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":144,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":144,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'subscription' is defined but never used.","line":149,"column":42,"nodeType":null,"messageId":"unusedVar","endLine":149,"endColumn":54},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":158,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":158,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5100,5103],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5100,5103],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":190,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":190,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6154,6157],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6154,6157],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":221,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":221,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7027,7030],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7027,7030],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":227,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":227,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7269,7272],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7269,7272],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":285,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":285,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9132,9135],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9132,9135],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":291,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":291,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9389,9392],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9389,9392],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { FirebaseDB } from '@/lib/firebase-db';\nimport Stripe from 'stripe';\nimport { User } from '@/lib/firebase-models';\n\nconst stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {\n  apiVersion: '2025-08-27.basil',\n});\nconst endpointSecret = process.env.STRIPE_WEBHOOK_SECRET;\n\n// New credit package system - only these packages are valid\nconst CREDIT_PACKAGES = {\n  '1_credit': { credits: 1, price: 300, name: '1 Lead Credit', recurring: false },\n  '4_credits': { credits: 4, price: 500, name: '4 Lead Credits (Monthly)', recurring: true },\n  '10_credits': { credits: 10, price: 1000, name: '10 Lead Credits (Monthly)', recurring: true },\n  '60_credits': { credits: 60, price: 3000, name: '60 Lead Credits', recurring: false },\n};\n\nexport async function POST(request: NextRequest) {\n\n  const body = await request.text();\n  const signature = request.headers.get('stripe-signature');\n\n  let event;\n\n  try {\n    // Always verify webhook signature for security\n    if (!signature || !endpointSecret) {\n      throw new Error('Missing webhook signature or endpoint secret');\n    }\n    \n    event = stripe.webhooks.constructEvent(body, signature, endpointSecret);\n  } catch (err) {\n    return NextResponse.json(\n      { error: 'Webhook signature verification failed' },\n      { status: 400 }\n    );\n  }\n\n\n  try {\n    switch (event.type) {\n      case 'checkout.session.completed':\n        await handleCheckoutCompleted(event.data.object);\n        break;\n      \n      case 'customer.subscription.created':\n        await handleSubscriptionCreated(event.data.object);\n        break;\n      \n      case 'customer.subscription.updated':\n        await handleSubscriptionUpdated(event.data.object);\n        break;\n      \n      case 'customer.subscription.deleted':\n        await handleSubscriptionDeleted(event.data.object);\n        break;\n      \n      case 'invoice.payment_succeeded':\n        await handlePaymentSucceeded(event.data.object);\n        break;\n      \n      case 'invoice.payment_failed':\n        await handlePaymentFailed(event.data.object);\n        break;\n      \n      default:\n    }\n  } catch (error) {\n    return NextResponse.json(\n      { error: 'Webhook handler failed' },\n      { status: 500 }\n    );\n  }\n\n  return NextResponse.json({ received: true });\n}\n\nasync function handleCheckoutCompleted(session: Stripe.Checkout.Session) {\n  const { customer, subscription, metadata, mode } = session;\n  const { userId, userEmail, creditPackId, credits } = metadata || {};\n\n  if (!userId || !creditPackId) {\n    return;\n  }\n\n  // Validate credit package\n  const creditPackage = CREDIT_PACKAGES[creditPackId as keyof typeof CREDIT_PACKAGES];\n  if (!creditPackage) {\n    return;\n  }\n\n  try {\n    // Get current user data\n    const userData = await FirebaseDB.getDocument('users', userId);\n    if (!userData) {\n      return;\n    }\n\n    // Add credits to realtor account using new system\n    const currentCredits = (userData as User & { realtorData?: any }).realtorData?.credits || 0;\n    const creditsToAdd = parseInt(credits || creditPackage.credits.toString());\n    const newCredits = currentCredits + creditsToAdd;\n\n    const updatedRealtorData = {\n      ...(userData as User & { realtorData?: any }).realtorData || {},\n      credits: newCredits,\n      lastPurchase: new Date(),\n      updatedAt: new Date()\n    };\n\n    // Handle subscription vs one-time purchase\n    if (mode === 'subscription' && subscription && creditPackage.recurring) {\n      // Only 4 and 10 credit packages should create subscriptions\n      updatedRealtorData.stripeSubscriptionId = subscription;\n      updatedRealtorData.subscriptionStatus = 'active';\n      updatedRealtorData.currentPlan = creditPackId;\n    }\n\n    // Store Stripe customer ID if provided\n    if (customer) {\n      updatedRealtorData.stripeCustomerId = customer;\n    }\n\n    await FirebaseDB.updateDocument('users', userId, {\n      realtorData: updatedRealtorData,\n      updatedAt: new Date()\n    });\n\n    // Create transaction record\n    await FirebaseDB.createDocument('realtorTransactions', {\n      realtorUserId: userId,\n      type: creditPackage.recurring ? 'subscription_purchase' : 'credit_purchase',\n      description: `Purchased ${creditPackage.name} - ${creditsToAdd} credits`,\n      creditsChange: creditsToAdd,\n      runningBalance: newCredits,\n      stripeSessionId: session.id,\n      stripeSubscriptionId: subscription || null,\n      amount: (session.amount_total || 0) / 100,\n      creditPackageId: creditPackId,\n      createdAt: new Date()\n    });\n    \n  } catch (error) {\n    // Log error but don't fail the webhook\n  }\n}\n\nasync function handleSubscriptionCreated(subscription: Stripe.Subscription) {\n  // This is handled in checkout.session.completed for our new system\n  // No additional action needed\n}\n\nasync function handleSubscriptionUpdated(subscription: Stripe.Subscription) {\n  try {\n    // Find user with this subscription ID and update status\n    // TODO: Add Firestore index on 'realtorData.stripeSubscriptionId' for scale\n    const users = await FirebaseDB.queryDocuments<any>(\n      'users',\n      [{ field: 'realtorData.stripeSubscriptionId', operator: '==', value: subscription.id }],\n      1 // Limit to 1 result since subscription IDs are unique\n    );\n\n    if (users.length === 0) {\n      console.warn(`No user found for subscription ${subscription.id}`);\n      return;\n    }\n\n    const user = users[0];\n    const updatedRealtorData = {\n      ...user.realtorData || {},\n      subscriptionStatus: subscription.status === 'active' ? 'active' : 'canceled',\n      updatedAt: new Date()\n    };\n\n    await FirebaseDB.updateDocument('users', user.id, {\n      realtorData: updatedRealtorData,\n      updatedAt: new Date()\n    });\n  } catch (error) {\n    console.error('Error in handleSubscriptionUpdated:', error);\n    throw error;\n  }\n}\n\nasync function handleSubscriptionDeleted(subscription: Stripe.Subscription) {\n  try {\n    // Find user with this subscription ID and update status to canceled\n    // TODO: Add Firestore index on 'realtorData.stripeSubscriptionId' for scale\n    const users = await FirebaseDB.queryDocuments<any>(\n      'users',\n      [{ field: 'realtorData.stripeSubscriptionId', operator: '==', value: subscription.id }],\n      1 // Limit to 1 result since subscription IDs are unique\n    );\n\n    if (users.length === 0) {\n      console.warn(`No user found for subscription deletion ${subscription.id}`);\n      return;\n    }\n\n    const user = users[0];\n    const updatedRealtorData = {\n      ...user.realtorData || {},\n      subscriptionStatus: 'canceled',\n      stripeSubscriptionId: null,\n      updatedAt: new Date()\n    };\n\n    await FirebaseDB.updateDocument('users', user.id, {\n      realtorData: updatedRealtorData,\n      updatedAt: new Date()\n    });\n  } catch (error) {\n    console.error('Error in handleSubscriptionDeleted:', error);\n    throw error;\n  }\n}\n\nasync function handlePaymentSucceeded(invoice: Stripe.Invoice) {\n  try {\n    const subscriptionId = (invoice as any).subscription as string;\n    \n    if (!subscriptionId) return;\n\n    // Find user with this subscription ID\n    // TODO: Add Firestore index on 'realtorData.stripeSubscriptionId' for scale\n    const users = await FirebaseDB.queryDocuments<any>(\n      'users',\n      [{ field: 'realtorData.stripeSubscriptionId', operator: '==', value: subscriptionId }],\n      1 // Limit to 1 result since subscription IDs are unique\n    );\n\n    if (users.length === 0) {\n      console.warn(`No user found for payment success ${subscriptionId}`);\n      return;\n    }\n\n    const user = users[0];\n    const realtorData = user.realtorData || {};\n    const creditPackId = realtorData.currentPlan;\n    \n    // Find the credit package to get credits\n    const creditPackage = CREDIT_PACKAGES[creditPackId as keyof typeof CREDIT_PACKAGES];\n    if (!creditPackage || !creditPackage.recurring) {\n      return;\n    }\n\n    // Add monthly credits for recurring subscriptions\n    const currentCredits = realtorData.credits || 0;\n    const newCredits = currentCredits + creditPackage.credits;\n\n    const updatedRealtorData = {\n      ...realtorData,\n      credits: newCredits,\n      lastRenewal: new Date(),\n      updatedAt: new Date()\n    };\n\n    await FirebaseDB.updateDocument('users', user.id, {\n      realtorData: updatedRealtorData,\n      updatedAt: new Date()\n    });\n\n    // Create renewal transaction record\n    await FirebaseDB.createDocument('realtorTransactions', {\n      realtorUserId: user.id,\n      type: 'subscription_renewal',\n      description: `Monthly renewal - ${creditPackage.name} - ${creditPackage.credits} credits`,\n      creditsChange: creditPackage.credits,\n      runningBalance: newCredits,\n      stripeInvoiceId: invoice.id,\n      stripeSubscriptionId: subscriptionId,\n      amount: (invoice.amount_paid || 0) / 100,\n      creditPackageId: creditPackId,\n      createdAt: new Date()\n    });\n  } catch (error) {\n    console.error('Error in handlePaymentSucceeded:', error);\n    throw error;\n  }\n}\n\nasync function handlePaymentFailed(invoice: Stripe.Invoice) {\n  try {\n    const subscriptionId = (invoice as any).subscription as string;\n    \n    if (!subscriptionId) return;\n\n    // Find user with this subscription and update status\n    // TODO: Add Firestore index on 'realtorData.stripeSubscriptionId' for scale\n    const users = await FirebaseDB.queryDocuments<any>(\n      'users',\n      [{ field: 'realtorData.stripeSubscriptionId', operator: '==', value: subscriptionId }],\n      1 // Limit to 1 result since subscription IDs are unique\n    );\n\n    if (users.length === 0) {\n      console.warn(`No user found for payment failure ${subscriptionId}`);\n      return;\n    }\n\n    const user = users[0];\n    const updatedRealtorData = {\n      ...user.realtorData || {},\n      subscriptionStatus: 'payment_failed',\n      lastPaymentFailed: new Date(),\n      updatedAt: new Date()\n    };\n\n    await FirebaseDB.updateDocument('users', user.id, {\n      realtorData: updatedRealtorData,\n      updatedAt: new Date()\n    });\n\n    // Log the failed payment\n    await FirebaseDB.createDocument('realtorTransactions', {\n      realtorUserId: user.id,\n      type: 'payment_failed',\n      description: 'Monthly subscription payment failed',\n      stripeInvoiceId: invoice.id,\n      stripeSubscriptionId: subscriptionId,\n      amount: (invoice.amount_due || 0) / 100,\n      createdAt: new Date()\n    });\n  } catch (error) {\n    console.error('Error in handlePaymentFailed:', error);\n    throw error;\n  }\n}\n\n// This function is no longer needed - all subscription logic is handled in the new system","usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/app/api/users/[id]/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'password' is assigned a value but never used.","line":37,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":37,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":43,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":43,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { getSessionWithRole } from '@/lib/auth-utils';\nimport { unifiedDb } from '@/lib/unified-db';\n\nexport async function GET(request: NextRequest, { params }: { params: Promise<{ id: string }> }) {\n  try {\n    const resolvedParams = await params;\n    // Get session to verify user is accessing their own data  \n    const session = await getSessionWithRole('realtor');\n    \n    if (!session?.user?.id) {\n      return NextResponse.json(\n        { error: 'Not authenticated' },\n        { status: 401 }\n      );\n    }\n\n    // Verify user is accessing their own data\n    if (session.user.id !== resolvedParams.id) {\n      return NextResponse.json(\n        { error: 'Access denied - can only access your own data' },\n        { status: 403 }\n      );\n    }\n\n    // Get user data from database\n    const user = await unifiedDb.users.findById(resolvedParams.id);\n    \n    if (!user) {\n      return NextResponse.json(\n        { error: 'User not found' },\n        { status: 404 }\n      );\n    }\n\n    // Return user data (excluding password)\n    const { password, ...userData } = user;\n    \n    return NextResponse.json({\n      user: userData\n    });\n\n  } catch (error) {\n    return NextResponse.json(\n      { error: 'Failed to fetch user data' },\n      { status: 500 }\n    );\n  }\n}","usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/app/auth/forgot-password/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useRouter' is defined but never used.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":32,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":32,"endColumn":17},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":51,"column":17,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[1715,1772],"text":"\n              We&apos;ve sent password reset instructions to "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[1715,1772],"text":"\n              We&lsquo;ve sent password reset instructions to "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[1715,1772],"text":"\n              We&#39;ve sent password reset instructions to "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[1715,1772],"text":"\n              We&rsquo;ve sent password reset instructions to "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState } from 'react';\nimport { useRouter } from 'next/navigation';\nimport Link from 'next/link';\n\nexport default function ForgotPassword() {\n  const [email, setEmail] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [sent, setSent] = useState(false);\n  const [error, setError] = useState('');\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setLoading(true);\n    setError('');\n\n    try {\n      const response = await fetch('/api/auth/forgot-password', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ email })\n      });\n\n      const data = await response.json();\n\n      if (data.error) {\n        setError(data.error);\n      } else {\n        setSent(true);\n      }\n    } catch (err) {\n      setError('Something went wrong. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  if (sent) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center px-4 py-8\">\n        <div className=\"w-full max-w-lg bg-white rounded-3xl shadow-2xl p-10\">\n          <div className=\"text-center\">\n            <div className=\"w-16 h-16 bg-green-500 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <svg className=\"w-8 h-8 text-white\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 13l4 4L19 7\" />\n              </svg>\n            </div>\n            <h2 className=\"text-2xl font-bold text-gray-800 mb-4\">Check Your Email</h2>\n            <p className=\"text-gray-600 mb-6\">\n              We've sent password reset instructions to <strong>{email}</strong>\n            </p>\n            <div className=\"space-y-4\">\n              <a \n                href=\"/auth/signin\"\n                className=\"w-full bg-blue-600 text-white py-4 px-4 rounded-2xl hover:bg-blue-700 transition-colors font-semibold text-lg shadow-lg transform active:scale-95 flex items-center justify-center\"\n              >\n                Return to Sign In\n              </a>\n              <button\n                onClick={() => {\n                  setSent(false);\n                  setEmail('');\n                }}\n                className=\"w-full text-blue-600 hover:text-blue-700 text-sm font-medium py-2\"\n              >\n                Try a different email\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center px-4 py-8\">\n      <div className=\"w-full max-w-lg bg-white rounded-3xl shadow-2xl p-10\">\n        <div className=\"text-center mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-800 mb-2\">Reset Password</h1>\n          <p className=\"text-gray-600\">\n            Enter email to reset password\n          </p>\n        </div>\n\n        <form onSubmit={handleSubmit} className=\"space-y-8\">\n          {error && (\n            <div className=\"bg-red-50 border border-red-200 rounded-xl p-4\">\n              <p className=\"text-red-600 text-sm\">{error}</p>\n            </div>\n          )}\n\n          <div>\n            <label className=\"block text-sm font-semibold text-gray-800 mb-3\">\n              Email Address\n            </label>\n            <input\n              type=\"email\"\n              required\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n              className=\"w-full p-4 border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-gray-900 placeholder-gray-500 text-lg\"\n              placeholder=\"Enter your email address\"\n            />\n          </div>\n\n          <button\n            type=\"submit\"\n            disabled={loading}\n            className=\"w-full bg-blue-600 text-white py-4 px-4 rounded-2xl hover:bg-blue-700 transition-colors font-semibold text-lg disabled:bg-gray-400 disabled:cursor-not-allowed shadow-lg transform active:scale-95\"\n          >\n            {loading ? (\n              <span className=\"flex items-center justify-center\">\n                <div className=\"animate-spin rounded-full h-5 w-5 border-b-2 border-white mr-2\"></div>\n                Sending...\n              </span>\n            ) : (\n              'Send Reset Instructions'\n            )}\n          </button>\n\n          <div className=\"text-center\">\n            <Link href=\"/auth/signin\" className=\"text-blue-600 hover:text-blue-700 font-medium text-sm\">\n              ‚Üê Back to Sign In\n            </Link>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/app/auth/logout/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/app/auth/reset-password/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":63,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":63,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useEffect, Suspense } from 'react';\nimport { useRouter, useSearchParams } from 'next/navigation';\nimport Link from 'next/link';\nimport { Button } from '@/components/ui/Button';\n\nfunction ResetPasswordContent() {\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState(false);\n  const [validToken, setValidToken] = useState<boolean | null>(null);\n  \n  const router = useRouter();\n  const searchParams = useSearchParams();\n  const token = searchParams.get('token');\n\n  useEffect(() => {\n    if (!token) {\n      setError('Invalid reset link');\n      setValidToken(false);\n      return;\n    }\n    setValidToken(true);\n  }, [token]);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setLoading(true);\n    setError('');\n\n    if (password !== confirmPassword) {\n      setError('Passwords do not match');\n      setLoading(false);\n      return;\n    }\n\n    if (password.length < 8) {\n      setError('Password must be at least 8 characters long');\n      setLoading(false);\n      return;\n    }\n\n    try {\n      const response = await fetch('/api/auth/reset-password', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ token, password })\n      });\n\n      const data = await response.json();\n\n      if (data.error) {\n        setError(data.error);\n      } else {\n        setSuccess(true);\n        setTimeout(() => {\n          router.push('/auth/signin');\n        }, 3000);\n      }\n    } catch (err) {\n      setError('Something went wrong. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  if (validToken === false) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center px-4\">\n        <div className=\"max-w-md w-full bg-white rounded-xl shadow-lg p-8 text-center\">\n          <div className=\"w-16 h-16 bg-red-500 rounded-full flex items-center justify-center mx-auto mb-4\">\n            <svg className=\"w-8 h-8 text-white\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n            </svg>\n          </div>\n          <h2 className=\"text-2xl font-bold text-gray-800 mb-4\">Invalid Reset Link</h2>\n          <p className=\"text-gray-600 mb-6\">\n            This password reset link is invalid or has expired.\n          </p>\n          <Button variant=\"primary\" href=\"/auth/forgot-password\" className=\"w-full\">\n            Request New Reset Link\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  if (success) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center px-4\">\n        <div className=\"max-w-md w-full bg-white rounded-xl shadow-lg p-8 text-center\">\n          <div className=\"w-16 h-16 bg-green-500 rounded-full flex items-center justify-center mx-auto mb-4\">\n            <svg className=\"w-8 h-8 text-white\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 13l4 4L19 7\" />\n            </svg>\n          </div>\n          <h2 className=\"text-2xl font-bold text-gray-800 mb-4\">Password Reset Successful</h2>\n          <p className=\"text-gray-600 mb-6\">\n            Your password has been successfully reset. You will be redirected to the sign-in page.\n          </p>\n          <Button variant=\"primary\" href=\"/auth/signin\" className=\"w-full\">\n            Sign In Now\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center px-4\">\n      <div className=\"max-w-md w-full bg-white rounded-xl shadow-lg p-8\">\n        <div className=\"text-center mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-800 mb-2\">Set New Password</h1>\n          <p className=\"text-gray-600\">\n            Enter your new password below\n          </p>\n        </div>\n\n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          {error && (\n            <div className=\"bg-red-50 border border-red-200 rounded-lg p-4\">\n              <p className=\"text-red-800 text-sm\">{error}</p>\n            </div>\n          )}\n\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              New Password\n            </label>\n            <input\n              type=\"password\"\n              required\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n              className=\"w-full p-4 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n              placeholder=\"Enter new password\"\n              minLength={8}\n            />\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Confirm New Password\n            </label>\n            <input\n              type=\"password\"\n              required\n              value={confirmPassword}\n              onChange={(e) => setConfirmPassword(e.target.value)}\n              className=\"w-full p-4 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n              placeholder=\"Confirm new password\"\n              minLength={8}\n            />\n          </div>\n\n          <Button\n            type=\"submit\"\n            variant=\"primary\"\n            disabled={loading}\n            className=\"w-full py-4 text-lg\"\n          >\n            {loading ? 'Resetting...' : 'Reset Password'}\n          </Button>\n\n          <div className=\"text-center\">\n            <Link href=\"/auth/signin\" className=\"text-blue-600 hover:text-blue-700 text-sm\">\n              ‚Üê Back to Sign In\n            </Link>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n}\n\nexport default function ResetPassword() {\n  return (\n    <Suspense fallback={\n      <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center px-4\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600\"></div>\n      </div>\n    }>\n      <ResetPasswordContent />\n    </Suspense>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/app/auth/signin/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":32,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":32,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[920,923],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[920,923],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":47,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":47,"endColumn":17},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":68,"column":20,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[2290,2329],"text":"\n                Don&apos;t have an account?"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[2290,2329],"text":"\n                Don&lsquo;t have an account?"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[2290,2329],"text":"\n                Don&#39;t have an account?"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[2290,2329],"text":"\n                Don&rsquo;t have an account?"},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState } from 'react';\nimport { signIn, getSession } from 'next-auth/react';\nimport { useRouter } from 'next/navigation';\nimport Link from 'next/link';\nimport { isExtendedSession, ExtendedSession } from '@/types/session';\n\nexport default function SignIn() {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const router = useRouter();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setLoading(true);\n    setError('');\n\n    try {\n      const result = await signIn('credentials', {\n        email,\n        password,\n        redirect: false,\n      });\n\n      if (result?.error) {\n        setError('Invalid email or password');\n      } else {\n        const session = await getSession();\n        if (isExtendedSession(session as any)) {\n          const extendedSession = session as unknown as ExtendedSession;\n          if (extendedSession.user.role === 'buyer') {\n            router.push('/dashboard');\n          } else if (extendedSession.user.role === 'realtor') {\n            router.push('/realtor-dashboard');\n          } else if (extendedSession.user.role === 'admin' && extendedSession.user.email === 'admin@prosway.com') {\n            router.push('/admin');\n          } else {\n            router.push('/dashboard');\n          }\n        } else {\n          router.push('/dashboard');\n        }\n      }\n    } catch (err) {\n      setError('Something went wrong');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-slate-900\">\n      <div style={{ paddingTop: '2rem', paddingBottom: '2rem' }} className=\"px-6\">\n        <div className=\"max-w-md mx-auto w-full\">\n          <div className=\"bg-slate-800/50 backdrop-blur-lg border border-slate-700/50 rounded-2xl p-8 shadow-2xl\">\n            {/* Welcome */}\n            <div className=\"text-center mb-8\">\n              <h1 className=\"text-3xl font-bold text-white mb-3\">\n                Welcome back\n              </h1>\n              <p className=\"text-lg text-white font-normal mb-4\">\n                Sign in to access your property matches\n              </p>\n              <p className=\"text-white\">\n                Don't have an account?{' '}\n                <Link href=\"/signup\" className=\"text-emerald-400 hover:text-emerald-300 font-semibold transition-colors\">\n                  Sign Up\n                </Link>\n              </p>\n            </div>\n\n            {/* Form */}\n            <form onSubmit={handleSubmit} className=\"mb-6\">\n          {error && (\n            <div className=\"p-4 mb-6 bg-red-600/20 backdrop-blur-lg border border-red-500/30 rounded-xl text-red-300 font-semibold\">\n              {error}\n            </div>\n          )}\n          \n          <div className=\"mb-6\">\n            <label className=\"block text-sm font-semibold mb-3\" style={{color: 'white'}}>\n              Email address\n            </label>\n            <input\n              type=\"email\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n              required\n              autoComplete=\"email\"\n              placeholder=\"your@email.com\"\n              className=\"w-full px-4 py-4 bg-emerald-500/10 border border-emerald-400/30 rounded-xl focus:outline-none focus:ring-2 focus:ring-emerald-400 focus:border-emerald-400 text-white placeholder-slate-400 font-normal\"\n            />\n          </div>\n\n          <div className=\"mb-8\">\n            <label className=\"block text-sm font-semibold mb-3\" style={{color: 'white'}}>\n              Password\n            </label>\n            <input\n              type=\"password\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n              required\n              autoComplete=\"current-password\"\n              placeholder=\"Enter your password\"\n              className=\"w-full px-4 py-4 bg-emerald-500/10 border border-emerald-400/30 rounded-xl focus:outline-none focus:ring-2 focus:ring-emerald-400 focus:border-emerald-400 text-white placeholder-slate-400 font-normal\"\n            />\n          </div>\n\n          <button\n            type=\"submit\"\n            disabled={loading}\n            className=\"w-full bg-gradient-to-r from-emerald-500 to-emerald-600 hover:from-emerald-400 hover:to-emerald-500 text-white py-4 px-6 rounded-xl font-semibold text-lg transition-all duration-300 hover:scale-105 shadow-2xl shadow-emerald-500/25 disabled:opacity-50 disabled:cursor-not-allowed mb-6\"\n          >\n            {loading ? (\n              <span className=\"flex items-center justify-center gap-3\">\n                <div className=\"w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin\"></div>\n                Signing in...\n              </span>\n            ) : (\n              'Sign In'\n            )}\n          </button>\n\n          <div className=\"text-center\">\n            <Link \n              href=\"/auth/forgot-password\" \n              className=\"text-emerald-400 hover:text-emerald-300 font-semibold transition-colors\"\n            >\n              Forgot password?\n            </Link>\n          </div>\n            </form>\n\n            {/* Footer */}\n            <div className=\"mt-8 text-center\">\n              <p className=\"text-xs text-white leading-relaxed\">\n                By signing in, you agree to our{' '}\n                <Link href=\"/terms\" className=\"text-emerald-400 hover:text-emerald-300 transition-colors\">\n                  Terms\n                </Link>{' '}\n                and{' '}\n                <Link href=\"/privacy\" className=\"text-emerald-400 hover:text-emerald-300 transition-colors\">\n                  Privacy Policy\n                </Link>\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/app/buy-credits/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'router' is assigned a value but never used.","line":24,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":102,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":102,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":131,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":131,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useEffect } from 'react';\nimport { useRouter } from 'next/navigation';\nimport Link from 'next/link';\n\ninterface ActiveSubscription {\n  id: string;\n  status: string;\n  current_period_end: number;\n  credits?: number;\n  price?: number;\n  items?: {\n    data: Array<{\n      price?: {\n        nickname?: string;\n      };\n    }>;\n  };\n  cancel_at_period_end?: boolean;\n}\n\nexport default function BuyCredits() {\n  const router = useRouter();\n  const [selectedPack, setSelectedPack] = useState('4_credits');\n  const [loading, setLoading] = useState(false);\n  const [activeSubscriptions, setActiveSubscriptions] = useState<ActiveSubscription[]>([]);\n  const [loadingSubscriptions, setLoadingSubscriptions] = useState(true);\n  const [canceling, setCanceling] = useState('');\n\n  const creditPacks = [\n    { \n      id: '1_credit', \n      credits: 1, \n      price: 300, \n      popular: false, \n      recurring: false,\n      description: 'Single lead'\n    },\n    { \n      id: '4_credits', \n      credits: 4, \n      price: 500, \n      popular: true, \n      recurring: true,\n      description: 'Most popular'\n    },\n    { \n      id: '10_credits', \n      credits: 10, \n      price: 1000, \n      popular: false, \n      recurring: true,\n      description: 'Best value'\n    },\n    { \n      id: '60_credits', \n      credits: 60, \n      price: 3000, \n      popular: false, \n      recurring: false,\n      description: 'Enterprise'\n    }\n  ];\n\n  // Load active subscriptions\n  useEffect(() => {\n    const loadSubscriptions = async () => {\n      try {\n        const response = await fetch('/api/stripe/billing-portal', {\n          method: 'GET',\n        });\n        if (response.ok) {\n          const data = await response.json();\n          setActiveSubscriptions(data.subscriptions || []);\n        }\n      } catch (error) {\n        console.error('Failed to load subscriptions:', error);\n      } finally {\n        setLoadingSubscriptions(false);\n      }\n    };\n    \n    loadSubscriptions();\n  }, []);\n\n  const handleCancelSubscription = async (subscriptionId: string) => {\n    setCanceling(subscriptionId);\n    try {\n      const response = await fetch('/api/stripe/cancel-subscription', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ subscriptionId })\n      });\n\n      if (response.ok) {\n        // Remove from active subscriptions\n        setActiveSubscriptions(prev => prev.filter(sub => sub.id !== subscriptionId));\n      } else {\n        alert('Failed to cancel subscription');\n      }\n    } catch (error) {\n      alert('Failed to cancel subscription');\n    } finally {\n      setCanceling('');\n    }\n  };\n\n  const handlePurchase = async () => {\n    if (!selectedPack) return;\n    \n    setLoading(true);\n    \n    try {\n      const response = await fetch('/api/stripe/simple-checkout', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          creditPackId: selectedPack\n        })\n      });\n\n      const data = await response.json();\n\n      if (data.checkoutUrl) {\n        window.location.href = data.checkoutUrl;\n      } else {\n        alert('Error creating checkout');\n      }\n      \n    } catch (error) {\n      alert('Purchase failed');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-slate-900 flex flex-col\">\n      {/* Simple Header */}\n      <div className=\"bg-slate-800/50 backdrop-blur-lg border-b border-slate-700/50 px-4 py-4\">\n        <Link href=\"/realtor-dashboard\" className=\"flex items-center gap-2\">\n          <div className=\"w-8 h-8 bg-gradient-to-br from-emerald-400 to-blue-500 rounded-lg flex items-center justify-center\">\n            <span className=\"text-white font-bold text-sm\">O</span>\n          </div>\n          <span className=\"text-lg font-bold text-white\">OwnerFi</span>\n        </Link>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"flex-1 px-4 py-3 max-w-md mx-auto w-full\" style={{height: 'calc(100vh - 80px)', overflow: 'auto'}}>\n        \n        {/* Title */}\n        <div className=\"text-center mb-4\">\n          <h1 className=\"text-xl font-bold text-white mb-1\">\n            Choose Your Plan\n          </h1>\n          <p className=\"text-slate-300 text-sm\">\n            Select leads package\n          </p>\n        </div>\n\n        {/* Active Subscriptions */}\n        {!loadingSubscriptions && activeSubscriptions.length > 0 && (\n          <div className=\"mb-4\">\n            <h3 className=\"text-base font-semibold text-white mb-2\">Active Subscriptions</h3>\n            <div className=\"space-y-2\">\n              {activeSubscriptions.map((subscription) => (\n                <div\n                  key={subscription.id}\n                  className=\"p-4 bg-blue-500/10 border border-blue-400/30 rounded-xl\"\n                >\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <div className=\"text-white font-medium\">\n                        {subscription.credits} Leads - ${subscription.price}/month\n                      </div>\n                      <div className=\"text-slate-400 text-sm\">\n                        Next billing: {new Date(subscription.current_period_end * 1000).toLocaleDateString()}\n                      </div>\n                    </div>\n                    <button\n                      onClick={() => handleCancelSubscription(subscription.id)}\n                      disabled={canceling === subscription.id}\n                      className=\"bg-red-500/20 hover:bg-red-500/30 text-red-400 hover:text-red-300 px-3 py-1 rounded-lg text-sm font-medium transition-colors disabled:opacity-50\"\n                    >\n                      {canceling === subscription.id ? 'Canceling...' : 'Cancel'}\n                    </button>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {/* Simple Plan Options */}\n        <div className=\"space-y-2 mb-4\">\n          {creditPacks.map((pack) => (\n            <div\n              key={pack.id}\n              onClick={() => setSelectedPack(pack.id)}\n              className={`cursor-pointer p-4 rounded-xl border-2 transition-all ${\n                selectedPack === pack.id\n                  ? 'border-emerald-400 bg-emerald-500/10'\n                  : 'border-slate-600 bg-slate-800/50 hover:border-slate-500'\n              }`}\n            >\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <div className=\"flex items-center gap-2\">\n                    <span className=\"text-white font-semibold\">\n                      {pack.credits} {pack.credits === 1 ? 'Lead' : 'Leads'}\n                    </span>\n                    {pack.popular && (\n                      <span className=\"bg-emerald-500 text-white px-2 py-0.5 rounded text-xs font-bold\">\n                        POPULAR\n                      </span>\n                    )}\n                  </div>\n                  <div className=\"text-slate-400 text-sm mt-1\">\n                    {pack.description}\n                    {pack.recurring && ' ‚Ä¢ Monthly'}\n                  </div>\n                </div>\n                <div className=\"text-right\">\n                  <div className=\"text-xl font-bold text-white\">${pack.price}</div>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n\n        {/* Purchase Button */}\n        <button\n          onClick={handlePurchase}\n          disabled={!selectedPack || loading}\n          className=\"w-full bg-gradient-to-r from-emerald-500 to-emerald-600 hover:from-emerald-400 hover:to-emerald-500 text-white py-4 px-6 rounded-xl font-bold text-lg transition-all duration-300 shadow-lg disabled:opacity-50 disabled:cursor-not-allowed mb-4\"\n        >\n          {loading ? 'Processing...' : 'Get Leads Now'}\n        </button>\n        \n        <p className=\"text-center text-white text-sm\">\n          üîí Secure payment ‚Ä¢ Credits never expire\n        </p>\n\n        {/* Back Link */}\n        <div className=\"text-center mt-3\">\n          <Link href=\"/realtor-dashboard\" className=\"text-slate-400 hover:text-white transition-colors text-sm\">\n            ‚Üê Back to Dashboard\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/app/dashboard/favorites/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Link' is defined but never used.","line":6,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'session' is assigned a value but never used.","line":14,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":73,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":73,"endColumn":19},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":214,"column":35,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[9210,9254],"text":"\n                  Properties I Don&apos;t Like ("},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[9210,9254],"text":"\n                  Properties I Don&lsquo;t Like ("},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[9210,9254],"text":"\n                  Properties I Don&#39;t Like ("},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[9210,9254],"text":"\n                  Properties I Don&rsquo;t Like ("},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":291,"column":40,"nodeType":null,"messageId":"unusedVar","endLine":291,"endColumn":45}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useEffect } from 'react';\nimport { useSession } from 'next-auth/react';\nimport { useRouter } from 'next/navigation';\nimport Link from 'next/link';\nimport { Button } from '@/components/ui/Button';\n\nimport { PropertyListing } from '@/lib/property-schema';\n\ntype Property = PropertyListing;\n\nexport default function FavoritesPage() {\n  const { data: session, status } = useSession();\n  const router = useRouter();\n  const [favoriteProperties, setFavoriteProperties] = useState<Property[]>([]);\n  const [passedProperties, setPassedProperties] = useState<Property[]>([]);\n  const [showPassed, setShowPassed] = useState(false);\n  const [selectedProperty, setSelectedProperty] = useState<Property | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(amount);\n  };\n\n  useEffect(() => {\n    if (status === 'unauthenticated') {\n      router.push('/auth/signin');\n    } else if (status === 'authenticated') {\n      // Load actual property details from database\n      fetchFavoriteProperties();\n    }\n  }, [status, router]);\n\n  const fetchFavoriteProperties = async () => {\n    try {\n      // Get buyer profile first\n      const profileResponse = await fetch('/api/buyer/profile');\n      const profileData = await profileResponse.json();\n      \n      if (!profileData.profile) {\n        setLoading(false);\n        return;\n      }\n\n      const buyerId = profileData.profile.id;\n      \n      // Get liked properties using new unified API\n      const likedResponse = await fetch(`/api/buyer/properties?buyerId=${buyerId}&status=liked`);\n      const likedData = await likedResponse.json();\n      \n      if (!likedData.error) {\n        setFavoriteProperties(likedData.properties || []);\n      } else {\n        setFavoriteProperties([]);\n      }\n\n      // Get passed properties using new unified API\n      const passedResponse = await fetch(`/api/buyer/properties?buyerId=${buyerId}&status=disliked`);\n      const passedData = await passedResponse.json();\n      \n      if (!passedData.error) {\n        setPassedProperties(passedData.properties || []);\n      } else {\n        setPassedProperties([]);\n      }\n      \n    } catch (error) {\n      setFavoriteProperties([]);\n      setPassedProperties([]);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  if (status === 'loading' || loading) {\n    return (\n      <div className=\"min-h-screen bg-primary-bg flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-accent-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-primary-bg\">\n      <header className=\"bg-white px-6 py-4 border-b border-gray-100\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <button \n              onClick={() => router.back()}\n              className=\"text-gray-600 hover:text-gray-800 transition-colors p-1\"\n            >\n              <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M10 19l-7-7m0 0l7-7m-7 7h18\" />\n              </svg>\n            </button>\n            <h1 className=\"text-2xl font-bold text-gray-900\">Saved Properties</h1>\n          </div>\n        </div>\n      </header>\n\n      <div className=\"p-6\">\n        {favoriteProperties.length === 0 ? (\n          <div className=\"text-center py-12\">\n            <div className=\"text-6xl mb-4\">üíù</div>\n            <h2 className=\"text-xl font-semibold text-primary-text mb-3\">No Saved Properties Yet</h2>\n            <p className=\"text-secondary-text mb-6\">Start swiping to save properties you love!</p>\n            <Button variant=\"primary\" href=\"/dashboard\">\n              Browse Properties\n            </Button>\n          </div>\n        ) : (\n          <div className=\"space-y-6\">\n            {favoriteProperties.map((property: Property) => (\n              <div key={property.id} className=\"bg-white rounded-xl p-6 shadow-lg border border-gray-100\">\n                {/* Header */}\n                <div className=\"text-center mb-4\">\n                  <h3 className=\"text-xl font-bold text-gray-900\">{property.address}</h3>\n                  <p className=\"text-gray-600\">{property.city}, {property.state} {property.zipCode}</p>\n                  \n                  {/* More Details Link */}\n                  <a\n                    href={`https://www.google.com/search?q=${encodeURIComponent(`${property.address} ${property.city}, ${property.state} ${property.zipCode}`)}`}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    className=\"inline-flex items-center space-x-1 text-blue-600 hover:text-blue-800 text-sm font-medium transition-colors mt-2\"\n                  >\n                    <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\" />\n                    </svg>\n                    <span>More Details</span>\n                    <svg className=\"w-3 h-3\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14\" />\n                    </svg>\n                  </a>\n                </div>\n\n                {/* Key Financial Info */}\n                <div className=\"grid grid-cols-2 gap-4 mb-6\">\n                  <div className=\"text-center bg-blue-50 rounded-lg p-4\">\n                    <div className=\"text-sm text-blue-600 font-medium\">Monthly Payment (est)</div>\n                    <div className=\"text-2xl font-bold text-blue-700\">\n                      {formatCurrency(property.monthlyPayment)}\n                    </div>\n                  </div>\n                  <div className=\"text-center bg-orange-50 rounded-lg p-4\">\n                    <div className=\"text-sm text-orange-600 font-medium\">Down Payment (est)</div>\n                    <div className=\"text-2xl font-bold text-orange-700\">\n                      {formatCurrency(property.downPaymentAmount)}\n                    </div>\n                  </div>\n                </div>\n\n                {/* Property Details */}\n                <div className=\"grid grid-cols-3 gap-4 mb-4 text-center\">\n                  <div>\n                    <div className=\"text-2xl font-bold text-gray-800\">{property.bedrooms}</div>\n                    <div className=\"text-xs text-gray-600\">Bedrooms</div>\n                  </div>\n                  <div>\n                    <div className=\"text-2xl font-bold text-gray-800\">{property.bathrooms}</div>\n                    <div className=\"text-xs text-gray-600\">Bathrooms</div>\n                  </div>\n                  <div>\n                    <div className=\"text-2xl font-bold text-gray-800\">{property.squareFeet?.toLocaleString() || 'N/A'}</div>\n                    <div className=\"text-xs text-gray-600\">Sq Ft</div>\n                  </div>\n                </div>\n\n                {/* Financing Terms */}\n                <div className=\"bg-gray-50 rounded-lg p-4 mb-4\">\n                  <div className=\"grid grid-cols-3 gap-4 text-center text-sm\">\n                    <div>\n                      <div className=\"font-semibold text-gray-800\">{formatCurrency(property.listPrice)}</div>\n                      <div className=\"text-gray-600\">List Price (est)</div>\n                    </div>\n                    <div>\n                      <div className=\"font-semibold text-gray-800\">{property.interestRate}%</div>\n                      <div className=\"text-gray-600\">APR (est)</div>\n                    </div>\n                    <div>\n                      <div className=\"font-semibold text-gray-800\">{property.termYears} years</div>\n                      <div className=\"text-gray-600\">Term (est)</div>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Description */}\n                {property.description && (\n                  <div className=\"bg-blue-50 rounded-lg p-4\">\n                    <h4 className=\"font-semibold text-gray-800 mb-2\">Property Description</h4>\n                    <p className=\"text-gray-700 leading-relaxed\">{property.description}</p>\n                  </div>\n                )}\n              </div>\n            ))}\n          </div>\n        )}\n        \n        {/* Collapsible rejected properties section */}\n        {passedProperties.length > 0 && (\n          <div className=\"mt-8\">\n            <button\n              onClick={() => setShowPassed(!showPassed)}\n              className=\"w-full text-left bg-gray-100 hover:bg-gray-200 rounded-lg p-4 transition-colors\"\n            >\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-lg font-semibold text-gray-700\">\n                  Properties I Don't Like ({passedProperties.length})\n                </span>\n                <svg \n                  className={`w-5 h-5 text-gray-500 transition-transform ${showPassed ? 'rotate-180' : ''}`} \n                  fill=\"none\" \n                  stroke=\"currentColor\" \n                  viewBox=\"0 0 24 24\"\n                >\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\n                </svg>\n              </div>\n            </button>\n            \n            {showPassed && (\n              <div className=\"mt-4 space-y-4\">\n                {passedProperties.map((property: Property) => (\n                  <div key={property.id} className=\"bg-red-50 rounded-xl p-4 border border-red-100\">\n                    <div className=\"flex justify-between items-center\">\n                      <div className=\"flex-1\">\n                        <h3 className=\"font-semibold text-gray-800\">{property.address}</h3>\n                        <p className=\"text-gray-600 text-sm\">{property.city}, {property.state}</p>\n                        <p className=\"text-gray-600 text-sm\">\n                          {property.bedrooms} bed ‚Ä¢ {property.bathrooms} bath ‚Ä¢ {property.squareFeet?.toLocaleString() || 'N/A'} sqft\n                        </p>\n                        \n                        {/* More Details Link */}\n                        <a\n                          href={`https://www.google.com/search?q=${encodeURIComponent(`${property.address} ${property.city}, ${property.state} ${property.zipCode}`)}`}\n                          target=\"_blank\"\n                          rel=\"noopener noreferrer\"\n                          className=\"inline-flex items-center space-x-1 text-blue-600 hover:text-blue-800 text-sm font-medium transition-colors mt-2\"\n                        >\n                          <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\" />\n                          </svg>\n                          <span>More Details</span>\n                          <svg className=\"w-3 h-3\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14\" />\n                          </svg>\n                        </a>\n                      </div>\n                      <div className=\"text-right\">\n                        <div className=\"text-lg font-bold text-blue-600\">\n                          {formatCurrency(property.monthlyPayment)}<span className=\"text-xs text-gray-500\">/mo</span>\n                        </div>\n                        <div className=\"text-sm text-orange-600\">\n                          {formatCurrency(property.downPaymentAmount)} down\n                        </div>\n                        <div className=\"mt-2 space-y-1\">\n                          <button \n                            onClick={() => setSelectedProperty(property)}\n                            className=\"w-full bg-white text-gray-700 border border-gray-300 px-3 py-1 rounded-lg text-sm hover:bg-gray-50 transition-colors\"\n                          >\n                            View Details\n                          </button>\n                          <button \n                            onClick={async () => {\n                              try {\n                                // Get buyer profile first to get buyerId\n                                const profileResponse = await fetch('/api/buyer/profile');\n                                const profileData = await profileResponse.json();\n                                \n                                if (profileData.profile) {\n                                  const response = await fetch('/api/property-actions', {\n                                    method: 'POST',\n                                    headers: { 'Content-Type': 'application/json' },\n                                    body: JSON.stringify({ \n                                      buyerId: profileData.profile.id,\n                                      propertyId: property.id, \n                                      action: 'undo_pass' \n                                    })\n                                  });\n                                  \n                                  if (response.ok) {\n                                    setPassedProperties(prev => prev.filter(p => p.id !== property.id));\n                                  }\n                                }\n                              } catch (error) {\n                              }\n                            }}\n                            className=\"w-full bg-green-100 text-green-700 border border-green-300 px-3 py-1 rounded-lg text-sm hover:bg-green-200 transition-colors\"\n                          >\n                            ‚Ü©Ô∏è Restore to Matches\n                          </button>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n        )}\n      </div>\n\n      {/* Property Details Modal */}\n      {selectedProperty && (\n        <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center p-4 z-50\">\n          <div className=\"bg-white rounded-2xl max-w-lg w-full max-h-[80vh] overflow-y-auto\">\n            <div className=\"p-6\">\n              <div className=\"flex justify-between items-start mb-4\">\n                <h2 className=\"text-xl font-bold text-gray-900\">{selectedProperty.address}</h2>\n                <button \n                  onClick={() => setSelectedProperty(null)}\n                  className=\"p-2 hover:bg-gray-100 rounded-full transition-colors\"\n                >\n                  <svg className=\"w-6 h-6 text-gray-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n                  </svg>\n                </button>\n              </div>\n              \n              <div className=\"space-y-4\">\n                <p className=\"text-gray-600\">{selectedProperty.city}, {selectedProperty.state} {selectedProperty.zipCode}</p>\n                \n                <div className=\"grid grid-cols-3 gap-4 text-center\">\n                  <div>\n                    <div className=\"text-2xl font-bold text-gray-800\">{selectedProperty.bedrooms}</div>\n                    <div className=\"text-xs text-gray-600\">Bedrooms</div>\n                  </div>\n                  <div>\n                    <div className=\"text-2xl font-bold text-gray-800\">{selectedProperty.bathrooms}</div>\n                    <div className=\"text-xs text-gray-600\">Bathrooms</div>\n                  </div>\n                  <div>\n                    <div className=\"text-2xl font-bold text-gray-800\">{selectedProperty.squareFeet?.toLocaleString() || 'N/A'}</div>\n                    <div className=\"text-xs text-gray-600\">Sq Ft</div>\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"text-center bg-blue-50 rounded-lg p-4\">\n                    <div className=\"text-sm text-blue-600 font-medium\">Monthly (est)</div>\n                    <div className=\"text-2xl font-bold text-blue-700\">\n                      {formatCurrency(selectedProperty.monthlyPayment)}\n                    </div>\n                  </div>\n                  <div className=\"text-center bg-orange-50 rounded-lg p-4\">\n                    <div className=\"text-sm text-orange-600 font-medium\">Down Payment (est)</div>\n                    <div className=\"text-2xl font-bold text-orange-700\">\n                      {formatCurrency(selectedProperty.downPaymentAmount)}\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"bg-gray-50 rounded-lg p-4\">\n                  <div className=\"grid grid-cols-3 gap-4 text-center text-sm\">\n                    <div>\n                      <div className=\"font-semibold text-gray-800\">{formatCurrency(selectedProperty.listPrice)}</div>\n                      <div className=\"text-gray-600\">List Price (est)</div>\n                    </div>\n                    <div>\n                      <div className=\"font-semibold text-gray-800\">{selectedProperty.interestRate}%</div>\n                      <div className=\"text-gray-600\">APR (est)</div>\n                    </div>\n                    <div>\n                      <div className=\"font-semibold text-gray-800\">{selectedProperty.termYears} years</div>\n                      <div className=\"text-gray-600\">Term (est)</div>\n                    </div>\n                  </div>\n                </div>\n\n                {selectedProperty.description && (\n                  <div className=\"bg-blue-50 rounded-lg p-4\">\n                    <h4 className=\"font-semibold text-gray-800 mb-2\">Description</h4>\n                    <p className=\"text-gray-700 leading-relaxed\">{selectedProperty.description}</p>\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/app/dashboard/liked/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ExtendedSession' is defined but never used.","line":7,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'profile' is assigned a value but never used.","line":33,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":33,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":41,"column":75,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":41,"endColumn":78,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1170,1173],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1170,1173],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":41,"column":95,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":41,"endColumn":98,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1190,1193],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1190,1193],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":48,"column":68,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":48,"endColumn":71,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1411,1414],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1411,1414],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":48,"column":88,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":48,"endColumn":91,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1431,1434],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1431,1434],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":68,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":68,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":86,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":86,"endColumn":19},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":167,"column":21,"nodeType":"JSXOpeningElement","endLine":179,"endColumn":23}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useEffect } from 'react';\nimport { useSession, signOut } from 'next-auth/react';\nimport { useRouter } from 'next/navigation';\nimport Link from 'next/link';\nimport { ExtendedSession, isExtendedSession } from '@/types/session';\n\nimport { PropertyListing } from '@/lib/property-schema';\n\ntype Property = PropertyListing & {\n  isLiked: boolean;\n  zillowImageUrl?: string;\n  imageUrl?: string;\n};\n\ninterface BuyerProfile {\n  firstName: string;\n  lastName: string;\n  email: string;\n  phone?: string;\n  city: string;\n  maxMonthlyPayment?: number;\n  maxDownPayment?: number;\n  likedProperties?: string[];\n}\n\nexport default function LikedProperties() {\n  const { data: session, status } = useSession();\n  const router = useRouter();\n  \n  const [properties, setProperties] = useState<Property[]>([]);\n  const [profile, setProfile] = useState<BuyerProfile | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n\n  // Auth check\n  useEffect(() => {\n    if (status === 'unauthenticated') {\n      router.push('/auth/signin');\n    } else if (status === 'authenticated' && isExtendedSession(session as any) && (session as any)?.user?.role !== 'buyer') {\n      router.push('/auth/signin');\n    }\n  }, [status, session, router]);\n\n  // Load liked properties\n  useEffect(() => {\n    if (status === 'authenticated' && isExtendedSession(session as any) && (session as any)?.user?.role === 'buyer') {\n      loadLikedProperties();\n    }\n  }, [status, session]);\n\n  const loadLikedProperties = async () => {\n    try {\n      setLoading(true);\n\n      const response = await fetch('/api/buyer/liked-properties');\n      const data = await response.json();\n\n      if (data.error) {\n        setError(data.error);\n      } else {\n        setProperties(data.likedProperties || []);\n        setProfile(data.profile);\n        \n      }\n\n    } catch (err) {\n      setError('Failed to load your liked properties');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const removeLike = async (propertyId: string) => {\n    try {\n      const response = await fetch('/api/buyer/like-property', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ propertyId, action: 'unlike' })\n      });\n\n      if (response.ok) {\n        setProperties(prev => prev.filter(p => p.id !== propertyId));\n      }\n    } catch (error) {\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-slate-900 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"w-16 h-16 border-4 border-emerald-400 border-t-transparent rounded-full animate-spin mx-auto mb-6\"></div>\n          <div className=\"text-2xl font-bold text-white mb-2\">LOADING SAVED HOMES</div>\n          <p className=\"text-slate-400 font-medium\">Finding your liked properties...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-slate-900\">\n      {/* Header with Navigation */}\n      <header className=\"relative z-20 bg-slate-800/50 backdrop-blur-lg border-b border-slate-700/50 px-6 py-4\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-xl font-black text-white\">SAVED HOMES</h1>\n            <p className=\"text-sm text-slate-400 mt-1 font-semibold\">\n              {properties.length} SAVED {properties.length === 1 ? 'PROPERTY' : 'PROPERTIES'}\n            </p>\n          </div>\n          \n          <div className=\"flex items-center space-x-6\">\n            <div className=\"flex space-x-4\">\n              <Link href=\"/dashboard\" className=\"flex flex-col items-center group\">\n                <div className=\"w-12 h-12 bg-slate-700/50 hover:bg-slate-600/50 rounded-xl flex items-center justify-center transition-colors group-hover:scale-110\">\n                  <span className=\"text-slate-300 text-xl\">üè†</span>\n                </div>\n                <span className=\"text-xs font-bold text-slate-400 mt-1\">BROWSE</span>\n              </Link>\n              \n              <Link href=\"/dashboard/liked\" className=\"flex flex-col items-center group\">\n                <div className=\"w-12 h-12 bg-gradient-to-br from-emerald-500 to-emerald-600 rounded-xl flex items-center justify-center shadow-lg group-hover:scale-110 transition-transform\">\n                  <span className=\"text-white text-xl\">‚ô•</span>\n                </div>\n                <span className=\"text-xs font-bold text-emerald-400 mt-1\">SAVED</span>\n              </Link>\n              \n              <Link href=\"/dashboard/settings\" className=\"flex flex-col items-center group\">\n                <div className=\"w-12 h-12 bg-slate-700/50 hover:bg-slate-600/50 rounded-xl flex items-center justify-center transition-colors group-hover:scale-110\">\n                  <span className=\"text-slate-300 text-xl\">‚öô</span>\n                </div>\n                <span className=\"text-xs font-bold text-slate-400 mt-1\">SETTINGS</span>\n              </Link>\n            </div>\n            \n            <button\n              onClick={() => signOut({ callbackUrl: '/auth/signin' })}\n              className=\"flex flex-col items-center group\"\n            >\n              <div className=\"w-12 h-12 bg-slate-700/50 hover:bg-red-600/30 rounded-xl flex items-center justify-center transition-all group-hover:scale-110 duration-300\">\n                <span className=\"text-slate-300 group-hover:text-red-400 text-xl transition-colors\">‚èª</span>\n              </div>\n              <span className=\"text-xs font-bold text-slate-400 group-hover:text-red-400 mt-1 transition-colors\">LOGOUT</span>\n            </button>\n          </div>\n        </div>\n      </header>\n      \n      <main className=\"px-4 pb-8 pt-6\">\n        <div className=\"max-w-7xl mx-auto\">\n          {/* Error State */}\n          {error && (\n            <div className=\"bg-red-600/20 backdrop-blur-lg border border-red-500/30 rounded-xl p-4 mb-6\">\n              <p className=\"text-red-300 font-semibold\">{error}</p>\n            </div>\n          )}\n\n          {/* Liked Properties Grid */}\n          {properties.length > 0 ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {properties.map((property) => (\n                <div key={property.id} className=\"bg-slate-800/50 backdrop-blur-lg border border-slate-700/50 rounded-2xl overflow-hidden shadow-2xl\">\n                  {/* Property Image */}\n                  <div className=\"w-full h-48 bg-slate-700 overflow-hidden relative\">\n                    <img\n                      src={\n                        property.zillowImageUrl || \n                        property.imageUrl ||\n                        `https://maps.googleapis.com/maps/api/streetview?size=400x300&location=${encodeURIComponent(property.address + ', ' + property.city + ', ' + property.state)}&key=${process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY}`\n                      }\n                      alt={property.address}\n                      className=\"w-full h-full object-cover\"\n                      onError={(e) => {\n                        const target = e.target as HTMLImageElement;\n                        target.src = `https://maps.googleapis.com/maps/api/streetview?size=400x300&location=${encodeURIComponent(property.address + ', ' + property.city + ', ' + property.state)}&key=${process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY}`;\n                      }}\n                    />\n                    <div className=\"absolute inset-0 bg-gradient-to-t from-black/50 via-transparent to-transparent\"></div>\n                    <div className=\"absolute top-3 right-3 bg-gradient-to-r from-red-500 to-red-600 text-white px-3 py-2 rounded-xl text-sm font-bold shadow-xl border border-red-400/30\">\n                      ‚ù§Ô∏è SAVED\n                    </div>\n                  </div>\n                  \n                  <div className=\"p-6\">\n                    <h3 className=\"text-lg font-bold text-white mb-2\">\n                      {property.address.toUpperCase()}\n                    </h3>\n                    <p className=\"text-slate-300 mb-4 font-semibold\">\n                      {property.city}, {property.state}\n                    </p>\n                    \n                    <div className=\"space-y-3 mb-4\">\n                      <div className=\"flex justify-between items-center\">\n                        <span className=\"text-slate-400 font-semibold\">List Price:</span>\n                        <span className=\"font-bold text-white text-lg\">${property.listPrice?.toLocaleString()}</span>\n                      </div>\n                      <div className=\"flex justify-between items-center\">\n                        <span className=\"text-slate-400 font-semibold\">Monthly:</span>\n                        <span className=\"font-bold text-emerald-400 text-lg\">${Math.ceil(property.monthlyPayment || 0).toLocaleString()} est</span>\n                      </div>\n                      <div className=\"flex justify-between items-center\">\n                        <span className=\"text-slate-400 font-semibold\">Down:</span>\n                        <span className=\"font-bold text-blue-400 text-lg\">${property.downPaymentAmount?.toLocaleString()} est</span>\n                      </div>\n                    </div>\n\n                    <div className=\"flex justify-between text-sm text-slate-400 mb-4 font-semibold\">\n                      <span>{property.bedrooms} BED</span>\n                      <span>{property.bathrooms} BATH</span>\n                      <span>{property.squareFeet?.toLocaleString()} SQ FT</span>\n                    </div>\n\n                    <div className=\"grid grid-cols-3 gap-2\">\n                      <button \n                        onClick={() => removeLike(property.id)}\n                        className=\"bg-red-600/20 hover:bg-red-600/30 text-red-400 py-2 px-3 rounded-lg transition-all hover:scale-105 font-bold border border-red-500/30 text-sm\"\n                      >\n                        REMOVE\n                      </button>\n                      \n                      <button \n                        onClick={() => {\n                          const message = `I&apos;m interested in the property at ${property.address}, ${property.city}, ${property.state}. Found through OwnerFi.`;\n                          window.open(`sms:+1234567890&body=${encodeURIComponent(message)}`, '_self');\n                        }}\n                        className=\"bg-gradient-to-r from-emerald-500 to-emerald-600 hover:from-emerald-400 hover:to-emerald-500 text-white py-2 px-3 rounded-lg transition-all hover:scale-105 font-bold text-sm\"\n                      >\n                        CONTACT\n                      </button>\n\n                      <button\n                        onClick={() => {\n                          const searchQuery = `${property.address}, ${property.city}, ${property.state}`;\n                          window.open(`https://www.google.com/search?q=${encodeURIComponent(searchQuery)}`, '_blank');\n                        }}\n                        className=\"bg-blue-600/20 hover:bg-blue-600/30 text-blue-400 py-2 px-3 rounded-lg transition-all hover:scale-105 font-bold text-sm border border-blue-500/30\"\n                      >\n                        MORE INFO\n                      </button>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          ) : (\n            <div className=\"text-center py-16\">\n              <div className=\"w-24 h-24 bg-slate-700/30 rounded-2xl flex items-center justify-center mx-auto mb-6\">\n                <span className=\"text-4xl\">üíî</span>\n              </div>\n              <h3 className=\"text-2xl font-black text-white mb-4\">NO SAVED PROPERTIES</h3>\n              <p className=\"text-slate-300 mb-8 font-medium text-lg\">\n                Start browsing and save properties you like to see them here.\n              </p>\n              <Link \n                href=\"/dashboard\"\n                className=\"inline-flex items-center px-8 py-4 bg-gradient-to-r from-emerald-500 to-emerald-600 hover:from-emerald-400 hover:to-emerald-500 rounded-xl font-bold text-lg transition-all duration-300 hover:scale-105 shadow-2xl shadow-emerald-500/25\"\n              >\n                BROWSE PROPERTIES\n                <svg className=\"ml-2 w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                  <path fillRule=\"evenodd\" d=\"M10.293 5.293a1 1 0 011.414 0l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414-1.414L12.586 11H5a1 1 0 110-2h7.586l-2.293-2.293a1 1 0 010-1.414z\" clipRule=\"evenodd\" />\n                </svg>\n              </Link>\n            </div>\n          )}\n        </div>\n      </main>\n\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/app/dashboard/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ExtendedSession' is defined but never used.","line":7,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":25},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":53,"column":75,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":53,"endColumn":78,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1449,1452],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1449,1452],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":53,"column":95,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":53,"endColumn":98,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1469,1472],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1469,1472],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":60,"column":68,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":60,"endColumn":71,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1667,1670],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1667,1670],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":60,"column":88,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":60,"endColumn":91,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1687,1690],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1687,1690],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadData'. Either include it or remove the dependency array.","line":63,"column":6,"nodeType":"ArrayExpression","endLine":63,"endColumn":23,"suggestions":[{"desc":"Update the dependencies array to be: [status, session, loadData]","fix":{"range":[1748,1765],"text":"[status, session, loadData]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":87,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":87,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":112,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":112,"endColumn":19},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":233,"column":15,"nodeType":"JSXOpeningElement","endLine":242,"endColumn":17}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useEffect } from 'react';\nimport { useSession, signOut } from 'next-auth/react';\nimport { useRouter } from 'next/navigation';\nimport Link from 'next/link';\nimport { ExtendedSession, isExtendedSession } from '@/types/session';\n\ninterface BuyerProfile {\n  id: string;\n  firstName: string;\n  lastName: string;\n  phone: string;\n  city: string;\n  state?: string;\n  maxMonthlyPayment: number;\n  maxDownPayment: number;\n}\n\ninterface Property {\n  id: string;\n  address: string;\n  city: string;\n  state: string;\n  bedrooms: number;\n  bathrooms: number;\n  squareFeet?: number;\n  listPrice?: number;\n  monthlyPayment?: number;\n  downPaymentAmount?: number;\n  zillowImageUrl?: string;\n  imageUrl?: string;\n  displayTag?: string;\n  matchReason?: string;\n  resultType?: 'direct' | 'nearby' | 'liked';\n  isLiked?: boolean;\n}\n\nexport default function Dashboard() {\n  const { data: session, status } = useSession();\n  const router = useRouter();\n  \n  const [profile, setProfile] = useState<BuyerProfile | null>(null);\n  const [properties, setProperties] = useState<Property[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [likedProperties, setLikedProperties] = useState<string[]>([]);\n  const [currentIndex, setCurrentIndex] = useState(0);\n\n  // Auth check\n  useEffect(() => {\n    if (status === 'unauthenticated') {\n      router.push('/');\n    } else if (status === 'authenticated' && isExtendedSession(session as any) && (session as any)?.user?.role !== 'buyer') {\n      router.push('/');\n    }\n  }, [status, session, router]);\n\n  // Load data\n  useEffect(() => {\n    if (status === 'authenticated' && isExtendedSession(session as any) && (session as any)?.user?.role === 'buyer') {\n      loadData();\n    }\n  }, [status, session]);\n\n  const loadData = async () => {\n    try {\n      setLoading(true);\n\n      const profileRes = await fetch('/api/buyer/profile');\n      const profileData = await profileRes.json();\n\n      if (!profileData.profile) {\n        router.push('/dashboard/setup');\n        return;\n      }\n\n      setProfile(profileData.profile);\n      setLikedProperties(profileData.profile.likedProperties || []);\n\n      const propertiesRes = await fetch(\n        `/api/buyer/properties?city=${encodeURIComponent(profileData.profile.city)}&state=${encodeURIComponent(profileData.profile.state || 'TX')}&maxMonthlyPayment=${profileData.profile.maxMonthlyPayment}&maxDownPayment=${profileData.profile.maxDownPayment}`\n      );\n      const propertiesData = await propertiesRes.json();\n\n      setProperties(propertiesData.properties || []);\n      \n    } catch (err) {\n      // Error loading properties\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const toggleLike = async (propertyId: string) => {\n    try {\n      const isLiked = likedProperties.includes(propertyId);\n      const action = isLiked ? 'unlike' : 'like';\n\n      const response = await fetch('/api/buyer/like-property', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ propertyId, action })\n      });\n\n      if (response.ok) {\n        if (isLiked) {\n          setLikedProperties(prev => prev.filter(id => id !== propertyId));\n        } else {\n          setLikedProperties(prev => [...prev, propertyId]);\n        }\n      }\n    } catch (error) {\n      // Error updating like status\n    }\n  };\n\n  const nextProperty = () => {\n    if (currentIndex < properties.length - 1) {\n      setCurrentIndex(prev => prev + 1);\n    }\n  };\n\n  const prevProperty = () => {\n    if (currentIndex > 0) {\n      setCurrentIndex(prev => prev - 1);\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-slate-900 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"w-16 h-16 border-4 border-emerald-400 border-t-transparent rounded-full animate-spin mx-auto mb-6\"></div>\n          <div className=\"text-2xl font-bold text-white mb-2\">SCANNING PROPERTIES</div>\n          <p className=\"text-slate-400 font-medium\">Finding owner-financed homes in your area...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!properties.length) {\n    return (\n      <div className=\"min-h-screen bg-slate-900 flex flex-col items-center justify-center p-6\">\n        <div className=\"text-center max-w-md\">\n          <div className=\"w-32 h-32 bg-slate-800/50 backdrop-blur-lg border border-slate-700/50 rounded-2xl flex items-center justify-center mx-auto mb-8\">\n            <span className=\"text-6xl\">üè†</span>\n          </div>\n          <h2 className=\"text-3xl font-black text-white mb-4\">\n            NO PROPERTIES FOUND\n          </h2>\n          <p className=\"text-slate-300 mb-8 leading-relaxed text-lg\">\n            No owner-financed properties in <span className=\"text-emerald-400 font-bold\">{profile?.city}</span> match your criteria. Expand your search parameters.\n          </p>\n          <Link \n            href=\"/dashboard/settings\" \n            className=\"inline-flex items-center px-8 py-4 bg-gradient-to-r from-emerald-500 to-emerald-600 hover:from-emerald-400 hover:to-emerald-500 rounded-xl font-bold text-lg transition-all duration-300 hover:scale-105 shadow-2xl shadow-emerald-500/25\"\n          >\n            ADJUST SEARCH CRITERIA\n            <svg className=\"ml-2 w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n              <path fillRule=\"evenodd\" d=\"M10.293 5.293a1 1 0 011.414 0l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414-1.414L12.586 11H5a1 1 0 110-2h7.586l-2.293-2.293a1 1 0 010-1.414z\" clipRule=\"evenodd\" />\n            </svg>\n          </Link>\n        </div>\n      </div>\n    );\n  }\n\n  const currentProperty = properties[currentIndex];\n\n  return (\n    <div className=\"min-h-screen bg-slate-900 text-white\" style={{zoom: '0.85'}}>\n      {/* Dark Header */}\n      <header className=\"relative z-20 bg-slate-800/50 backdrop-blur-lg border-b border-slate-700/50 px-6 py-4\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-xl font-black text-white\">{profile?.city?.toUpperCase()}</h1>\n            <p className=\"text-sm text-slate-400 mt-1 font-semibold\">{currentIndex + 1} OF {properties.length} PROPERTIES</p>\n          </div>\n          \n          <div className=\"flex items-center space-x-6\">\n            <div className=\"flex space-x-4\">\n              <Link href=\"/dashboard\" className=\"flex flex-col items-center group\">\n                <div className=\"w-12 h-12 bg-gradient-to-br from-emerald-500 to-emerald-600 rounded-xl flex items-center justify-center shadow-lg group-hover:scale-110 transition-transform\">\n                  <span className=\"text-white text-xl\">üè†</span>\n                </div>\n                <span className=\"text-xs font-bold text-emerald-400 mt-1\">BROWSE</span>\n              </Link>\n              \n              <Link href=\"/dashboard/liked\" className=\"flex flex-col items-center group\">\n                <div className=\"w-12 h-12 bg-slate-700/50 hover:bg-slate-600/50 rounded-xl flex items-center justify-center transition-colors group-hover:scale-110\">\n                  <span className=\"text-slate-300 text-xl\">‚ô•</span>\n                </div>\n                <span className=\"text-xs font-bold text-slate-400 mt-1\">SAVED</span>\n              </Link>\n              \n              <Link href=\"/dashboard/settings\" className=\"flex flex-col items-center group\">\n                <div className=\"w-12 h-12 bg-slate-700/50 hover:bg-slate-600/50 rounded-xl flex items-center justify-center transition-colors group-hover:scale-110\">\n                  <span className=\"text-slate-300 text-xl\">‚öô</span>\n                </div>\n                <span className=\"text-xs font-bold text-slate-400 mt-1\">SETTINGS</span>\n              </Link>\n            </div>\n            \n            <button\n              onClick={() => signOut({ callbackUrl: '/auth/signin' })}\n              className=\"flex flex-col items-center group\"\n            >\n              <div className=\"w-12 h-12 bg-slate-700/50 hover:bg-red-600/30 rounded-xl flex items-center justify-center transition-all group-hover:scale-110 duration-300\">\n                <span className=\"text-slate-300 group-hover:text-red-400 text-xl transition-colors\">‚èª</span>\n              </div>\n              <span className=\"text-xs font-bold text-slate-400 group-hover:text-red-400 mt-1 transition-colors\">LOGOUT</span>\n            </button>\n          </div>\n        </div>\n      </header>\n\n      {/* Main Content */}\n      <main className=\"relative px-4 pt-6 pb-4\">\n        {/* Property Card Stack */}\n        <div className=\"relative max-w-md mx-auto\">\n          {/* Background Cards for Stack Effect */}\n          {currentIndex < properties.length - 1 && (\n            <div className=\"absolute inset-0 bg-slate-800/30 rounded-2xl shadow-xl transform rotate-1 scale-95 z-10 border border-slate-700/50\"></div>\n          )}\n          {currentIndex < properties.length - 2 && (\n            <div className=\"absolute inset-0 bg-slate-800/20 rounded-2xl shadow-lg transform -rotate-1 scale-90 z-5 border border-slate-700/30\"></div>\n          )}\n          \n          {/* Main Property Card */}\n          <div className=\"relative bg-slate-800/50 backdrop-blur-lg border border-slate-700/50 rounded-2xl shadow-2xl overflow-hidden z-20\" style={{height: '700px'}}>\n            {/* Property Image */}\n            <div className=\"relative h-80 overflow-hidden\">\n              <img\n                src={\n                  currentProperty.zillowImageUrl || \n                  currentProperty.imageUrl ||\n                  `https://maps.googleapis.com/maps/api/streetview?size=600x400&location=${encodeURIComponent(currentProperty.address + ', ' + currentProperty.city + ', ' + currentProperty.state)}&key=${process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY}`\n                }\n                alt={currentProperty.address}\n                className=\"w-full h-full object-cover\"\n                loading=\"lazy\"\n              />\n              \n              {/* Gradient Overlay */}\n              <div className=\"absolute inset-0 bg-gradient-to-t from-black/70 via-black/20 to-transparent\"></div>\n              \n              {/* Property Tags */}\n              <div className=\"absolute top-4 right-4 flex flex-col gap-2\">\n                {/* Display Tag (liked, nearby, etc.) */}\n                {currentProperty.displayTag && (\n                  <div className={`px-4 py-2 rounded-xl text-sm font-bold shadow-xl border ${\n                    currentProperty.displayTag.includes('‚ù§Ô∏è') \n                      ? 'bg-gradient-to-r from-red-500 to-red-600 text-white border-red-400/30'\n                      : currentProperty.displayTag === 'Nearby'\n                      ? 'bg-gradient-to-r from-blue-500 to-blue-600 text-white border-blue-400/30'\n                      : currentProperty.displayTag.includes('Over Budget')\n                      ? 'bg-gradient-to-r from-orange-500 to-orange-600 text-white border-orange-400/30'\n                      : 'bg-gradient-to-r from-emerald-500 to-emerald-600 text-white border-emerald-400/30'\n                  }`}>\n                    {currentProperty.displayTag}\n                  </div>\n                )}\n                \n                {/* Legacy Like Badge - show only if no displayTag with heart */}\n                {likedProperties.includes(currentProperty.id) && !currentProperty.displayTag?.includes('‚ù§Ô∏è') && (\n                  <div className=\"bg-gradient-to-r from-red-500 to-red-600 text-white px-4 py-2 rounded-xl text-sm font-bold shadow-xl border border-red-400/30\">\n                    ‚ù§Ô∏è SAVED\n                  </div>\n                )}\n              </div>\n              \n              {/* Property Title Overlay */}\n              <div className=\"absolute bottom-4 left-4 right-4 text-white\">\n                <h2 className=\"text-2xl font-black mb-2 leading-tight\">\n                  {currentProperty.address.toUpperCase()}\n                </h2>\n                <p className=\"text-slate-300 text-sm font-semibold\">\n                  {currentProperty.city.toUpperCase()}, {currentProperty.state}\n                </p>\n              </div>\n            </div>\n\n            {/* Property Details */}\n            <div className=\"p-6 space-y-6\">\n              {/* Quick Stats */}\n              <div className=\"flex justify-around bg-slate-700/50 backdrop-blur-lg rounded-xl p-4 border border-slate-600/50\">\n                <div className=\"text-center\">\n                  <div className=\"text-3xl font-black text-emerald-400\">{currentProperty.bedrooms}</div>\n                  <div className=\"text-xs text-slate-400 font-bold\">BEDROOMS</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-3xl font-black text-emerald-400\">{currentProperty.bathrooms}</div>\n                  <div className=\"text-xs text-slate-400 font-bold\">BATHROOMS</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-black text-emerald-400\">\n                    {currentProperty.squareFeet?.toLocaleString() || '1,140'}\n                  </div>\n                  <div className=\"text-xs text-slate-400 font-bold\">SQ FT</div>\n                </div>\n              </div>\n\n              {/* Pricing Grid */}\n              <div className=\"space-y-4\">\n                <div className=\"bg-slate-700/50 backdrop-blur-lg rounded-xl p-4 border border-slate-600/50\">\n                  <div className=\"text-center\">\n                    <div className=\"text-xs text-slate-400 font-bold mb-2\">LIST PRICE</div>\n                    <div className=\"text-3xl font-black text-white\">\n                      ${currentProperty.listPrice?.toLocaleString() || '260,000'}\n                    </div>\n                  </div>\n                </div>\n                \n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"bg-gradient-to-br from-emerald-600/20 to-emerald-700/20 backdrop-blur-lg rounded-xl p-4 text-center border border-emerald-500/30\">\n                    <div className=\"text-xs text-emerald-400 font-bold mb-1\">MONTHLY</div>\n                    <div className=\"text-xl font-black text-emerald-300\">\n                      ${currentProperty.monthlyPayment ? Math.ceil(currentProperty.monthlyPayment).toLocaleString() : '1,403'}\n                    </div>\n                    <div className=\"text-xs text-emerald-400/70 font-semibold\">ESTIMATED</div>\n                  </div>\n                  \n                  <div className=\"bg-gradient-to-br from-blue-600/20 to-blue-700/20 backdrop-blur-lg rounded-xl p-4 text-center border border-blue-500/30\">\n                    <div className=\"text-xs text-blue-400 font-bold mb-1\">DOWN</div>\n                    <div className=\"text-xl font-black text-blue-300\">\n                      ${currentProperty.downPaymentAmount?.toLocaleString() || '26,000'}\n                    </div>\n                    <div className=\"text-xs text-blue-400/70 font-semibold\">ESTIMATED</div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Action Buttons */}\n        <div className=\"flex justify-center items-center space-x-4 mt-8 max-w-md mx-auto\">\n          {/* Previous Button */}\n          <button\n            onClick={prevProperty}\n            disabled={currentIndex === 0}\n            className={`w-16 h-16 rounded-xl flex items-center justify-center transition-all shadow-xl border-2 ${\n              currentIndex === 0 \n                ? 'bg-slate-700/30 text-slate-500 border-slate-600/30' \n                : 'bg-slate-700/50 hover:bg-slate-600/50 text-slate-300 hover:text-white border-slate-600/50 hover:border-slate-500 hover:scale-110 active:scale-95'\n            }`}\n          >\n            <span className=\"text-2xl font-bold\">‚Üê</span>\n          </button>\n\n          {/* Pass Button */}\n          <button\n            onClick={nextProperty}\n            disabled={currentIndex === properties.length - 1}\n            className={`w-16 h-16 rounded-xl flex items-center justify-center transition-all shadow-xl border-2 ${\n              currentIndex === properties.length - 1\n                ? 'bg-slate-700/30 text-slate-500 border-slate-600/30'\n                : 'bg-gradient-to-br from-red-600/20 to-red-700/20 hover:from-red-500/30 hover:to-red-600/30 text-red-400 hover:text-red-300 border-red-500/30 hover:border-red-400/50 hover:scale-110 active:scale-95'\n            }`}\n          >\n            <span className=\"text-2xl font-bold\">‚úï</span>\n          </button>\n\n          {/* Love Button */}\n          <button \n            onClick={() => toggleLike(currentProperty.id)}\n            className={`w-20 h-20 rounded-xl flex items-center justify-center transition-all shadow-2xl transform active:scale-95 hover:scale-110 border-2 ${\n              likedProperties.includes(currentProperty.id) \n                ? 'bg-gradient-to-br from-red-500 to-red-600 text-white border-red-400/50 shadow-red-500/30' \n                : 'bg-gradient-to-br from-red-600/20 to-red-700/20 hover:from-red-500/30 hover:to-red-600/30 text-red-400 hover:text-red-300 border-red-500/30 hover:border-red-400/50'\n            }`}\n          >\n            <span className=\"text-3xl\">\n              {likedProperties.includes(currentProperty.id) ? '‚ù§Ô∏è' : '‚ô°'}\n            </span>\n          </button>\n\n          {/* Contact Button */}\n          <button \n            onClick={() => {\n              const message = `I&apos;m interested in ${currentProperty.address}, ${currentProperty.city}, ${currentProperty.state}. Found through OwnerFi.`;\n              window.open(`sms:+1234567890&body=${encodeURIComponent(message)}`, '_self');\n            }}\n            className=\"w-16 h-16 bg-gradient-to-br from-emerald-500 to-emerald-600 hover:from-emerald-400 hover:to-emerald-500 text-white rounded-xl flex items-center justify-center transition-all shadow-2xl shadow-emerald-500/25 transform active:scale-95 hover:scale-110 border-2 border-emerald-400/30\"\n          >\n            <span className=\"text-xl\">üí¨</span>\n          </button>\n\n          {/* Next Button */}\n          <button\n            onClick={nextProperty}\n            disabled={currentIndex === properties.length - 1}\n            className={`w-16 h-16 rounded-xl flex items-center justify-center transition-all shadow-xl border-2 ${\n              currentIndex === properties.length - 1 \n                ? 'bg-slate-700/30 text-slate-500 border-slate-600/30' \n                : 'bg-slate-700/50 hover:bg-slate-600/50 text-slate-300 hover:text-white border-slate-600/50 hover:border-slate-500 hover:scale-110 active:scale-95'\n            }`}\n          >\n            <span className=\"text-2xl font-bold\">‚Üí</span>\n          </button>\n        </div>\n\n        {/* Progress Indicator */}\n        <div className=\"flex justify-center mt-8\">\n          <div className=\"flex space-x-2 bg-slate-800/30 backdrop-blur-lg rounded-full px-4 py-2 border border-slate-700/50\">\n            {properties.map((_, index) => (\n              <div\n                key={index}\n                className={`w-2 h-2 rounded-full transition-all ${\n                  index === currentIndex \n                    ? 'bg-emerald-400 w-8' \n                    : index < currentIndex \n                      ? 'bg-emerald-500/70' \n                      : 'bg-slate-600'\n                }`}\n              />\n            ))}\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/app/dashboard/settings/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":33,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[981,984],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[981,984],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":34,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":34,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1035,1038],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1035,1038],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":44,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":44,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1320,1323],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1320,1323],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":70,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":70,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleInputChange' is assigned a value but never used.","line":88,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":88,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":139,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":139,"endColumn":17}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useEffect } from 'react';\nimport { useSession, signOut } from 'next-auth/react';\nimport { useRouter } from 'next/navigation';\nimport Link from 'next/link';\nimport { GooglePlacesAutocomplete } from '@/components/ui/GooglePlacesAutocomplete';\n\nexport default function BuyerSettings() {\n  const { data: session, status } = useSession();\n  const router = useRouter();\n  const [loading, setLoading] = useState(true);\n  const [saving, setSaving] = useState(false);\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n\n  // SIMPLIFIED FORM DATA\n  const [formData, setFormData] = useState({\n    firstName: '',\n    lastName: '',\n    phone: '',\n    city: '',\n    maxMonthlyPayment: '',\n    maxDownPayment: '',\n  });\n\n  useEffect(() => {\n    if (status === 'unauthenticated') {\n      router.push('/auth/signin');\n    }\n    \n    // Strict role checking - buyers only\n    if (status === 'authenticated' && (session?.user as any)?.role !== 'buyer') {\n      if ((session?.user as any)?.role === 'realtor') {\n        router.push('/realtor/dashboard');\n      } else {\n        router.push('/auth/signin');\n      }\n    }\n  }, [status, router, session]);\n\n  // Load existing buyer profile data\n  useEffect(() => {\n    if (status === 'authenticated' && (session?.user as any)?.role === 'buyer') {\n      loadProfile();\n    }\n  }, [status, session]);\n\n  const loadProfile = async () => {\n    try {\n      setLoading(true);\n      const response = await fetch('/api/buyer/profile');\n      const data = await response.json();\n      \n      if (data.profile) {\n        // Combine city and state for display (e.g., \"Dallas, TX\")\n        const displayCity = data.profile.state \n          ? `${data.profile.city}, ${data.profile.state}`\n          : data.profile.city || '';\n\n        setFormData({\n          firstName: data.profile.firstName || '',\n          lastName: data.profile.lastName || '',\n          phone: data.profile.phone || '',\n          city: displayCity,\n          maxMonthlyPayment: data.profile.maxMonthlyPayment?.toString() || '',\n          maxDownPayment: data.profile.maxDownPayment?.toString() || '',\n        });\n      }\n    } catch (err) {\n      setError('Failed to load your profile');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const formatPhoneNumber = (value: string) => {\n    const phoneNumber = value.replace(/\\D/g, '');\n    if (phoneNumber.length >= 6) {\n      return `(${phoneNumber.slice(0, 3)}) ${phoneNumber.slice(3, 6)}-${phoneNumber.slice(6, 10)}`;\n    } else if (phoneNumber.length >= 3) {\n      return `(${phoneNumber.slice(0, 3)}) ${phoneNumber.slice(3)}`;\n    } else {\n      return phoneNumber;\n    }\n  };\n\n  const handleInputChange = (field: string, value: string | number) => {\n    if (field === 'phone') {\n      const formatted = formatPhoneNumber(String(value));\n      setFormData(prev => ({ ...prev, [field]: formatted }));\n    } else {\n      setFormData(prev => ({ ...prev, [field]: value }));\n    }\n    setError('');\n    setSuccess('');\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setSaving(true);\n    setError('');\n    setSuccess('');\n\n    if (!formData.city || !formData.maxMonthlyPayment || !formData.maxDownPayment) {\n      setError('Please fill in all required fields');\n      setSaving(false);\n      return;\n    }\n\n    try {\n      // Extract city and state from the city string (e.g., \"Dallas, TX\")\n      const cityParts = formData.city.trim().split(',');\n      const city = cityParts[0]?.trim() || formData.city.trim();\n      const state = cityParts[1]?.trim() || 'TX'; // Default to TX if no state provided\n\n      const response = await fetch('/api/buyer/profile', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          city,\n          state,\n          maxMonthlyPayment: Number(formData.maxMonthlyPayment),\n          maxDownPayment: Number(formData.maxDownPayment)\n        }),\n      });\n\n      const data = await response.json();\n      if (data.error) {\n        setError(data.error);\n      } else {\n        setSuccess('Preferences updated successfully!');\n        \n        // Redirect back to dashboard\n        setTimeout(() => {\n          router.push('/dashboard');\n        }, 1500);\n      }\n    } catch (err) {\n      setError('Failed to save preferences');\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  if (status === 'loading' || loading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"w-12 h-12 border-4 border-blue-500 border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n          <p className=\"text-gray-700 font-medium\">Loading settings...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-slate-900\">\n      {/* Header with Navigation */}\n      <header className=\"relative z-20 bg-slate-800/50 backdrop-blur-lg border-b border-slate-700/50 px-6 py-4\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-xl font-black text-white\">SETTINGS</h1>\n            <p className=\"text-sm text-slate-400 mt-1 font-semibold\">UPDATE YOUR SEARCH PREFERENCES</p>\n          </div>\n          \n          <div className=\"flex items-center space-x-6\">\n            <div className=\"flex space-x-4\">\n              <Link href=\"/dashboard\" className=\"flex flex-col items-center group\">\n                <div className=\"w-12 h-12 bg-slate-700/50 hover:bg-slate-600/50 rounded-xl flex items-center justify-center transition-colors group-hover:scale-110\">\n                  <span className=\"text-slate-300 text-xl\">üè†</span>\n                </div>\n                <span className=\"text-xs font-bold text-slate-400 mt-1\">BROWSE</span>\n              </Link>\n              \n              <Link href=\"/dashboard/liked\" className=\"flex flex-col items-center group\">\n                <div className=\"w-12 h-12 bg-slate-700/50 hover:bg-slate-600/50 rounded-xl flex items-center justify-center transition-colors group-hover:scale-110\">\n                  <span className=\"text-slate-300 text-xl\">‚ô•</span>\n                </div>\n                <span className=\"text-xs font-bold text-slate-400 mt-1\">SAVED</span>\n              </Link>\n              \n              <Link href=\"/dashboard/settings\" className=\"flex flex-col items-center group\">\n                <div className=\"w-12 h-12 bg-gradient-to-br from-emerald-500 to-emerald-600 rounded-xl flex items-center justify-center shadow-lg group-hover:scale-110 transition-transform\">\n                  <span className=\"text-white text-xl\">‚öô</span>\n                </div>\n                <span className=\"text-xs font-bold text-emerald-400 mt-1\">SETTINGS</span>\n              </Link>\n            </div>\n            \n            <button\n              onClick={() => signOut({ callbackUrl: '/auth/signin' })}\n              className=\"flex flex-col items-center group\"\n            >\n              <div className=\"w-12 h-12 bg-slate-700/50 hover:bg-red-600/30 rounded-xl flex items-center justify-center transition-all group-hover:scale-110 duration-300\">\n                <span className=\"text-slate-300 group-hover:text-red-400 text-xl transition-colors\">‚èª</span>\n              </div>\n              <span className=\"text-xs font-bold text-slate-400 group-hover:text-red-400 mt-1 transition-colors\">LOGOUT</span>\n            </button>\n          </div>\n        </div>\n      </header>\n\n      {/* Main Content - COMPLETELY REDESIGNED */}\n      <main className=\"px-4 pt-8 pb-8\">\n        <div className=\"max-w-lg mx-auto\">\n          \n          <form onSubmit={handleSubmit} className=\"space-y-8\">\n            {/* Status Messages */}\n            {error && (\n              <div className=\"bg-red-600/20 backdrop-blur-lg border border-red-500/30 rounded-xl p-4\">\n                <p className=\"text-red-300 font-semibold\">{error}</p>\n              </div>\n            )}\n\n            {success && (\n              <div className=\"bg-green-600/20 backdrop-blur-lg border border-green-500/30 rounded-xl p-4\">\n                <p className=\"text-green-300 font-semibold\">{success}</p>\n              </div>\n            )}\n\n            {/* City Selection */}\n            <div className=\"bg-slate-800/50 backdrop-blur-lg border border-slate-700/50 rounded-2xl p-6\">\n              <label className=\"block text-lg font-bold text-white mb-4\">\n                SEARCH LOCATION\n              </label>\n              <GooglePlacesAutocomplete\n                value={formData.city}\n                onChange={(city) => setFormData(prev => ({ ...prev, city }))}\n                placeholder=\"Dallas, TX\"\n              />\n              <p className=\"text-sm text-slate-400 mt-3 font-medium\">\n                Enter the city where you want to find properties\n              </p>\n            </div>\n\n            {/* Budget Settings */}\n            <div className=\"bg-slate-800/50 backdrop-blur-lg border border-slate-700/50 rounded-2xl p-6 space-y-6\">\n              <h3 className=\"text-lg font-bold text-white\">BUDGET LIMITS</h3>\n              \n              {/* Monthly Payment */}\n              <div>\n                <label className=\"block text-sm font-semibold text-white mb-3\">\n                  Maximum Monthly Payment\n                </label>\n                <div className=\"bg-emerald-500/10 border border-emerald-400/30 rounded-xl p-4\">\n                  <div className=\"flex items-center\">\n                    <span className=\"text-2xl font-bold text-emerald-400 mr-2\">$</span>\n                    <input\n                      type=\"text\"\n                      required\n                      value={formData.maxMonthlyPayment ? Number(formData.maxMonthlyPayment).toLocaleString() : ''}\n                      onChange={(e) => {\n                        const value = e.target.value.replace(/[^\\d]/g, '');\n                        setFormData(prev => ({ ...prev, maxMonthlyPayment: value }));\n                      }}\n                      className=\"flex-1 text-2xl font-bold text-white bg-transparent border-none outline-none placeholder-slate-400\"\n                      placeholder=\"1,500\"\n                    />\n                  </div>\n                </div>\n              </div>\n\n              {/* Down Payment */}\n              <div>\n                <label className=\"block text-sm font-semibold text-white mb-3\">\n                  Maximum Down Payment\n                </label>\n                <div className=\"bg-emerald-500/10 border border-emerald-400/30 rounded-xl p-4\">\n                  <div className=\"flex items-center\">\n                    <span className=\"text-2xl font-bold text-emerald-400 mr-2\">$</span>\n                    <input\n                      type=\"text\"\n                      required\n                      value={formData.maxDownPayment ? Number(formData.maxDownPayment).toLocaleString() : ''}\n                      onChange={(e) => {\n                        const value = e.target.value.replace(/[^\\d]/g, '');\n                        setFormData(prev => ({ ...prev, maxDownPayment: value }));\n                      }}\n                      className=\"flex-1 text-2xl font-bold text-white bg-transparent border-none outline-none placeholder-slate-400\"\n                      placeholder=\"30,000\"\n                    />\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {/* Save Button */}\n            <button\n              type=\"submit\"\n              disabled={saving}\n              className=\"w-full bg-gradient-to-r from-emerald-500 to-emerald-600 hover:from-emerald-400 hover:to-emerald-500 text-white py-4 px-6 rounded-xl font-bold text-lg transition-all duration-300 hover:scale-105 shadow-2xl shadow-emerald-500/25 disabled:opacity-50 disabled:cursor-not-allowed\"\n            >\n              {saving ? (\n                <span className=\"flex items-center justify-center\">\n                  <div className=\"animate-spin rounded-full h-5 w-5 border-b-2 border-white mr-2\"></div>\n                  UPDATING PREFERENCES...\n                </span>\n              ) : (\n                'UPDATE SEARCH PREFERENCES'\n              )}\n            </button>\n          </form>\n        </div>\n      </main>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/app/dashboard/setup/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":26,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[768,771],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[768,771],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":84,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":84,"endColumn":17}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useEffect } from 'react';\nimport { useSession } from 'next-auth/react';\nimport { useRouter } from 'next/navigation';\nimport { GooglePlacesAutocomplete } from '@/components/ui/GooglePlacesAutocomplete';\nimport Link from 'next/link';\n\nexport default function BuyerSetup() {\n  const { data: session, status } = useSession();\n  const router = useRouter();\n  \n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  \n  const [formData, setFormData] = useState({\n    city: '',\n    maxMonthlyPayment: '',\n    maxDownPayment: ''\n  });\n\n  // Auth check\n  useEffect(() => {\n    if (status === 'unauthenticated') {\n      router.push('/signup');\n    } else if (status === 'authenticated' && (session?.user as any)?.role !== 'buyer') {\n      router.push('/realtor-signup');\n    }\n  }, [status, session, router]);\n\n  if (status === 'loading') {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-slate-900\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-emerald-400\"></div>\n      </div>\n    );\n  }\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setLoading(true);\n    setError('');\n\n    if (!formData.city || !formData.maxMonthlyPayment || !formData.maxDownPayment) {\n      setError('Please fill in all fields');\n      setLoading(false);\n      return;\n    }\n\n    const monthlyBudget = Number(formData.maxMonthlyPayment);\n    const downBudget = Number(formData.maxDownPayment);\n\n    if (monthlyBudget <= 0 || downBudget <= 0) {\n      setError('Budget amounts must be greater than zero');\n      setLoading(false);\n      return;\n    }\n\n    try {\n      // Parse city and state from the city field\n      const cityParts = formData.city.split(',');\n      const city = cityParts[0]?.trim() || formData.city;\n      const state = cityParts[1]?.trim() || 'TX'; // Default to TX\n\n      \n      const response = await fetch('/api/buyer/profile', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          city: city,\n          state: state,\n          maxMonthlyPayment: monthlyBudget,\n          maxDownPayment: downBudget\n        }),\n      });\n\n      const data = await response.json();\n      \n      if (data.error) {\n        setError(data.error);\n      } else {\n        router.push('/dashboard');\n      }\n    } catch (err) {\n      setError('Failed to save your preferences');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-slate-900\" style={{zoom: '0.8'}}>\n      {/* Header */}\n      <header className=\"bg-slate-800/50 backdrop-blur-lg border-b border-slate-700/50 p-4\">\n        <div className=\"flex items-center justify-between max-w-md mx-auto\">\n          <Link href=\"/\" className=\"flex items-center gap-2\">\n            <div className=\"w-8 h-8 bg-gradient-to-br from-emerald-400 to-blue-500 rounded-lg flex items-center justify-center\">\n              <span className=\"text-white font-bold text-sm\">O</span>\n            </div>\n            <span className=\"text-lg font-bold text-white\">OwnerFi</span>\n          </Link>\n          <span className=\"text-slate-400 text-sm\">Setup</span>\n        </div>\n      </header>\n\n      {/* Main Content */}\n      <div style={{ paddingTop: '2rem', paddingBottom: '2rem' }} className=\"px-6\">\n        <div className=\"max-w-md mx-auto w-full\">\n          <div className=\"bg-slate-800/50 backdrop-blur-lg border border-slate-700/50 rounded-2xl p-8 shadow-2xl\">\n            <div className=\"text-center mb-8\">\n              <h1 className=\"text-3xl font-bold text-white mb-3\">Set Your Preferences</h1>\n              <p className=\"text-lg text-white font-normal mb-4\">Tell us what you&apos;re looking for</p>\n            </div>\n\n            {error && (\n              <div className=\"p-4 mb-6 bg-red-600/20 backdrop-blur-lg border border-red-500/30 rounded-xl text-red-300 font-semibold\">\n                {error}\n              </div>\n            )}\n\n            <form onSubmit={handleSubmit} className=\"space-y-6\">\n              <div>\n                <label className=\"block text-sm font-semibold mb-3\" style={{color: 'white'}}>Search Location</label>\n                <GooglePlacesAutocomplete\n                  value={formData.city}\n                  onChange={(city) => setFormData(prev => ({ ...prev, city }))}\n                  placeholder=\"Dallas, TX\"\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-semibold mb-3\" style={{color: 'white'}}>\n                  Maximum Monthly Payment\n                </label>\n                <input\n                  type=\"number\"\n                  value={formData.maxMonthlyPayment}\n                  onChange={(e) => setFormData(prev => ({ ...prev, maxMonthlyPayment: e.target.value }))}\n                  className=\"w-full px-4 py-4 bg-emerald-500/10 border border-emerald-400/30 rounded-xl focus:outline-none focus:ring-2 focus:ring-emerald-400 focus:border-emerald-400 text-white placeholder-slate-400 font-normal\"\n                  placeholder=\"2000\"\n                  min=\"1\"\n                  required\n                />\n                <p className=\"text-slate-400 text-sm mt-2\">\n                  This includes principal, interest, insurance, and taxes\n                </p>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-semibold mb-3\" style={{color: 'white'}}>\n                  Maximum Down Payment\n                </label>\n                <input\n                  type=\"number\"\n                  value={formData.maxDownPayment}\n                  onChange={(e) => setFormData(prev => ({ ...prev, maxDownPayment: e.target.value }))}\n                  className=\"w-full px-4 py-4 bg-emerald-500/10 border border-emerald-400/30 rounded-xl focus:outline-none focus:ring-2 focus:ring-emerald-400 focus:border-emerald-400 text-white placeholder-slate-400 font-normal\"\n                  placeholder=\"50000\"\n                  min=\"1\"\n                  required\n                />\n                <p className=\"text-slate-400 text-sm mt-2\">\n                  The upfront payment you can afford to make\n                </p>\n              </div>\n\n              <button\n                type=\"submit\"\n                disabled={loading}\n                className=\"w-full bg-gradient-to-r from-emerald-500 to-emerald-600 hover:from-emerald-400 hover:to-emerald-500 text-white py-4 px-6 rounded-xl font-semibold text-lg transition-all duration-300 hover:scale-105 shadow-2xl shadow-emerald-500/25 disabled:opacity-50 disabled:cursor-not-allowed mt-8\"\n              >\n                {loading ? 'Setting up...' : 'Show Me Properties'}\n              </button>\n            </form>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/app/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/app/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useEffect' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'router' is assigned a value but never used.","line":11,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":15},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":17,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[546,549],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[546,549],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":165,"column":19,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[8971,9163],"text":"\n                  &quot;Stuck renting for 8 years after my credit got destroyed. Every bank said no. OwnerFi connected us with a seller who understood. Now we&apos;re homeowners!\"\n                "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[8971,9163],"text":"\n                  &ldquo;Stuck renting for 8 years after my credit got destroyed. Every bank said no. OwnerFi connected us with a seller who understood. Now we&apos;re homeowners!\"\n                "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[8971,9163],"text":"\n                  &#34;Stuck renting for 8 years after my credit got destroyed. Every bank said no. OwnerFi connected us with a seller who understood. Now we&apos;re homeowners!\"\n                "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[8971,9163],"text":"\n                  &rdquo;Stuck renting for 8 years after my credit got destroyed. Every bank said no. OwnerFi connected us with a seller who understood. Now we&apos;re homeowners!\"\n                "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":165,"column":174,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[8971,9163],"text":"\n                  \"Stuck renting for 8 years after my credit got destroyed. Every bank said no. OwnerFi connected us with a seller who understood. Now we&apos;re homeowners!&quot;\n                "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[8971,9163],"text":"\n                  \"Stuck renting for 8 years after my credit got destroyed. Every bank said no. OwnerFi connected us with a seller who understood. Now we&apos;re homeowners!&ldquo;\n                "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[8971,9163],"text":"\n                  \"Stuck renting for 8 years after my credit got destroyed. Every bank said no. OwnerFi connected us with a seller who understood. Now we&apos;re homeowners!&#34;\n                "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[8971,9163],"text":"\n                  \"Stuck renting for 8 years after my credit got destroyed. Every bank said no. OwnerFi connected us with a seller who understood. Now we&apos;re homeowners!&rdquo;\n                "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":187,"column":19,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[10599,10777],"text":"\n                  &quot;Self-employed contractors - lenders couldn&apos;t understand our income. We thought homeownership was impossible. OwnerFi closed in 3 weeks!\"\n                "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[10599,10777],"text":"\n                  &ldquo;Self-employed contractors - lenders couldn&apos;t understand our income. We thought homeownership was impossible. OwnerFi closed in 3 weeks!\"\n                "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[10599,10777],"text":"\n                  &#34;Self-employed contractors - lenders couldn&apos;t understand our income. We thought homeownership was impossible. OwnerFi closed in 3 weeks!\"\n                "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[10599,10777],"text":"\n                  &rdquo;Self-employed contractors - lenders couldn&apos;t understand our income. We thought homeownership was impossible. OwnerFi closed in 3 weeks!\"\n                "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":187,"column":160,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[10599,10777],"text":"\n                  \"Self-employed contractors - lenders couldn&apos;t understand our income. We thought homeownership was impossible. OwnerFi closed in 3 weeks!&quot;\n                "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[10599,10777],"text":"\n                  \"Self-employed contractors - lenders couldn&apos;t understand our income. We thought homeownership was impossible. OwnerFi closed in 3 weeks!&ldquo;\n                "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[10599,10777],"text":"\n                  \"Self-employed contractors - lenders couldn&apos;t understand our income. We thought homeownership was impossible. OwnerFi closed in 3 weeks!&#34;\n                "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[10599,10777],"text":"\n                  \"Self-employed contractors - lenders couldn&apos;t understand our income. We thought homeownership was impossible. OwnerFi closed in 3 weeks!&rdquo;\n                "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":209,"column":19,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[12215,12362],"text":"\n                  &quot;Medical bills tanked our credit, but OwnerFi found us a seller who cared more about our story than our score.\"\n                "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[12215,12362],"text":"\n                  &ldquo;Medical bills tanked our credit, but OwnerFi found us a seller who cared more about our story than our score.\"\n                "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[12215,12362],"text":"\n                  &#34;Medical bills tanked our credit, but OwnerFi found us a seller who cared more about our story than our score.\"\n                "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[12215,12362],"text":"\n                  &rdquo;Medical bills tanked our credit, but OwnerFi found us a seller who cared more about our story than our score.\"\n                "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":209,"column":129,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[12215,12362],"text":"\n                  \"Medical bills tanked our credit, but OwnerFi found us a seller who cared more about our story than our score.&quot;\n                "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[12215,12362],"text":"\n                  \"Medical bills tanked our credit, but OwnerFi found us a seller who cared more about our story than our score.&ldquo;\n                "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[12215,12362],"text":"\n                  \"Medical bills tanked our credit, but OwnerFi found us a seller who cared more about our story than our score.&#34;\n                "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[12215,12362],"text":"\n                  \"Medical bills tanked our credit, but OwnerFi found us a seller who cared more about our story than our score.&rdquo;\n                "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":368,"column":83,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[20930,20949],"text":"How We&apos;re Different"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[20930,20949],"text":"How We&lsquo;re Different"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[20930,20949],"text":"How We&#39;re Different"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[20930,20949],"text":"How We&rsquo;re Different"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":423,"column":17,"nodeType":"JSXOpeningElement","endLine":427,"endColumn":19},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":433,"column":66,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[24302,24534],"text":"\n                  I got tired of watching good families get told &quot;NO\" by banks. You pay $2,000 in rent every month without any problems. But when you ask for a $1,700 house payment? \"Sorry, you don&apos;t qualify.\"\n                "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[24302,24534],"text":"\n                  I got tired of watching good families get told &ldquo;NO\" by banks. You pay $2,000 in rent every month without any problems. But when you ask for a $1,700 house payment? \"Sorry, you don&apos;t qualify.\"\n                "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[24302,24534],"text":"\n                  I got tired of watching good families get told &#34;NO\" by banks. You pay $2,000 in rent every month without any problems. But when you ask for a $1,700 house payment? \"Sorry, you don&apos;t qualify.\"\n                "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[24302,24534],"text":"\n                  I got tired of watching good families get told &rdquo;NO\" by banks. You pay $2,000 in rent every month without any problems. But when you ask for a $1,700 house payment? \"Sorry, you don&apos;t qualify.\"\n                "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":433,"column":69,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[24302,24534],"text":"\n                  I got tired of watching good families get told \"NO&quot; by banks. You pay $2,000 in rent every month without any problems. But when you ask for a $1,700 house payment? \"Sorry, you don&apos;t qualify.\"\n                "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[24302,24534],"text":"\n                  I got tired of watching good families get told \"NO&ldquo; by banks. You pay $2,000 in rent every month without any problems. But when you ask for a $1,700 house payment? \"Sorry, you don&apos;t qualify.\"\n                "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[24302,24534],"text":"\n                  I got tired of watching good families get told \"NO&#34; by banks. You pay $2,000 in rent every month without any problems. But when you ask for a $1,700 house payment? \"Sorry, you don&apos;t qualify.\"\n                "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[24302,24534],"text":"\n                  I got tired of watching good families get told \"NO&rdquo; by banks. You pay $2,000 in rent every month without any problems. But when you ask for a $1,700 house payment? \"Sorry, you don&apos;t qualify.\"\n                "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":433,"column":183,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[24302,24534],"text":"\n                  I got tired of watching good families get told \"NO\" by banks. You pay $2,000 in rent every month without any problems. But when you ask for a $1,700 house payment? &quot;Sorry, you don&apos;t qualify.\"\n                "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[24302,24534],"text":"\n                  I got tired of watching good families get told \"NO\" by banks. You pay $2,000 in rent every month without any problems. But when you ask for a $1,700 house payment? &ldquo;Sorry, you don&apos;t qualify.\"\n                "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[24302,24534],"text":"\n                  I got tired of watching good families get told \"NO\" by banks. You pay $2,000 in rent every month without any problems. But when you ask for a $1,700 house payment? &#34;Sorry, you don&apos;t qualify.\"\n                "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[24302,24534],"text":"\n                  I got tired of watching good families get told \"NO\" by banks. You pay $2,000 in rent every month without any problems. But when you ask for a $1,700 house payment? &rdquo;Sorry, you don&apos;t qualify.\"\n                "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":433,"column":214,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[24302,24534],"text":"\n                  I got tired of watching good families get told \"NO\" by banks. You pay $2,000 in rent every month without any problems. But when you ask for a $1,700 house payment? \"Sorry, you don&apos;t qualify.&quot;\n                "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[24302,24534],"text":"\n                  I got tired of watching good families get told \"NO\" by banks. You pay $2,000 in rent every month without any problems. But when you ask for a $1,700 house payment? \"Sorry, you don&apos;t qualify.&ldquo;\n                "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[24302,24534],"text":"\n                  I got tired of watching good families get told \"NO\" by banks. You pay $2,000 in rent every month without any problems. But when you ask for a $1,700 house payment? \"Sorry, you don&apos;t qualify.&#34;\n                "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[24302,24534],"text":"\n                  I got tired of watching good families get told \"NO\" by banks. You pay $2,000 in rent every month without any problems. But when you ask for a $1,700 house payment? \"Sorry, you don&apos;t qualify.&rdquo;\n                "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":450,"column":21,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[25855,25977],"text":"\n                    &quot;Every working family deserves their own home. I&apos;m here to make that happen.\"\n                  "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[25855,25977],"text":"\n                    &ldquo;Every working family deserves their own home. I&apos;m here to make that happen.\"\n                  "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[25855,25977],"text":"\n                    &#34;Every working family deserves their own home. I&apos;m here to make that happen.\"\n                  "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[25855,25977],"text":"\n                    &rdquo;Every working family deserves their own home. I&apos;m here to make that happen.\"\n                  "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":450,"column":102,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[25855,25977],"text":"\n                    \"Every working family deserves their own home. I&apos;m here to make that happen.&quot;\n                  "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[25855,25977],"text":"\n                    \"Every working family deserves their own home. I&apos;m here to make that happen.&ldquo;\n                  "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[25855,25977],"text":"\n                    \"Every working family deserves their own home. I&apos;m here to make that happen.&#34;\n                  "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[25855,25977],"text":"\n                    \"Every working family deserves their own home. I&apos;m here to make that happen.&rdquo;\n                  "},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useEffect } from 'react';\nimport { useSession } from 'next-auth/react';\nimport { useRouter } from 'next/navigation';\nimport Link from 'next/link';\nimport { ExtendedSession, isExtendedSession } from '@/types/session';\n\nexport default function HomePage() {\n  const { data: session, status } = useSession();\n  const router = useRouter();\n\n  // Get dashboard URL for logged-in users\n  const getDashboardUrl = () => {\n    if (status !== 'authenticated' || !session?.user) return null;\n    \n    if (isExtendedSession(session as any)) {\n      const extendedSession = session as unknown as ExtendedSession;\n      if (extendedSession.user.role === 'buyer') return '/dashboard';\n      if (extendedSession.user.role === 'realtor') return '/realtor-dashboard';\n      if (extendedSession.user.role === 'admin') return '/admin';\n    }\n    return '/dashboard';\n  };\n\n  // Show loading state while checking auth\n  if (status === 'loading') {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-slate-900\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-emerald-400\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"bg-slate-900 text-white\">\n      {/* Clean Header */}\n      <nav className=\"bg-slate-800/50 backdrop-blur-lg border-b border-slate-700/50 px-4 py-4\">\n        <div className=\"flex justify-between items-center max-w-md mx-auto\">\n          <div className=\"flex items-center gap-2\">\n            <div className=\"w-8 h-8 bg-gradient-to-br from-emerald-400 to-blue-500 rounded-lg flex items-center justify-center\">\n              <span className=\"text-white font-bold text-sm\">O</span>\n            </div>\n            <span className=\"text-lg font-bold text-white\">OwnerFi</span>\n          </div>\n          {status === 'authenticated' ? (\n            <Link\n              href={getDashboardUrl() || '/dashboard'}\n              className=\"bg-gradient-to-r from-emerald-500 to-emerald-600 hover:from-emerald-400 hover:to-emerald-500 text-white px-4 py-2 rounded-xl font-semibold text-sm transition-all duration-300 hover:scale-105 shadow-lg shadow-emerald-500/25\"\n            >\n              Go to Dashboard\n            </Link>\n          ) : (\n            <Link\n              href=\"/auth/signin\"\n              className=\"text-slate-300 hover:text-white px-3 py-2 rounded-lg text-sm font-medium transition-colors\"\n            >\n              Sign In\n            </Link>\n          )}\n        </div>\n      </nav>\n\n      {/* Hero Section - Compact */}\n      <div className=\"flex flex-col px-6\" style={{ paddingTop: '3rem', paddingBottom: '3rem', minHeight: 'auto' }}>\n        <div className=\"max-w-md mx-auto text-center\">\n          <div className=\"bg-slate-800/30 backdrop-blur-sm border border-slate-700/50 rounded-2xl p-8 shadow-2xl\">\n            \n            <h1 className=\"text-3xl font-bold text-white leading-tight mb-4\">\n              Find homes with <span className=\"text-emerald-400\">flexible financing</span>\n            </h1>\n            <p className=\"text-slate-300 text-base leading-relaxed mb-6\">\n              Connect directly with homeowners who offer financing\n            </p>\n\n            <div style={{ display: 'flex', flexDirection: 'column', gap: '2rem', marginBottom: '2rem' }}>\n              <Link\n                href=\"/signup\"\n                className=\"w-full block bg-gradient-to-r from-emerald-600 to-emerald-500 hover:from-emerald-500 hover:to-emerald-400 text-white py-4 px-6 rounded-xl font-semibold text-lg transition-all duration-300 hover:scale-[1.02] shadow-lg hover:shadow-xl\"\n              >\n                Find Your Dream Home\n              </Link>\n\n              <Link\n                href=\"/realtor-signup\"\n                className=\"w-full block bg-transparent border-2 border-slate-500 hover:border-slate-400 hover:bg-slate-700/30 text-white py-4 px-6 rounded-xl font-semibold text-lg transition-all duration-300 hover:scale-[1.02]\"\n              >\n                I&apos;m a Real Estate Agent\n              </Link>\n            </div>\n\n            <div className=\"space-y-3 mb-6\">\n              <div className=\"flex items-center justify-center gap-3 text-slate-300 text-sm\">\n                <div className=\"w-4 h-4 rounded-full bg-emerald-500/20 flex items-center justify-center\">\n                  <div className=\"w-1.5 h-1.5 rounded-full bg-emerald-400\"></div>\n                </div>\n                <span>No credit checks</span>\n              </div>\n              <div className=\"flex items-center justify-center gap-3 text-slate-300 text-sm\">\n                <div className=\"w-4 h-4 rounded-full bg-emerald-500/20 flex items-center justify-center\">\n                  <div className=\"w-1.5 h-1.5 rounded-full bg-emerald-400\"></div>\n                </div>\n                <span>Direct communication</span>\n              </div>\n              <div className=\"flex items-center justify-center gap-3 text-slate-300 text-sm\">\n                <div className=\"w-4 h-4 rounded-full bg-emerald-500/20 flex items-center justify-center\">\n                  <div className=\"w-1.5 h-1.5 rounded-full bg-emerald-400\"></div>\n                </div>\n                <span>Professional support</span>\n              </div>\n            </div>\n\n            <div className=\"bg-slate-800/50 border border-slate-700/30 rounded-xl p-4\">\n              <div className=\"flex items-center justify-center gap-4 text-center\">\n                <div>\n                  <div className=\"text-lg font-bold text-emerald-400\">1,247</div>\n                  <div className=\"text-xs text-slate-400\">homes found</div>\n                </div>\n                <div className=\"w-px h-8 bg-slate-600\"></div>\n                <div className=\"flex items-center gap-1\">\n                  {[...Array(4)].map((_, i) => (\n                    <svg key={i} className=\"w-3 h-3 text-emerald-400 fill-current\" viewBox=\"0 0 20 20\">\n                      <path d=\"M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z\" />\n                    </svg>\n                  ))}\n                  <svg className=\"w-3 h-3 text-emerald-400\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                    <defs>\n                      <linearGradient id=\"partialStar\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n                        <stop offset=\"60%\" stopColor=\"currentColor\" />\n                        <stop offset=\"60%\" stopColor=\"rgb(71, 85, 105)\" />\n                      </linearGradient>\n                    </defs>\n                    <path fill=\"url(#partialStar)\" d=\"M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z\" />\n                  </svg>\n                  <span className=\"text-sm text-slate-300 ml-1 font-medium\">4.6</span>\n                </div>\n              </div>\n            </div>\n\n          </div>\n        </div>\n      </div>\n\n      {/* Customer Success Stories */}\n      <section style={{ padding: '2rem 0' }}>\n        <div className=\"max-w-6xl mx-auto px-6\">\n          \n          {/* Big Card Container for Reviews */}\n          <div className=\"bg-slate-800/30 backdrop-blur-sm border border-slate-700/50 rounded-3xl p-8 shadow-2xl\">\n            <div className=\"text-center\" style={{ marginBottom: '2rem' }}>\n              <h2 className=\"text-2xl font-bold text-white\" style={{ marginBottom: '0.5rem' }}>Real Families, Real Stories</h2>\n              <p className=\"text-slate-400\">From stuck renting to proud homeowners</p>\n            </div>\n            \n            <div className=\"grid md:grid-cols-3\" style={{ gap: '1rem' }}>\n              <div className=\"bg-slate-700/40 rounded-xl p-5 hover:bg-slate-700/50 transition-all duration-300 shadow-lg hover:shadow-xl\">\n                <div className=\"flex items-center gap-1 mb-3\">\n                  {[...Array(5)].map((_, i) => (\n                    <svg key={i} className=\"w-4 h-4 text-emerald-400 fill-current\" viewBox=\"0 0 20 20\">\n                      <path d=\"M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z\" />\n                    </svg>\n                  ))}\n                </div>\n                <p className=\"text-slate-300 text-sm leading-relaxed mb-3\">\n                  \"Stuck renting for 8 years after my credit got destroyed. Every bank said no. OwnerFi connected us with a seller who understood. Now we&apos;re homeowners!\"\n                </p>\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"w-8 h-8 bg-gradient-to-br from-emerald-400 to-blue-500 rounded-full flex items-center justify-center\">\n                    <span className=\"text-white text-xs font-bold\">MJ</span>\n                  </div>\n                  <div>\n                    <p className=\"text-white text-sm font-semibold\">Maria & Jose</p>\n                    <p className=\"text-slate-400 text-xs\">Dallas, TX</p>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"bg-slate-700/40 rounded-xl p-5 hover:bg-slate-700/50 transition-all duration-300 shadow-lg hover:shadow-xl\">\n                <div className=\"flex items-center gap-1 mb-3\">\n                  {[...Array(5)].map((_, i) => (\n                    <svg key={i} className=\"w-4 h-4 text-emerald-400 fill-current\" viewBox=\"0 0 20 20\">\n                      <path d=\"M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z\" />\n                    </svg>\n                  ))}\n                </div>\n                <p className=\"text-slate-300 text-sm leading-relaxed mb-3\">\n                  \"Self-employed contractors - lenders couldn&apos;t understand our income. We thought homeownership was impossible. OwnerFi closed in 3 weeks!\"\n                </p>\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"w-8 h-8 bg-gradient-to-br from-emerald-400 to-blue-500 rounded-full flex items-center justify-center\">\n                    <span className=\"text-white text-xs font-bold\">DK</span>\n                  </div>\n                  <div>\n                    <p className=\"text-white text-sm font-semibold\">David & Karen</p>\n                    <p className=\"text-slate-400 text-xs\">Memphis, TN</p>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"bg-slate-700/40 rounded-xl p-5 hover:bg-slate-700/50 transition-all duration-300 shadow-lg hover:shadow-xl\">\n                <div className=\"flex items-center gap-1 mb-3\">\n                  {[...Array(5)].map((_, i) => (\n                    <svg key={i} className=\"w-4 h-4 text-emerald-400 fill-current\" viewBox=\"0 0 20 20\">\n                      <path d=\"M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z\" />\n                    </svg>\n                  ))}\n                </div>\n                <p className=\"text-slate-300 text-sm leading-relaxed mb-3\">\n                  \"Medical bills tanked our credit, but OwnerFi found us a seller who cared more about our story than our score.\"\n                </p>\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"w-8 h-8 bg-gradient-to-br from-emerald-400 to-blue-500 rounded-full flex items-center justify-center\">\n                    <span className=\"text-white text-xs font-bold\">LT</span>\n                  </div>\n                  <div>\n                    <p className=\"text-white text-sm font-semibold\">Lisa & Tom</p>\n                    <p className=\"text-slate-400 text-xs\">Austin, TX</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"text-center\" style={{ marginTop: '2rem' }}>\n              <p className=\"text-slate-400 text-sm\">Join over 1,200 families who found their path to homeownership</p>\n            </div>\n          </div>\n          \n        </div>\n      </section>\n\n      {/* How It Works - Card-Based Design */}\n      <section style={{ padding: '2rem 0' }}>\n        <div className=\"max-w-6xl mx-auto px-6\">\n          \n          <div className=\"grid lg:grid-cols-2\" style={{ gap: '4rem' }}>\n            \n            {/* For Buyers Card */}\n            <div className=\"bg-slate-800/30 backdrop-blur-sm border border-slate-700/50 rounded-2xl p-8 shadow-2xl hover:shadow-emerald-500/10 transition-all duration-300\">\n              <div className=\"text-center mb-8\">\n                <div className=\"inline-block bg-emerald-500/20 px-4 py-2 rounded-full border border-emerald-400/30 mb-4\">\n                  <span className=\"text-emerald-400 font-semibold text-sm\">FOR HOME BUYERS</span>\n                </div>\n                <h2 className=\"text-2xl font-bold text-white mb-3\">Find Your Dream Home</h2>\n                <p className=\"text-slate-400 text-sm\">Skip the banks, work directly with owners</p>\n              </div>\n              \n              <div style={{ display: 'flex', flexDirection: 'column', gap: '1.5rem', marginBottom: '2rem' }}>\n                <div className=\"flex items-start gap-3\">\n                  <div className=\"w-6 h-6 bg-emerald-400/20 rounded-lg flex items-center justify-center mt-1 flex-shrink-0\">\n                    <div className=\"w-2 h-2 bg-emerald-400 rounded-full\"></div>\n                  </div>\n                  <div>\n                    <h3 className=\"text-white font-semibold mb-1\">Set Preferences</h3>\n                    <p className=\"text-slate-400 text-sm\">Budget and location. No credit checks.</p>\n                  </div>\n                </div>\n\n                <div className=\"flex items-start gap-3\">\n                  <div className=\"w-6 h-6 bg-emerald-400/20 rounded-lg flex items-center justify-center mt-1 flex-shrink-0\">\n                    <div className=\"w-2 h-2 bg-emerald-400 rounded-full\"></div>\n                  </div>\n                  <div>\n                    <h3 className=\"text-white font-semibold mb-1\">Browse Properties</h3>\n                    <p className=\"text-slate-400 text-sm\">Owner-financed homes, direct from sellers.</p>\n                  </div>\n                </div>\n\n                <div className=\"flex items-start gap-3\">\n                  <div className=\"w-6 h-6 bg-emerald-400/20 rounded-lg flex items-center justify-center mt-1 flex-shrink-0\">\n                    <div className=\"w-2 h-2 bg-emerald-400 rounded-full\"></div>\n                  </div>\n                  <div>\n                    <h3 className=\"text-white font-semibold mb-1\">Connect & Close</h3>\n                    <p className=\"text-slate-400 text-sm\">Flexible terms, faster closings.</p>\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"text-center\">\n                <Link\n                  href=\"/signup\"\n                  className=\"inline-block bg-gradient-to-r from-emerald-500 to-emerald-600 hover:from-emerald-400 hover:to-emerald-500 text-white py-3 px-6 rounded-xl font-semibold transition-all duration-300 hover:scale-[1.05] shadow-lg\"\n                >\n                  Find My Dream Home\n                </Link>\n              </div>\n            </div>\n\n            {/* For Realtors Card */}\n            <div className=\"bg-slate-800/30 backdrop-blur-sm border border-slate-700/50 rounded-2xl p-8 shadow-2xl hover:shadow-blue-500/10 transition-all duration-300\">\n              <div className=\"text-center mb-8\">\n                <div className=\"inline-block bg-blue-500/20 px-4 py-2 rounded-full border border-blue-400/30 mb-4\">\n                  <span className=\"text-blue-400 font-semibold text-sm\">FOR REAL ESTATE AGENTS</span>\n                </div>\n                <h2 className=\"text-2xl font-bold text-white mb-3\">Get Qualified Leads</h2>\n                <p className=\"text-slate-400 text-sm\">Turn owner-financed deals into commissions</p>\n              </div>\n              \n              <div style={{ display: 'flex', flexDirection: 'column', gap: '1.25rem', marginBottom: '1.5rem' }}>\n                <div className=\"flex items-start gap-3\">\n                  <div className=\"w-6 h-6 bg-blue-400/20 rounded-lg flex items-center justify-center mt-1 flex-shrink-0\">\n                    <div className=\"w-2 h-2 bg-blue-400 rounded-full\"></div>\n                  </div>\n                  <div>\n                    <h3 className=\"text-white font-semibold mb-1\">Define Service Area</h3>\n                    <p className=\"text-slate-400 text-sm\">Target cities and regions for leads.</p>\n                  </div>\n                </div>\n\n                <div className=\"flex items-start gap-3\">\n                  <div className=\"w-6 h-6 bg-blue-400/20 rounded-lg flex items-center justify-center mt-1 flex-shrink-0\">\n                    <div className=\"w-2 h-2 bg-blue-400 rounded-full\"></div>\n                  </div>\n                  <div>\n                    <h3 className=\"text-white font-semibold mb-1\">Receive Hot Leads</h3>\n                    <p className=\"text-slate-400 text-sm\">Pre-qualified buyers in your area.</p>\n                  </div>\n                </div>\n\n                <div className=\"flex items-start gap-3\">\n                  <div className=\"w-6 h-6 bg-blue-400/20 rounded-lg flex items-center justify-center mt-1 flex-shrink-0\">\n                    <div className=\"w-2 h-2 bg-blue-400 rounded-full\"></div>\n                  </div>\n                  <div>\n                    <h3 className=\"text-white font-semibold mb-1\">Earn Commissions</h3>\n                    <p className=\"text-slate-400 text-sm\">Close deals traditional lenders can&apos;t.</p>\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"text-center\">\n                <Link\n                  href=\"/realtor-signup\"\n                  className=\"inline-block bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-400 hover:to-blue-500 text-white py-3 px-6 rounded-xl font-semibold transition-all duration-300 hover:scale-[1.05] shadow-lg\"\n                >\n                  Start Getting Leads\n                </Link>\n              </div>\n            </div>\n\n          </div>\n        </div>\n      </section>\n\n      {/* About Us Section */}\n      <section style={{ padding: '2rem 0' }}>\n        <div className=\"max-w-6xl mx-auto px-6\">\n          <div className=\"bg-slate-800/30 backdrop-blur-sm border border-slate-700/50 rounded-2xl p-8 shadow-2xl\">\n            <div className=\"text-center mb-8\">\n              <h2 className=\"text-3xl font-bold text-white mb-4\">About OwnerFi</h2>\n              <p className=\"text-slate-300 text-lg leading-relaxed\">\n                Revolutionizing home buying by connecting buyers directly with homeowners who offer financing\n              </p>\n            </div>\n            \n            <div className=\"grid md:grid-cols-2 gap-8 mb-8\">\n              <div>\n                <h3 className=\"text-xl font-semibold text-emerald-400 mb-4\">Our Mission</h3>\n                <p className=\"text-slate-300 leading-relaxed mb-4\">\n                  We believe homeownership shouldn&apos;t be limited by traditional banking requirements. OwnerFi creates a direct marketplace where creditworthy families can connect with homeowners offering flexible financing solutions.\n                </p>\n                <p className=\"text-slate-300 leading-relaxed\">\n                  No more credit score gatekeeping. No more endless bank paperwork. Just real people helping real families achieve the American dream of homeownership.\n                </p>\n              </div>\n              \n              <div>\n                <h3 className=\"text-xl font-semibold text-emerald-400 mb-4\">How We're Different</h3>\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-start gap-3\">\n                    <div className=\"w-5 h-5 bg-emerald-400/20 rounded-lg flex items-center justify-center mt-1\">\n                      <div className=\"w-2 h-2 bg-emerald-400 rounded-full\"></div>\n                    </div>\n                    <div>\n                      <p className=\"text-white font-medium\">Direct Connection</p>\n                      <p className=\"text-slate-400 text-sm\">Buyers and sellers communicate directly, no middleman delays</p>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-start gap-3\">\n                    <div className=\"w-5 h-5 bg-emerald-400/20 rounded-lg flex items-center justify-center mt-1\">\n                      <div className=\"w-2 h-2 bg-emerald-400 rounded-full\"></div>\n                    </div>\n                    <div>\n                      <p className=\"text-white font-medium\">Flexible Terms</p>\n                      <p className=\"text-slate-400 text-sm\">Customized agreements that work for both parties</p>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-start gap-3\">\n                    <div className=\"w-5 h-5 bg-emerald-400/20 rounded-lg flex items-center justify-center mt-1\">\n                      <div className=\"w-2 h-2 bg-emerald-400 rounded-full\"></div>\n                    </div>\n                    <div>\n                      <p className=\"text-white font-medium\">Professional Support</p>\n                      <p className=\"text-slate-400 text-sm\">Real estate agents guide you through every step</p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"bg-slate-700/30 border border-slate-600/30 rounded-xl p-6 text-center\">\n              <p className=\"text-slate-300 text-lg mb-2\">\n                <span className=\"text-emerald-400 font-bold\">1,247</span> families have found their dream homes through owner financing\n              </p>\n              <p className=\"text-slate-400\">Join the movement that&apos;s changing how America buys homes</p>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* About the Founder Section */}\n      <section style={{ padding: '2rem 0' }}>\n        <div className=\"max-w-6xl mx-auto px-6\">\n          <div className=\"bg-slate-800/30 backdrop-blur-sm border border-slate-700/50 rounded-2xl p-8 shadow-2xl\">\n            <div className=\"text-center mb-8\">\n              <h2 className=\"text-3xl font-bold text-white mb-4\">About the Founder</h2>\n            </div>\n            \n            <div className=\"flex flex-col md:flex-row items-center gap-8\">\n              <div className=\"flex-shrink-0\">\n                <img \n                  src=\"/abdullah.png\" \n                  alt=\"Abdullah Abunasrah - Founder of OwnerFi\" \n                  className=\"w-32 h-32 rounded-full object-cover shadow-2xl border-4 border-emerald-400/20\"\n                />\n              </div>\n              \n              <div className=\"flex-1\">\n                <h3 className=\"text-2xl font-bold text-white mb-4\">Abdullah Abunasrah</h3>\n                <p className=\"text-slate-300 leading-relaxed mb-4\">\n                  I got tired of watching good families get told \"NO\" by banks. You pay $2,000 in rent every month without any problems. But when you ask for a $1,700 house payment? \"Sorry, you don&apos;t qualify.\"\n                </p>\n                <p className=\"text-slate-300 leading-relaxed mb-4\">\n                  <strong className=\"text-white\">That makes no sense to me. So I decided to fix it.</strong>\n                </p>\n                <p className=\"text-slate-300 leading-relaxed mb-4\">\n                  Here&apos;s what I believe: If you can pay rent, you can own a home. If you work hard and take care of your family, you deserve a chance. Banks shouldn&apos;t be the ones deciding if you get to live the American Dream.\n                </p>\n                <p className=\"text-slate-300 leading-relaxed mb-4\">\n                  OwnerFi connects you directly with home sellers who understand your story. No more credit score games. No more mountains of paperwork. Just real people helping real families get the keys to their own home.\n                </p>\n                <p className=\"text-slate-300 leading-relaxed mb-6\">\n                  Every month you pay rent, you&apos;re buying someone else a house. With OwnerFi, you can buy your own house instead. Your kids deserve to grow up in a home you own, not one you rent.\n                </p>\n                \n                <div className=\"bg-slate-700/40 border border-slate-600/30 rounded-xl p-4\">\n                  <p className=\"text-emerald-400 font-bold text-center text-lg\">\n                    \"Every working family deserves their own home. I&apos;m here to make that happen.\"\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Minimal Footer */}\n      <footer className=\"bg-slate-800/30 border-t border-slate-700/50 py-6\">\n        <div className=\"max-w-md mx-auto px-6\">\n          <div className=\"flex justify-center gap-6 text-sm\">\n            <a href=\"mailto:support@prosway.com\" className=\"text-slate-400 hover:text-emerald-400 transition-colors\">\n              Contact\n            </a>\n            <a href=\"/terms\" className=\"text-slate-400 hover:text-emerald-400 transition-colors\">\n              Terms\n            </a>\n            <a href=\"/privacy\" className=\"text-slate-400 hover:text-emerald-400 transition-colors\">\n              Privacy\n            </a>\n          </div>\n          <div className=\"text-center mt-4 text-xs text-slate-500\">\n            &copy; 2025 OwnerFi. All rights reserved.\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/app/privacy/page.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":188,"column":88,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[12625,12646],"text":"9. Children&apos;s Privacy"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[12625,12646],"text":"9. Children&lsquo;s Privacy"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[12625,12646],"text":"9. Children&#39;s Privacy"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[12625,12646],"text":"9. Children&rsquo;s Privacy"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":211,"column":167,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[14454,14722],"text":"We may update this Privacy Policy periodically. We will notify you of material changes by posting the updated policy on our website and updating the &quot;Last updated\" date. Your continued use of our services after any changes constitutes acceptance of the updated policy."},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[14454,14722],"text":"We may update this Privacy Policy periodically. We will notify you of material changes by posting the updated policy on our website and updating the &ldquo;Last updated\" date. Your continued use of our services after any changes constitutes acceptance of the updated policy."},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[14454,14722],"text":"We may update this Privacy Policy periodically. We will notify you of material changes by posting the updated policy on our website and updating the &#34;Last updated\" date. Your continued use of our services after any changes constitutes acceptance of the updated policy."},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[14454,14722],"text":"We may update this Privacy Policy periodically. We will notify you of material changes by posting the updated policy on our website and updating the &rdquo;Last updated\" date. Your continued use of our services after any changes constitutes acceptance of the updated policy."},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":211,"column":180,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[14454,14722],"text":"We may update this Privacy Policy periodically. We will notify you of material changes by posting the updated policy on our website and updating the \"Last updated&quot; date. Your continued use of our services after any changes constitutes acceptance of the updated policy."},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[14454,14722],"text":"We may update this Privacy Policy periodically. We will notify you of material changes by posting the updated policy on our website and updating the \"Last updated&ldquo; date. Your continued use of our services after any changes constitutes acceptance of the updated policy."},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[14454,14722],"text":"We may update this Privacy Policy periodically. We will notify you of material changes by posting the updated policy on our website and updating the \"Last updated&#34; date. Your continued use of our services after any changes constitutes acceptance of the updated policy."},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[14454,14722],"text":"We may update this Privacy Policy periodically. We will notify you of material changes by posting the updated policy on our website and updating the \"Last updated&rdquo; date. Your continued use of our services after any changes constitutes acceptance of the updated policy."},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { Header } from '@/components/ui/Header';\nimport { Footer } from '@/components/ui/Footer';\nimport Link from 'next/link';\n\nexport default function PrivacyPolicy() {\n  return (\n    <div className=\"min-h-screen bg-primary-bg\">\n      <Header />\n      \n      <div className=\"max-w-4xl mx-auto px-6 py-16\">\n        <div className=\"bg-white rounded-xl shadow-light p-8 md:p-12\">\n          <h1 className=\"text-4xl font-bold text-primary-text mb-8\">Privacy Policy</h1>\n          <p className=\"text-gray-600 mb-8\">Last updated: September 3, 2025</p>\n          \n          {/* Summary at Top */}\n          <div className=\"bg-blue-50 border border-blue-200 rounded-xl p-6 mb-8\">\n            <h2 className=\"text-2xl font-semibold text-blue-800 mb-4\">üìã Privacy Summary (Key Points)</h2>\n            <ul className=\"space-y-2 text-blue-700\">\n              <li>‚Ä¢ <strong>We collect your personal information and property preferences</strong></li>\n              <li>‚Ä¢ <strong>We sell buyer leads to real estate agents and brokers</strong></li>\n              <li>‚Ä¢ <strong>You may be contacted by multiple real estate professionals</strong></li>\n              <li>‚Ä¢ <strong>We use cookies and tracking technologies</strong></li>\n              <li>‚Ä¢ <strong>We implement security measures but cannot guarantee absolute security</strong></li>\n              <li>‚Ä¢ <strong>You have certain rights regarding your information</strong></li>\n              <li>‚Ä¢ <strong>Once sold to agents, we cannot control how they use your data</strong></li>\n            </ul>\n          </div>\n\n          <div className=\"space-y-8 text-lg leading-relaxed text-gray-700\">\n            \n            <section>\n              <h2 className=\"text-2xl font-semibold text-primary-text mb-4\">1. Who We Are</h2>\n              <p><strong>OwnerFi is operated by Prosway</strong>, headquartered at 5095 Covington Way, Memphis, TN 38134.</p>\n              <p className=\"mt-4\">This Privacy Policy describes how we collect, use, share, and protect your personal information when you use our website and services.</p>\n              <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4 mt-4\">\n                <p className=\"font-medium text-blue-800\">Key Point:</p>\n                <p className=\"text-blue-700 mt-2\">Our business model includes selling buyer lead information to real estate professionals. By using our service, you consent to this practice as described below.</p>\n              </div>\n            </section>\n\n            <section>\n              <h2 className=\"text-2xl font-semibold text-primary-text mb-4\">2. Information We Collect</h2>\n              \n              <div className=\"bg-red-50 border border-red-200 rounded-lg p-4 mb-4\">\n                <p className=\"font-bold text-red-800\">‚ö†Ô∏è DO NOT SUBMIT SENSITIVE DATA</p>\n                <p className=\"text-red-700 mt-2\">Do not submit sensitive personal information such as Social Security numbers, financial account numbers, or health information. We do not request or process such data and disclaim responsibility for any submitted.</p>\n              </div>\n              \n              <h3 className=\"text-xl font-medium text-primary-text mb-3\">Personal Information</h3>\n              <p>We collect personal information you voluntarily provide, including:</p>\n              <ul className=\"list-disc ml-6 mt-2 space-y-1\">\n                <li>Name, email address, and phone number</li>\n                <li>Property preferences and search criteria</li>\n                <li>Budget information and financing preferences</li>\n                <li>Location and geographic preferences</li>\n                <li>Real estate license information (for agents)</li>\n                <li>Payment and billing information</li>\n              </ul>\n\n              <h3 className=\"text-xl font-medium text-primary-text mb-3 mt-6\">Automatically Collected Information</h3>\n              <ul className=\"list-disc ml-6 mt-2 space-y-1\">\n                <li>IP address, browser type, and device information</li>\n                <li>Website usage patterns and analytics data</li>\n                <li>Cookies and similar tracking technologies</li>\n                <li>Geolocation data (if permitted)</li>\n              </ul>\n\n              <h3 className=\"text-xl font-medium text-primary-text mb-3 mt-6\">International Data Transfers</h3>\n              <p>If you access our services from outside the United States, your information will be processed and stored in the U.S.</p>\n            </section>\n\n            <section>\n              <h2 className=\"text-2xl font-semibold text-primary-text mb-4\">3. How We Use Your Information</h2>\n              \n              <div className=\"bg-orange-50 border border-orange-200 rounded-lg p-4 mb-4\">\n                <h3 className=\"font-semibold text-orange-800 mb-2\">PRIMARY BUSINESS USE - LEAD SALES</h3>\n                <p className=\"text-orange-700\">We sell buyer contact information and preferences to licensed real estate agents and brokers. This is our primary revenue source and a core part of our business model.</p>\n              </div>\n\n              <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-4 mb-4\">\n                <p className=\"font-bold text-yellow-800\">üìû TCPA CONSENT & TERMS CROSS-REFERENCE</p>\n                <p className=\"text-yellow-700 mt-2\">By providing your phone number, you consent to receive calls and texts (including via automated systems) as described in our <Link href=\"/terms\" className=\"underline hover:text-yellow-800\">Terms of Service</Link>.</p>\n              </div>\n              \n              <p>We use your information to:</p>\n              <ul className=\"list-disc ml-6 mt-2 space-y-2\">\n                <li><strong>Sell leads to real estate professionals:</strong> Your contact information and property preferences may be sold to licensed agents and brokers in your area</li>\n                <li><strong>Match you with properties:</strong> Connect you with suitable owner-financed properties</li>\n                <li><strong>Provide our services:</strong> Operate and maintain our platform</li>\n                <li><strong>Communicate with you:</strong> Send property updates, marketing communications, and service notifications</li>\n                <li><strong>Process payments:</strong> Handle subscription fees and lead purchases</li>\n                <li><strong>Improve our service:</strong> Analyze usage patterns and optimize our platform</li>\n                <li><strong>Comply with legal obligations:</strong> Meet regulatory and legal requirements</li>\n              </ul>\n            </section>\n\n            <section>\n              <h2 className=\"text-2xl font-semibold text-primary-text mb-4\">4. Information Sharing and Disclosure</h2>\n              \n              <h3 className=\"text-xl font-medium text-primary-text mb-3\">Lead Sales to Real Estate Professionals</h3>\n              <div className=\"bg-red-50 border border-red-200 rounded-lg p-4 mb-4\">\n                <p className=\"font-medium text-red-800\">IMPORTANT:</p>\n                <p className=\"text-red-700 mt-2\">When you register as a buyer, we may sell your information to multiple real estate agents and brokers. You may receive contact from several professionals regarding properties and services.</p>\n              </div>\n              \n              <div className=\"bg-gray-50 border border-gray-200 rounded-lg p-4 mb-4\">\n                <p className=\"font-bold text-gray-800\">üõ°Ô∏è AGENT LIABILITY FIREWALL</p>\n                <p className=\"text-gray-700 mt-2\"><strong>Licensed real estate professionals who purchase leads from us are independent third parties.</strong> We are not responsible for their actions, privacy practices, or how they use your information once sold.</p>\n              </div>\n              \n              <p>Information shared in lead sales includes:</p>\n              <ul className=\"list-disc ml-6 mt-2 space-y-1\">\n                <li>Your name, email, and phone number</li>\n                <li>Property preferences (location, price range, size)</li>\n                <li>Budget and financing information</li>\n                <li>Timeline and urgency indicators</li>\n              </ul>\n\n              <h3 className=\"text-xl font-medium text-primary-text mb-3 mt-6\">Other Sharing</h3>\n              <p>We may also share your information with:</p>\n              <ul className=\"list-disc ml-6 mt-2 space-y-2\">\n                <li><strong>Service providers:</strong> Third-party vendors who help operate our business</li>\n                <li><strong>Payment processors:</strong> Companies that process financial transactions</li>\n                <li><strong>Legal compliance:</strong> When required by law or to protect our rights</li>\n                <li><strong>Business transfers:</strong> In case of merger, acquisition, or asset sale</li>\n                <li><strong>Marketing partners:</strong> Trusted partners who may offer relevant services</li>\n              </ul>\n            </section>\n\n            <section>\n              <h2 className=\"text-2xl font-semibold text-primary-text mb-4\">5. Cookies and Tracking Technologies</h2>\n              <p>We use cookies, web beacons, and similar technologies to:</p>\n              <ul className=\"list-disc ml-6 mt-2 space-y-1\">\n                <li>Remember your preferences and login information</li>\n                <li>Analyze website traffic and user behavior</li>\n                <li>Deliver targeted advertising and marketing</li>\n                <li>Improve website functionality and user experience</li>\n              </ul>\n              <p className=\"mt-4\">You can control cookies through your browser settings, but this may limit some website functionality.</p>\n            </section>\n\n            <section>\n              <h2 className=\"text-2xl font-semibold text-primary-text mb-4\">6. Data Security</h2>\n              <p>We implement reasonable security measures to protect your personal information, including:</p>\n              <ul className=\"list-disc ml-6 mt-2 space-y-1\">\n                <li>Encryption of sensitive data during transmission</li>\n                <li>Secure data storage practices</li>\n                <li>Regular security audits and updates</li>\n                <li>Access controls and authentication measures</li>\n              </ul>\n              <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-4 mt-4\">\n                <p className=\"text-yellow-800\"><strong>Disclaimer:</strong> While we strive to protect your information, no method of transmission or storage is 100% secure. We cannot guarantee absolute security of your data.</p>\n              </div>\n            </section>\n\n            <section>\n              <h2 className=\"text-2xl font-semibold text-primary-text mb-4\">7. Your Rights and Choices</h2>\n              \n              <h3 className=\"text-xl font-medium text-primary-text mb-3\">Communication Preferences</h3>\n              <p>You may:</p>\n              <ul className=\"list-disc ml-6 mt-2 space-y-1\">\n                <li>Unsubscribe from marketing emails using the unsubscribe link</li>\n                <li>Update your communication preferences in your account settings</li>\n                <li>Contact us to modify or delete your account information</li>\n              </ul>\n\n              <h3 className=\"text-xl font-medium text-primary-text mb-3 mt-4\">Important Limitation</h3>\n              <div className=\"bg-red-50 border border-red-200 rounded-lg p-4\">\n                <p className=\"text-red-700\"><strong>Please Note:</strong> If we have already sold your information to real estate professionals, we cannot control how they use or retain that data. You will need to contact them directly regarding their use of your information.</p>\n              </div>\n            </section>\n\n            <section>\n              <h2 className=\"text-2xl font-semibold text-primary-text mb-4\">8. Data Retention</h2>\n              <p>We retain your personal information:</p>\n              <ul className=\"list-disc ml-6 mt-2 space-y-1\">\n                <li>For as long as your account is active</li>\n                <li>As needed to provide our services</li>\n                <li>To comply with legal obligations</li>\n                <li>To resolve disputes and enforce agreements</li>\n              </ul>\n              <p className=\"mt-4\">Even if you delete your account, information previously sold to real estate professionals will remain with those third parties.</p>\n            </section>\n\n            <section>\n              <h2 className=\"text-2xl font-semibold text-primary-text mb-4\">9. Children's Privacy</h2>\n              <p>Our services are not intended for individuals under 18 years of age. We do not knowingly collect personal information from children under 18. If we become aware of such collection, we will take steps to delete the information promptly.</p>\n            </section>\n\n            <section>\n              <h2 className=\"text-2xl font-semibold text-primary-text mb-4\">10. Third-Party Websites</h2>\n              <p>Our website may contain links to third-party websites. We are not responsible for the privacy practices of these external sites. We encourage you to review their privacy policies before providing any personal information.</p>\n            </section>\n\n            <section>\n              <h2 className=\"text-2xl font-semibold text-primary-text mb-4\">11. State-Specific Rights</h2>\n              \n              <h3 className=\"text-xl font-medium text-primary-text mb-3\">State Privacy Rights</h3>\n              <p><strong>If you are a resident of California, Colorado, Virginia, Connecticut, or Utah</strong>, you may have additional rights under applicable privacy laws, including:</p>\n              <ul className=\"list-disc ml-6 mt-2 space-y-1\">\n                <li><strong>California (CCPA):</strong> Right to know, delete, and opt-out of sale of personal information</li>\n                <li><strong>Other States:</strong> Similar rights may apply under state privacy laws</li>\n              </ul>\n              <p className=\"mt-4\"><strong>Important:</strong> Opting out of sales may limit your ability to use our matching services. Contact us for more information about your specific rights.</p>\n            </section>\n\n            <section>\n              <h2 className=\"text-2xl font-semibold text-primary-text mb-4\">12. Changes to This Privacy Policy</h2>\n              <p>We may update this Privacy Policy periodically. We will notify you of material changes by posting the updated policy on our website and updating the \"Last updated\" date. Your continued use of our services after any changes constitutes acceptance of the updated policy.</p>\n            </section>\n\n            <section>\n              <h2 className=\"text-2xl font-semibold text-primary-text mb-4\">13. Contact Information</h2>\n              <p>If you have questions about this Privacy Policy or our privacy practices, please contact us:</p>\n              <div className=\"mt-4 p-4 bg-gray-50 rounded-lg\">\n                <p><strong>Email:</strong> admin@prosway.com</p>\n                <p><strong>Address:</strong> 5095 Covington Way<br />Memphis, TN 38134</p>\n              </div>\n            </section>\n\n            <div className=\"border-t pt-8 mt-8\">\n              <p className=\"text-sm text-gray-500\">\n                By using OwnerFi, you acknowledge that you have read, understood, and agree to this Privacy Policy and our <Link href=\"/terms\" className=\"underline hover:text-gray-700\">Terms of Service</Link>.\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      <Footer />\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/app/providers.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/app/realtor-dashboard/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":82,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":82,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1980,1983],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1980,1983],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":89,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":89,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2173,2176],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2173,2176],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":105,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":105,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":128,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":128,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":179,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":179,"endColumn":19}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useEffect } from 'react';\nimport { useSession, signOut } from 'next-auth/react';\nimport { useRouter } from 'next/navigation';\nimport Link from 'next/link';\n\ninterface BuyerLead {\n  id: string;\n  firstName: string;\n  lastName: string;\n  email: string;\n  phone: string;\n  city: string;\n  state: string;\n  maxMonthlyPayment: number;\n  maxDownPayment: number;\n  matchPercentage?: number;\n  createdAt: string;\n}\n\ninterface OwnedBuyer {\n  id: string;\n  firstName: string;\n  lastName: string;\n  email: string;\n  phone: string;\n  city: string;\n  state: string;\n  maxMonthlyPayment: number;\n  maxDownPayment: number;\n  purchaseDate: string;\n}\n\ninterface Transaction {\n  id: string;\n  description: string;\n  creditsChange: number;\n  runningBalance: number;\n  type: string;\n  createdAt: string;\n}\n\ninterface DashboardData {\n  availableLeads: BuyerLead[];\n  ownedBuyers: OwnedBuyer[];\n  transactions: Transaction[];\n  realtorData: {\n    firstName: string;\n    lastName: string;\n    credits: number;\n    isOnTrial: boolean;\n    trialDaysRemaining: number;\n  };\n}\n\nexport default function RealtorDashboard() {\n  const { data: session, status } = useSession();\n  const router = useRouter();\n  \n  const [dashboardData, setDashboardData] = useState<DashboardData | null>(null);\n  const [activeTab, setActiveTab] = useState<'available' | 'owned' | 'transactions'>('available');\n  const [loading, setLoading] = useState(true);\n  const [purchaseLoading, setPurchaseLoading] = useState<string | null>(null);\n  const [error, setError] = useState('');\n  const [disputeModal, setDisputeModal] = useState<{\n    buyer: OwnedBuyer | null;\n    reason: string;\n    description: string;\n    submitting: boolean;\n  }>({\n    buyer: null,\n    reason: '',\n    description: '',\n    submitting: false\n  });\n\n  // Auth check\n  useEffect(() => {\n    if (status === 'unauthenticated') {\n      router.push('/auth/signin');\n    } else if (status === 'authenticated' && (session?.user as any)?.role !== 'realtor') {\n      router.push('/');\n    }\n  }, [status, session, router]);\n\n  // Load dashboard data\n  useEffect(() => {\n    if (status === 'authenticated' && (session?.user as any)?.role === 'realtor') {\n      loadDashboardData();\n    }\n  }, [status, session]);\n\n  const loadDashboardData = async () => {\n    try {\n      setLoading(true);\n      const response = await fetch('/api/realtor/dashboard');\n      const data = await response.json();\n      \n      if (data.error) {\n        setError(data.error);\n      } else {\n        setDashboardData(data);\n      }\n    } catch (err) {\n      setError('Failed to load dashboard data');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const purchaseLead = async (leadId: string) => {\n    setPurchaseLoading(leadId);\n    try {\n      const response = await fetch('/api/realtor/purchase-lead', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ leadId })\n      });\n\n      const result = await response.json();\n      \n      if (result.success) {\n        await loadDashboardData(); // Refresh data\n      } else {\n        alert(result.error || 'Failed to purchase lead');\n      }\n    } catch (error) {\n      alert('Purchase failed');\n    } finally {\n      setPurchaseLoading(null);\n    }\n  };\n\n  const openDisputeModal = (buyer: OwnedBuyer) => {\n    setDisputeModal({\n      buyer,\n      reason: '',\n      description: '',\n      submitting: false\n    });\n  };\n\n  const closeDisputeModal = () => {\n    setDisputeModal({\n      buyer: null,\n      reason: '',\n      description: '',\n      submitting: false\n    });\n  };\n\n  const submitDispute = async () => {\n    if (!disputeModal.buyer || !disputeModal.reason || !disputeModal.description) {\n      return;\n    }\n\n    setDisputeModal(prev => ({ ...prev, submitting: true }));\n\n    try {\n      const response = await fetch('/api/realtor/dispute-lead', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          buyerId: disputeModal.buyer.id,\n          reason: disputeModal.reason,\n          description: disputeModal.description\n        })\n      });\n\n      const result = await response.json();\n\n      if (result.success) {\n        closeDisputeModal();\n        await loadDashboardData(); // Refresh data\n      } else {\n        alert(result.error || 'Failed to submit dispute');\n      }\n    } catch (error) {\n      alert('Failed to submit dispute');\n    } finally {\n      setDisputeModal(prev => ({ ...prev, submitting: false }));\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-slate-900 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"w-12 h-12 border-4 border-emerald-400 border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n          <div className=\"text-white font-medium\">Loading dashboard...</div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error || !dashboardData) {\n    return (\n      <div className=\"min-h-screen bg-slate-900 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"text-red-400 text-xl mb-4\">‚ö†Ô∏è</div>\n          <div className=\"text-white font-medium\">{error || 'Failed to load dashboard'}</div>\n          <button \n            onClick={() => window.location.reload()} \n            className=\"mt-4 bg-emerald-500 text-white px-4 py-2 rounded-lg hover:bg-emerald-600\"\n          >\n            Retry\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-slate-900\">\n      {/* Clean Header */}\n      <header className=\"bg-slate-800/50 backdrop-blur-lg border-b border-slate-700/50\">\n        {/* Top Row - Logo and Actions */}\n        <div className=\"px-4 py-3 flex items-center justify-between\">\n          <div className=\"flex items-center gap-2\">\n            <div className=\"w-8 h-8 bg-gradient-to-br from-emerald-400 to-blue-500 rounded-lg flex items-center justify-center\">\n              <span className=\"text-white font-bold text-sm\">O</span>\n            </div>\n            <span className=\"text-lg font-bold text-white\">OwnerFi</span>\n          </div>\n          \n          <div className=\"flex items-center gap-2\">\n            <Link\n              href=\"/buy-credits\"\n              className=\"bg-emerald-500 hover:bg-emerald-600 text-white px-3 py-1.5 rounded-lg text-sm font-medium transition-colors\"\n            >\n              {dashboardData.realtorData.credits} Credits\n            </Link>\n            <Link\n              href=\"/realtor-dashboard/settings\"\n              className=\"text-slate-400 hover:text-white transition-colors p-1.5\"\n              title=\"Settings\"\n            >\n              ‚öôÔ∏è\n            </Link>\n            <button\n              onClick={() => signOut({ callbackUrl: '/auth/signin' })}\n              className=\"text-slate-400 hover:text-red-400 transition-colors p-1.5\"\n              title=\"Logout\"\n            >\n              ‚èª\n            </button>\n          </div>\n        </div>\n        \n        {/* Bottom Row - Welcome */}\n        <div className=\"px-4 pb-3\">\n          <div className=\"text-slate-300 text-sm\">Welcome back, <span className=\"text-white font-medium\">{dashboardData.realtorData.firstName}</span></div>\n        </div>\n      </header>\n\n      {/* Main Content */}\n      <main className=\"max-w-6xl mx-auto p-4\">\n        \n        {/* Clean Navigation */}\n        <div className=\"bg-slate-800/30 rounded-xl p-1 mb-6\">\n          <div className=\"flex\">\n            <button\n              onClick={() => setActiveTab('available')}\n              className={`flex-1 text-center py-3 px-4 rounded-lg font-medium transition-all ${\n                activeTab === 'available' \n                  ? 'bg-emerald-500 text-white shadow-lg' \n                  : 'text-slate-300 hover:text-white'\n              }`}\n            >\n              Available ({dashboardData.availableLeads.length})\n            </button>\n            <button\n              onClick={() => setActiveTab('owned')}\n              className={`flex-1 text-center py-3 px-4 rounded-lg font-medium transition-all ${\n                activeTab === 'owned' \n                  ? 'bg-emerald-500 text-white shadow-lg' \n                  : 'text-slate-300 hover:text-white'\n              }`}\n            >\n              Purchased ({dashboardData.ownedBuyers.length})\n            </button>\n            <button\n              onClick={() => setActiveTab('transactions')}\n              className={`flex-1 text-center py-3 px-4 rounded-lg font-medium transition-all ${\n                activeTab === 'transactions' \n                  ? 'bg-emerald-500 text-white shadow-lg' \n                  : 'text-slate-300 hover:text-white'\n              }`}\n            >\n              History ({dashboardData.transactions.length})\n            </button>\n          </div>\n        </div>\n\n        {/* Content Area */}\n        <div className=\"bg-slate-800/30 rounded-xl p-6\">\n          \n          {/* Available Leads */}\n          {activeTab === 'available' && (\n            <div>\n              {dashboardData.availableLeads.length === 0 ? (\n                <div className=\"text-center py-16\">\n                  <div className=\"text-6xl mb-4\">üì≠</div>\n                  <h3 className=\"text-xl font-bold text-white mb-2\">No leads available</h3>\n                  <p className=\"text-slate-400\">New buyer leads will appear here when they register in your area.</p>\n                </div>\n              ) : (\n                <div className=\"grid gap-4 md:grid-cols-2\">\n                  {dashboardData.availableLeads.map((lead) => (\n                    <div key={lead.id} className=\"bg-slate-800/50 border border-slate-700/50 rounded-lg p-4\">\n                      <div className=\"flex items-start justify-between mb-3\">\n                        <div>\n                          <h4 className=\"text-white font-bold text-lg\">\n                            {lead.firstName} {lead.lastName}\n                          </h4>\n                          <p className=\"text-slate-400 text-sm\">{lead.city}, {lead.state}</p>\n                        </div>\n                        <span className=\"bg-emerald-500/20 text-emerald-400 px-2 py-1 rounded text-xs font-medium\">\n                          New Lead\n                        </span>\n                      </div>\n                      \n                      <div className=\"grid grid-cols-2 gap-3 mb-4\">\n                        <div className=\"bg-slate-700/50 rounded-lg p-3 text-center\">\n                          <div className=\"text-slate-400 text-xs\">Budget Down</div>\n                          <div className=\"text-white font-bold\">${lead.maxDownPayment.toLocaleString()}</div>\n                        </div>\n                        <div className=\"bg-slate-700/50 rounded-lg p-3 text-center\">\n                          <div className=\"text-slate-400 text-xs\">Budget Payment</div>\n                          <div className=\"text-white font-bold\">${lead.maxMonthlyPayment.toLocaleString()}</div>\n                        </div>\n                      </div>\n\n                      <div className=\"flex gap-2\">\n                        <button\n                          onClick={() => purchaseLead(lead.id)}\n                          disabled={purchaseLoading === lead.id}\n                          className=\"w-full bg-emerald-500 hover:bg-emerald-600 text-white py-2 px-4 rounded-lg font-medium transition-colors disabled:opacity-50\"\n                        >\n                          {purchaseLoading === lead.id ? 'Purchasing...' : 'Purchase Lead'}\n                        </button>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </div>\n          )}\n\n          {/* Purchased Buyers */}\n          {activeTab === 'owned' && (\n            <div>\n              {dashboardData.ownedBuyers.length === 0 ? (\n                <div className=\"text-center py-16\">\n                  <div className=\"text-6xl mb-4\">üë•</div>\n                  <h3 className=\"text-xl font-bold text-white mb-2\">No purchased leads</h3>\n                  <p className=\"text-slate-400\">Leads you purchase will appear here for ongoing communication.</p>\n                </div>\n              ) : (\n                <div className=\"grid gap-4 md:grid-cols-2\">\n                  {dashboardData.ownedBuyers.map((buyer) => (\n                    <div key={buyer.id} className=\"bg-slate-800/50 border border-slate-700/50 rounded-lg p-4\">\n                      <div className=\"flex items-start justify-between mb-3\">\n                        <div>\n                          <h4 className=\"text-white font-bold text-lg\">\n                            {buyer.firstName} {buyer.lastName}\n                          </h4>\n                          <p className=\"text-slate-400 text-sm\">{buyer.city}, {buyer.state}</p>\n                          <p className=\"text-emerald-400 text-sm font-medium\">{buyer.phone}</p>\n                          <p className=\"text-emerald-400 text-sm font-medium\">{buyer.email}</p>\n                        </div>\n                        <span className=\"bg-blue-500/20 text-blue-400 px-2 py-1 rounded text-xs font-medium\">\n                          Owned\n                        </span>\n                      </div>\n                      \n                      <div className=\"grid grid-cols-2 gap-3 mb-4\">\n                        <div className=\"bg-slate-700/50 rounded-lg p-3 text-center\">\n                          <div className=\"text-slate-400 text-xs\">Budget Down</div>\n                          <div className=\"text-white font-bold\">${buyer.maxDownPayment.toLocaleString()}</div>\n                        </div>\n                        <div className=\"bg-slate-700/50 rounded-lg p-3 text-center\">\n                          <div className=\"text-slate-400 text-xs\">Budget Payment</div>\n                          <div className=\"text-white font-bold\">${buyer.maxMonthlyPayment.toLocaleString()}</div>\n                        </div>\n                      </div>\n\n                      <div className=\"space-y-2\">\n                        <div className=\"flex gap-2\">\n                          <button\n                            onClick={() => {\n                              const searchQuery = `${buyer.firstName} ${buyer.lastName} ${buyer.city} ${buyer.state} real estate owner financing`;\n                              window.open(`https://www.google.com/search?q=${encodeURIComponent(searchQuery)}`, '_blank');\n                            }}\n                            className=\"flex-1 bg-blue-500/20 hover:bg-blue-500/30 text-blue-400 py-2 px-3 rounded-lg text-sm font-medium transition-colors\"\n                          >\n                            View More Details\n                          </button>\n                          <a\n                            href={`sms:${buyer.phone}&body=${encodeURIComponent(\"Hi, I see you&apos;re interested in owner finance properties through OwnerFi, how is everything going so far?\")}`}\n                            className=\"flex-1 bg-green-500/20 hover:bg-green-500/30 text-green-400 py-2 px-3 rounded-lg text-sm font-medium transition-colors text-center\"\n                          >\n                            Text\n                          </a>\n                        </div>\n                        <button\n                          onClick={() => openDisputeModal(buyer)}\n                          className=\"w-full bg-red-500/20 hover:bg-red-500/30 text-red-400 py-2 px-3 rounded-lg text-sm font-medium transition-colors\"\n                        >\n                          Dispute\n                        </button>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </div>\n          )}\n\n          {/* Transaction History */}\n          {activeTab === 'transactions' && (\n            <div>\n              {dashboardData.transactions.length === 0 ? (\n                <div className=\"text-center py-16\">\n                  <div className=\"text-6xl mb-4\">üìä</div>\n                  <h3 className=\"text-xl font-bold text-white mb-2\">No transactions</h3>\n                  <p className=\"text-slate-400\">Transaction history will appear as you purchase leads and credits.</p>\n                </div>\n              ) : (\n                <div className=\"space-y-3\">\n                  {dashboardData.transactions.map((transaction) => (\n                    <div key={transaction.id} className=\"bg-slate-800/50 border border-slate-700/50 rounded-lg p-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center gap-3\">\n                          <div className={`w-10 h-10 rounded-full flex items-center justify-center ${\n                            transaction.type === 'lead_purchase' ? 'bg-red-500/20 text-red-400' :\n                            transaction.type === 'credit_purchase' ? 'bg-emerald-500/20 text-emerald-400' :\n                            'bg-blue-500/20 text-blue-400'\n                          }`}>\n                            {transaction.type === 'lead_purchase' ? 'üìû' : \n                             transaction.type === 'credit_purchase' ? 'üí≥' : 'üîÑ'}\n                          </div>\n                          <div>\n                            <div className=\"text-white font-medium\">{transaction.description}</div>\n                            <div className=\"text-slate-400 text-sm\">\n                              {new Date(transaction.createdAt).toLocaleDateString()}\n                            </div>\n                          </div>\n                        </div>\n                        <div className=\"text-right\">\n                          <div className={`font-bold text-lg ${transaction.creditsChange > 0 ? 'text-emerald-400' : 'text-red-400'}`}>\n                            {transaction.creditsChange > 0 ? '+' : ''}{transaction.creditsChange}\n                          </div>\n                          <div className=\"text-slate-400 text-sm\">Balance: {transaction.runningBalance}</div>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      </main>\n\n      {/* Dispute Modal */}\n      {disputeModal.buyer && (\n        <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4\">\n          <div className=\"bg-slate-800 border border-slate-700 rounded-xl p-6 max-w-md w-full\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <h3 className=\"text-xl font-bold text-white\">Dispute Lead</h3>\n              <button\n                onClick={closeDisputeModal}\n                className=\"text-slate-400 hover:text-white text-xl\"\n              >\n                ‚úï\n              </button>\n            </div>\n            \n            <div className=\"mb-4\">\n              <div className=\"text-white font-medium mb-1\">\n                {disputeModal.buyer.firstName} {disputeModal.buyer.lastName}\n              </div>\n              <div className=\"text-slate-400 text-sm\">\n                {disputeModal.buyer.city}, {disputeModal.buyer.state}\n              </div>\n            </div>\n\n            <div className=\"space-y-4\">\n              <div>\n                <label className=\"block text-white text-sm font-medium mb-2\">Reason</label>\n                <select\n                  value={disputeModal.reason}\n                  onChange={(e) => setDisputeModal(prev => ({ ...prev, reason: e.target.value }))}\n                  className=\"w-full bg-slate-700/50 border border-slate-600 rounded-lg p-3 text-white\"\n                >\n                  <option value=\"\">Select reason</option>\n                  <option value=\"no_response\">No response</option>\n                  <option value=\"invalid_contact\">Invalid contact info</option>\n                  <option value=\"not_qualified\">Not qualified</option>\n                  <option value=\"already_working\">Already working with another agent</option>\n                  <option value=\"false_information\">False information</option>\n                  <option value=\"duplicate\">Duplicate lead</option>\n                  <option value=\"not_interested\">Not interested</option>\n                  <option value=\"other\">Other</option>\n                </select>\n              </div>\n\n              <div>\n                <label className=\"block text-white text-sm font-medium mb-2\">Description</label>\n                <textarea\n                  value={disputeModal.description}\n                  onChange={(e) => setDisputeModal(prev => ({ ...prev, description: e.target.value }))}\n                  className=\"w-full bg-slate-700/50 border border-slate-600 rounded-lg p-3 text-white h-24 resize-none\"\n                  placeholder=\"Please provide details about the issue...\"\n                />\n              </div>\n\n              <div className=\"flex gap-3\">\n                <button\n                  onClick={closeDisputeModal}\n                  className=\"flex-1 bg-slate-700 hover:bg-slate-600 text-white py-2 px-4 rounded-lg font-medium transition-colors\"\n                >\n                  Cancel\n                </button>\n                <button\n                  onClick={submitDispute}\n                  disabled={!disputeModal.reason || !disputeModal.description || disputeModal.submitting}\n                  className=\"flex-1 bg-red-500 hover:bg-red-600 text-white py-2 px-4 rounded-lg font-medium transition-colors disabled:opacity-50\"\n                >\n                  {disputeModal.submitting ? 'Submitting...' : 'Submit Dispute'}\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/app/realtor-dashboard/settings/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":30,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1392,1395],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1392,1395],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":90,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":90,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":126,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":126,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'selectedCitiesList' is assigned a value but never used.","line":161,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":161,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":188,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":188,"endColumn":17},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":273,"column":21,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[9740,9827],"text":"\n              Click &quot;Remove\" next to any city you no longer want to serve\n            "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[9740,9827],"text":"\n              Click &ldquo;Remove\" next to any city you no longer want to serve\n            "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[9740,9827],"text":"\n              Click &#34;Remove\" next to any city you no longer want to serve\n            "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[9740,9827],"text":"\n              Click &rdquo;Remove\" next to any city you no longer want to serve\n            "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":273,"column":28,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[9740,9827],"text":"\n              Click \"Remove&quot; next to any city you no longer want to serve\n            "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[9740,9827],"text":"\n              Click \"Remove&ldquo; next to any city you no longer want to serve\n            "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[9740,9827],"text":"\n              Click \"Remove&#34; next to any city you no longer want to serve\n            "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[9740,9827],"text":"\n              Click \"Remove&rdquo; next to any city you no longer want to serve\n            "},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useEffect } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { useSession } from 'next-auth/react';\nimport { getCitiesWithinRadiusComprehensive } from '@/lib/comprehensive-cities';\nimport { GooglePlacesAutocomplete } from '@/components/ui/GooglePlacesAutocomplete';\nimport Link from 'next/link';\n\nexport default function RealtorSettings() {\n  const router = useRouter();\n  const { data: session, status } = useSession();\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [successMessage, setSuccessMessage] = useState('');\n  const [targetCity, setTargetCity] = useState('');\n  const [nearbyCities, setNearbyCities] = useState<Array<{name: string, state: string, distance: number}>>([]);\n  const [selectedCities, setSelectedCities] = useState<Set<string>>(new Set());\n  const [sessionCheckPaused, setSessionCheckPaused] = useState(false);\n  const [currentSavedCities, setCurrentSavedCities] = useState<string[]>([]);\n  const [loadingCurrentCities, setLoadingCurrentCities] = useState(true);\n\n  // Auth check with session-safe handling  \n  useEffect(() => {\n    // Don't redirect during Google Maps interactions\n    if (sessionCheckPaused) return;\n    \n    if (status === 'unauthenticated') {\n      router.push('/realtor-signup');\n    } else if (status === 'authenticated' && (session?.user as any)?.role !== 'realtor') {\n      router.push('/signup');\n    }\n  }, [status, session, router, sessionCheckPaused]);\n\n  // Pause session checks during form interactions\n  useEffect(() => {\n    const handleGoogleMapsInteraction = () => {\n      setSessionCheckPaused(true);\n      // Resume checks after 2 seconds\n      setTimeout(() => setSessionCheckPaused(false), 2000);\n    };\n\n    window.addEventListener('googleMapsReady', handleGoogleMapsInteraction);\n    return () => window.removeEventListener('googleMapsReady', handleGoogleMapsInteraction);\n  }, []);\n\n  // Fetch current saved cities\n  useEffect(() => {\n    if (status === 'authenticated' && session?.user) {\n      fetchCurrentCities();\n    }\n  }, [status, session]);\n\n  const fetchCurrentCities = async () => {\n    try {\n      setLoadingCurrentCities(true);\n      const response = await fetch('/api/realtor/profile');\n      const data = await response.json();\n      \n      if (data.success) {\n        setCurrentSavedCities(data.data.serviceCities || []);\n        setTargetCity(data.data.targetCity || '');\n      }\n    } catch (err) {\n      console.error('Failed to fetch current cities:', err);\n    } finally {\n      setLoadingCurrentCities(false);\n    }\n  };\n\n  const handleRemoveCity = async (cityToRemove: string) => {\n    try {\n      setLoading(true);\n      const response = await fetch('/api/realtor/profile', {\n        method: 'DELETE',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ cityToRemove })\n      });\n\n      const data = await response.json();\n      \n      if (data.success) {\n        setCurrentSavedCities(data.updatedServiceCities);\n        setError('');\n        setSuccessMessage('City removed successfully!');\n        setTimeout(() => setSuccessMessage(''), 3000);\n      } else {\n        setError('Failed to remove city');\n      }\n    } catch (err) {\n      setError('Failed to remove city');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  if (status === 'loading') {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-slate-900\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-emerald-400\"></div>\n      </div>\n    );\n  }\n\n  const handleCitySearch = () => {\n    if (!targetCity.trim()) {\n      setError('Please enter a target city');\n      setSuccessMessage('');\n      return;\n    }\n\n    try {\n      const cityParts = targetCity.split(',');\n      const city = cityParts[0]?.trim().toLowerCase().replace(/\\b\\w/g, l => l.toUpperCase());\n      const state = cityParts[1]?.trim().toUpperCase() || 'TX';\n\n      const cities = getCitiesWithinRadiusComprehensive(city, state, 30);\n      setNearbyCities(cities);\n      \n      // Select all cities by default\n      const allCityKeys = new Set(cities.map(city => `${city.name}, ${city.state}`));\n      setSelectedCities(allCityKeys);\n      \n      setError('');\n      setSuccessMessage('');\n    } catch (err) {\n      setError('City not found. Please try again.');\n      setSuccessMessage('');\n    }\n  };\n\n  const selectAllCities = () => {\n    const allCityKeys = new Set(nearbyCities.map(city => `${city.name}, ${city.state}`));\n    setSelectedCities(allCityKeys);\n  };\n\n  const deselectAllCities = () => {\n    setSelectedCities(new Set());\n  };\n\n  const handleCityToggle = (cityKey: string) => {\n    const newSelected = new Set(selectedCities);\n    if (newSelected.has(cityKey)) {\n      newSelected.delete(cityKey);\n    } else {\n      newSelected.add(cityKey);\n    }\n    setSelectedCities(newSelected);\n  };\n\n  const handleSave = async () => {\n    if (selectedCities.size === 0) {\n      setError('Please select at least one city');\n      return;\n    }\n\n    setLoading(true);\n    setError('');\n\n    try {\n      const selectedCitiesList = Array.from(selectedCities).map(cityKey => {\n        const city = nearbyCities.find(c => `${c.name}, ${c.state}` === cityKey);\n        return city;\n      }).filter(Boolean);\n\n      const response = await fetch('/api/realtor/profile', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          targetCity: targetCity,\n          serviceCities: Array.from(selectedCities),\n          totalCitiesServed: selectedCities.size\n        })\n      });\n\n      if (response.ok) {\n        // Refresh the current cities list\n        await fetchCurrentCities();\n        // Clear the new cities selection\n        setNearbyCities([]);\n        setSelectedCities(new Set());\n        setTargetCity('');\n        setSuccessMessage('Cities saved successfully!');\n        setTimeout(() => setSuccessMessage(''), 3000);\n      } else {\n        setError('Failed to save settings');\n      }\n    } catch (err) {\n      setError('Failed to save settings');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-slate-900 flex flex-col\" style={{height: '100vh', overflow: 'hidden'}}>\n      {/* Header */}\n      <header className=\"bg-slate-800/50 backdrop-blur-lg border-b border-slate-700/50 p-4\">\n        <div className=\"flex items-center justify-between max-w-md mx-auto\">\n          <Link href=\"/realtor-dashboard\" className=\"flex items-center gap-2\">\n            <div className=\"w-8 h-8 bg-gradient-to-br from-emerald-400 to-blue-500 rounded-lg flex items-center justify-center\">\n              <span className=\"text-white font-bold text-sm\">O</span>\n            </div>\n            <span className=\"text-lg font-bold text-white\">OwnerFi</span>\n          </Link>\n          <span className=\"text-slate-400 text-sm\">Settings</span>\n        </div>\n      </header>\n\n      {/* Main Content - Single Screen */}\n      <div className=\"flex-1 px-4 py-4 max-w-md mx-auto w-full\">\n        \n        {/* Title */}\n        <div className=\"text-center mb-6\">\n          <h1 className=\"text-xl font-bold text-white mb-1\">Service Area</h1>\n          <p className=\"text-slate-300 text-sm\">Set up your coverage area</p>\n        </div>\n\n        {error && (\n          <div className=\"bg-red-500/20 border border-red-400/30 rounded-lg p-3 mb-4\">\n            <p className=\"text-red-300 text-sm\">{error}</p>\n          </div>\n        )}\n\n        {successMessage && (\n          <div className=\"bg-emerald-500/20 border border-emerald-400/30 rounded-lg p-3 mb-4\">\n            <p className=\"text-emerald-300 text-sm\">{successMessage}</p>\n          </div>\n        )}\n\n        {/* Current Saved Cities */}\n        {loadingCurrentCities ? (\n          <div className=\"mb-6\">\n            <h3 className=\"text-white font-medium mb-3\">Current Cities</h3>\n            <div className=\"bg-slate-800/50 border border-slate-700/50 rounded-lg p-4 text-center\">\n              <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-emerald-400 mx-auto\"></div>\n              <p className=\"text-slate-400 text-sm mt-2\">Loading cities...</p>\n            </div>\n          </div>\n        ) : currentSavedCities.length > 0 ? (\n          <div className=\"mb-6\">\n            <div className=\"flex items-center justify-between mb-3\">\n              <h3 className=\"text-white font-medium\">\n                Current Cities ({currentSavedCities.length})\n              </h3>\n              <button\n                onClick={fetchCurrentCities}\n                className=\"text-emerald-400 hover:text-emerald-300 text-xs font-medium\"\n              >\n                Refresh\n              </button>\n            </div>\n            <div className=\"bg-slate-800/50 border border-slate-700/50 rounded-lg p-3 max-h-48 overflow-y-auto\">\n              <div className=\"space-y-2\">\n                {[...currentSavedCities].sort().map((city) => (\n                  <div\n                    key={city}\n                    className=\"flex items-center justify-between p-2 rounded-lg hover:bg-slate-700/30 transition-colors\"\n                  >\n                    <span className=\"text-white text-sm\">{city}</span>\n                    <button\n                      onClick={() => handleRemoveCity(city)}\n                      disabled={loading}\n                      className=\"text-red-400 hover:text-red-300 text-xs font-medium disabled:opacity-50\"\n                    >\n                      Remove\n                    </button>\n                  </div>\n                ))}\n              </div>\n            </div>\n            <p className=\"text-slate-400 text-xs mt-2\">\n              Click \"Remove\" next to any city you no longer want to serve\n            </p>\n          </div>\n        ) : (\n          <div className=\"mb-6\">\n            <h3 className=\"text-white font-medium mb-3\">Current Cities</h3>\n            <div className=\"bg-slate-800/50 border border-slate-700/50 rounded-lg p-4 text-center\">\n              <p className=\"text-slate-400 text-sm\">No cities saved yet</p>\n              <p className=\"text-slate-500 text-xs mt-1\">Use the form below to add cities to your service area</p>\n            </div>\n          </div>\n        )}\n\n        {/* Add New Cities */}\n        <div className=\"mb-4\">\n          <h3 className=\"text-white font-medium mb-3\">Add New Cities</h3>\n          <label className=\"block text-sm font-medium text-white mb-2\">Primary City</label>\n          <div className=\"flex gap-2\">\n            <div className=\"flex-1\">\n              <GooglePlacesAutocomplete\n                value={targetCity}\n                onChange={setTargetCity}\n                placeholder=\"Dallas, TX\"\n              />\n            </div>\n            <button\n              onClick={handleCitySearch}\n              className=\"bg-emerald-500 hover:bg-emerald-600 text-white px-4 py-3 rounded-lg font-medium transition-colors\"\n            >\n              Find\n            </button>\n          </div>\n        </div>\n\n        {/* Cities Selection */}\n        {nearbyCities.length > 0 && (\n          <div className=\"mb-6\">\n            <div className=\"flex items-center justify-between mb-3\">\n              <h3 className=\"text-white font-medium\">\n                Select Cities to Serve ({selectedCities.size} selected)\n              </h3>\n              <div className=\"flex gap-2\">\n                <button\n                  onClick={selectAllCities}\n                  className=\"text-emerald-400 hover:text-emerald-300 text-xs font-medium\"\n                >\n                  Select All\n                </button>\n                <span className=\"text-slate-600\">|</span>\n                <button\n                  onClick={deselectAllCities}\n                  className=\"text-slate-400 hover:text-white text-xs font-medium\"\n                >\n                  Clear\n                </button>\n              </div>\n            </div>\n            <div className=\"bg-slate-800/50 border border-slate-700/50 rounded-lg p-3 max-h-64 overflow-y-auto\">\n              <div className=\"space-y-2\">\n                {nearbyCities.map((city) => {\n                  const cityKey = `${city.name}, ${city.state}`;\n                  const isSelected = selectedCities.has(cityKey);\n                  \n                  return (\n                    <label\n                      key={cityKey}\n                      className=\"flex items-center justify-between p-2 rounded-lg cursor-pointer hover:bg-slate-700/30 transition-colors\"\n                    >\n                      <div className=\"flex items-center gap-3\">\n                        <input\n                          type=\"checkbox\"\n                          checked={isSelected}\n                          onChange={() => handleCityToggle(cityKey)}\n                          className=\"w-4 h-4 text-emerald-500 bg-slate-700 border-slate-600 rounded focus:ring-emerald-400 focus:ring-2\"\n                        />\n                        <span className=\"text-white text-sm\">{city.name}, {city.state}</span>\n                      </div>\n                      <span className=\"text-slate-400 text-xs\">{city.distance.toFixed(1)} mi</span>\n                    </label>\n                  );\n                })}\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Action Buttons */}\n        <div className=\"space-y-3\">\n          {selectedCities.size > 0 && (\n            <button\n              onClick={handleSave}\n              disabled={loading}\n              className=\"w-full bg-emerald-500 hover:bg-emerald-600 text-white py-3 px-4 rounded-lg font-medium transition-colors disabled:opacity-50\"\n            >\n              {loading ? 'Saving...' : `Save ${selectedCities.size} Cities`}\n            </button>\n          )}\n          \n          <Link\n            href=\"/realtor-dashboard\"\n            className=\"block w-full text-center text-slate-400 hover:text-white py-2 transition-colors\"\n          >\n            ‚Üê Back to Dashboard\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/app/realtor-signup/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":102,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":102,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState } from 'react';\nimport { signIn } from 'next-auth/react';\nimport { useRouter } from 'next/navigation';\nimport Link from 'next/link';\n\nexport default function RealtorSignup() {\n  const router = useRouter();\n  const [formData, setFormData] = useState({\n    firstName: '',\n    lastName: '',\n    email: '',\n    password: '',\n    confirmPassword: '',\n    phone: '',\n    primaryCityQuery: '',\n    company: '',\n    licenseNumber: ''\n  });\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n\n  const handleChange = (field: string, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n    setError('');\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!formData.firstName || !formData.lastName || !formData.email || !formData.password || !formData.phone) {\n      setError('Please fill in all required fields');\n      return;\n    }\n    \n    if (formData.password !== formData.confirmPassword) {\n      setError('Passwords do not match');\n      return;\n    }\n\n    setLoading(true);\n\n    try {\n      const response = await fetch('/api/realtor/signup', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          firstName: formData.firstName,\n          lastName: formData.lastName,\n          email: formData.email,\n          password: formData.password,\n          phone: formData.phone,\n          primaryCityQuery: 'Setup Required',\n          company: formData.company,\n          licenseNumber: formData.licenseNumber\n        })\n      });\n\n      const data = await response.json();\n\n      if (!response.ok || data.error) {\n        setError(data.error || 'Failed to create account');\n        return;\n      }\n\n      if (!data.success) {\n        setError('Account creation failed. Please try again.');\n        return;\n      }\n\n      // Wait for database sync and attempt auto-signin with retries\n      let signInAttempts = 0;\n      const maxAttempts = 3;\n      let signInResult;\n\n      while (signInAttempts < maxAttempts) {\n        // Wait before attempt (longer delays for subsequent attempts)\n        await new Promise(resolve => setTimeout(resolve, (signInAttempts + 1) * 1000));\n        \n        signInResult = await signIn('credentials', {\n          email: formData.email,\n          password: formData.password,\n          redirect: false,\n        });\n\n        if (signInResult?.ok && !signInResult.error) {\n          // Success! Proceed to settings\n          router.push('/realtor-dashboard/settings');\n          return;\n        }\n\n        signInAttempts++;\n      }\n\n      // All attempts failed - account created but auto-signin didn't work\n      setError('Account created successfully! Please sign in with your credentials.');\n      setTimeout(() => {\n        router.push('/auth/signin');\n      }, 2000);\n\n    } catch (err) {\n      setError('Something went wrong. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-slate-900\">\n      <div className=\"py-8 px-6\">\n        <div className=\"max-w-md mx-auto w-full\">\n          <div className=\"bg-slate-800/50 backdrop-blur-lg border border-slate-700/50 rounded-2xl p-8\">\n            <div className=\"text-center mb-8\">\n              <h1 className=\"text-3xl font-bold text-white mb-3\">Join as a realtor</h1>\n              <p className=\"text-white font-normal mb-4\">Get qualified buyer leads for owner-financed properties</p>\n              <div className=\"space-y-2\">\n                <p className=\"text-white\">\n                  Already have an account?{' '}\n                  <Link href=\"/auth/signin\" className=\"text-emerald-400 hover:text-emerald-300 font-semibold transition-colors\">\n                    Sign In\n                  </Link>\n                </p>\n                <p className=\"text-sm text-white\">\n                  Looking for a home instead?{' '}\n                  <Link href=\"/signup\" className=\"text-blue-400 hover:text-blue-300 font-semibold transition-colors\">\n                    Find Your Home\n                  </Link>\n                </p>\n              </div>\n            </div>\n\n            {error && (\n              <div className=\"mb-6 bg-red-600/20 backdrop-blur-lg border border-red-500/30 rounded-xl p-4\">\n                <p className=\"text-red-300 font-semibold\">{error}</p>\n              </div>\n            )}\n\n            <form onSubmit={handleSubmit} className=\"space-y-6\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"block text-sm font-semibold mb-3\" style={{color: 'white'}}>First name</label>\n                  <input\n                    type=\"text\"\n                    required\n                    value={formData.firstName}\n                    onChange={(e) => handleChange('firstName', e.target.value)}\n                    className=\"w-full px-4 py-4 bg-emerald-500/10 border border-emerald-400/30 rounded-xl focus:outline-none focus:ring-2 focus:ring-emerald-400 focus:border-emerald-400 text-white placeholder-slate-400 font-normal\"\n                    placeholder=\"John\"\n                  />\n                </div>\n                <div>\n                  <label className=\"block text-sm font-semibold mb-3\" style={{color: 'white'}}>Last name</label>\n                  <input\n                    type=\"text\"\n                    required\n                    value={formData.lastName}\n                    onChange={(e) => handleChange('lastName', e.target.value)}\n                    className=\"w-full px-4 py-4 bg-emerald-500/10 border border-emerald-400/30 rounded-xl focus:outline-none focus:ring-2 focus:ring-emerald-400 focus:border-emerald-400 text-white placeholder-slate-400 font-normal\"\n                    placeholder=\"Smith\"\n                  />\n                </div>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-semibold mb-3\" style={{color: 'white'}}>Email address</label>\n                <input\n                  type=\"email\"\n                  required\n                  value={formData.email}\n                  onChange={(e) => handleChange('email', e.target.value)}\n                  className=\"w-full px-4 py-4 bg-emerald-500/10 border border-emerald-400/30 rounded-xl focus:outline-none focus:ring-2 focus:ring-emerald-400 focus:border-emerald-400 text-white placeholder-slate-400 font-normal\"\n                  placeholder=\"john@realty.com\"\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-semibold mb-3\" style={{color: 'white'}}>Phone number</label>\n                <input\n                  type=\"tel\"\n                  required\n                  value={formData.phone}\n                  onChange={(e) => handleChange('phone', e.target.value)}\n                  className=\"w-full px-4 py-4 bg-emerald-500/10 border border-emerald-400/30 rounded-xl focus:outline-none focus:ring-2 focus:ring-emerald-400 focus:border-emerald-400 text-white placeholder-slate-400 font-normal\"\n                  placeholder=\"(555) 123-4567\"\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-semibold mb-3\" style={{color: 'white'}}>Password</label>\n                <input\n                  type=\"password\"\n                  required\n                  value={formData.password}\n                  onChange={(e) => handleChange('password', e.target.value)}\n                  className=\"w-full px-4 py-4 bg-emerald-500/10 border border-emerald-400/30 rounded-xl focus:outline-none focus:ring-2 focus:ring-emerald-400 focus:border-emerald-400 text-white placeholder-slate-400 font-normal\"\n                  placeholder=\"‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢\"\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-semibold mb-3\" style={{color: 'white'}}>Confirm password</label>\n                <input\n                  type=\"password\"\n                  required\n                  value={formData.confirmPassword}\n                  onChange={(e) => handleChange('confirmPassword', e.target.value)}\n                  className=\"w-full px-4 py-4 bg-emerald-500/10 border border-emerald-400/30 rounded-xl focus:outline-none focus:ring-2 focus:ring-emerald-400 focus:border-emerald-400 text-white placeholder-slate-400 font-normal\"\n                  placeholder=\"‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢\"\n                />\n              </div>\n\n              <button\n                type=\"submit\"\n                disabled={loading}\n                className=\"w-full bg-gradient-to-r from-emerald-500 to-emerald-600 hover:from-emerald-400 hover:to-emerald-500 text-white py-4 px-6 rounded-xl font-semibold text-lg transition-all duration-300 hover:scale-105 shadow-2xl shadow-emerald-500/25 disabled:opacity-50 disabled:cursor-not-allowed\"\n              >\n                {loading ? 'Creating account...' : 'Start getting leads'}\n              </button>\n            </form>\n\n            <div className=\"mt-6 bg-emerald-500/10 border border-emerald-400/30 rounded-xl p-4\">\n              <h3 className=\"font-bold text-white mb-3\">What you get:</h3>\n              <ul className=\"space-y-2 text-sm text-white\">\n                <li className=\"flex items-center\">\n                  <div className=\"w-2 h-2 bg-emerald-400 rounded-full mr-3\"></div>\n                  Pre-qualified buyer leads\n                </li>\n                <li className=\"flex items-center\">\n                  <div className=\"w-2 h-2 bg-emerald-400 rounded-full mr-3\"></div>\n                  Direct contact information\n                </li>\n                <li className=\"flex items-center\">\n                  <div className=\"w-2 h-2 bg-emerald-400 rounded-full mr-3\"></div>\n                  Affordable lead pricing\n                </li>\n              </ul>\n            </div>\n\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/app/signup/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":96,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":96,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState } from 'react';\nimport { signIn } from 'next-auth/react';\nimport { useRouter } from 'next/navigation';\nimport Link from 'next/link';\n\nexport default function SignUp() {\n  const router = useRouter();\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n\n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    password: '',\n    confirmPassword: '',\n    phone: '',\n  });\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setLoading(true);\n    setError('');\n\n    // Validation\n    if (formData.password !== formData.confirmPassword) {\n      setError('Passwords do not match');\n      setLoading(false);\n      return;\n    }\n\n    if (formData.password.length < 6) {\n      setError('Password must be at least 6 characters');\n      setLoading(false);\n      return;\n    }\n\n    try {\n      const response = await fetch('/api/auth/signup', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          name: formData.name,\n          email: formData.email,\n          password: formData.password,\n          phone: formData.phone,\n          role: 'buyer'\n        }),\n      });\n\n      const data = await response.json();\n      \n      if (!response.ok || data.error) {\n        setError(data.error || 'Failed to create account');\n        setLoading(false);\n        return;\n      }\n\n      if (!data.success) {\n        setError('Account creation failed. Please try again.');\n        setLoading(false);\n        return;\n      }\n\n      // Wait for database sync and attempt auto-signin with retries\n      let signInAttempts = 0;\n      const maxAttempts = 3;\n      let signInResult;\n\n      while (signInAttempts < maxAttempts) {\n        // Wait before attempt (longer delays for subsequent attempts)\n        await new Promise(resolve => setTimeout(resolve, (signInAttempts + 1) * 1000));\n        \n        signInResult = await signIn('credentials', {\n          email: formData.email,\n          password: formData.password,\n          redirect: false,\n        });\n\n        if (signInResult?.ok && !signInResult.error) {\n          // Success! Proceed to setup\n          router.push('/dashboard/setup');\n          return;\n        }\n\n        signInAttempts++;\n      }\n\n      // All attempts failed - account created but auto-signin didn't work\n      setError('Account created successfully! Please sign in with your credentials.');\n      setTimeout(() => {\n        router.push('/auth/signin');\n      }, 2000);\n      \n    } catch (err) {\n      setError('Something went wrong. Please try again.');\n      setLoading(false);\n    }\n  };\n\n  const handleInputChange = (field: string, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n    setError('');\n  };\n\n  return (\n    <div className=\"min-h-screen bg-slate-900\">\n      <div className=\"py-8 px-6\">\n        <div className=\"max-w-md mx-auto w-full\">\n        <div className=\"bg-slate-800/50 backdrop-blur-lg border border-slate-700/50 rounded-2xl p-8\">\n          <div className=\"text-center mb-8\">\n            <h1 className=\"text-3xl font-bold text-white mb-3\">Find your home</h1>\n            <p className=\"text-white font-normal mb-4\">Join thousands who found homes through owner financing</p>\n            <div className=\"space-y-2\">\n              <p className=\"text-white\">\n                Already have an account?{' '}\n                <Link href=\"/auth/signin\" className=\"text-emerald-400 hover:text-emerald-300 font-semibold transition-colors\">\n                  Sign In\n                </Link>\n              </p>\n              <p className=\"text-sm text-white\">\n                Real estate professional?{' '}\n                <Link href=\"/realtor-signup\" className=\"text-blue-400 hover:text-blue-300 font-semibold transition-colors\">\n                  Join as a Realtor\n                </Link>\n              </p>\n            </div>\n          </div>\n\n          {error && (\n            <div className=\"mb-6 bg-red-600/20 backdrop-blur-lg border border-red-500/30 rounded-xl p-4\">\n              <p className=\"text-red-300 font-semibold\">{error}</p>\n            </div>\n          )}\n\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            <div>\n              <label className=\"block text-sm font-semibold text-white mb-3\">Full name</label>\n              <input\n                type=\"text\"\n                required\n                className=\"w-full px-4 py-4 bg-emerald-500/10 border border-emerald-400/30 rounded-xl focus:outline-none focus:ring-2 focus:ring-emerald-400 focus:border-emerald-400 text-white placeholder-slate-400 font-normal\"\n                placeholder=\"John Smith\"\n                value={formData.name}\n                onChange={(e) => handleInputChange('name', e.target.value)}\n              />\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-semibold text-white mb-3\">Email address</label>\n              <input\n                type=\"email\"\n                required\n                className=\"w-full px-4 py-4 bg-emerald-500/10 border border-emerald-400/30 rounded-xl focus:outline-none focus:ring-2 focus:ring-emerald-400 focus:border-emerald-400 text-white placeholder-slate-400 font-normal\"\n                placeholder=\"john@example.com\"\n                value={formData.email}\n                onChange={(e) => handleInputChange('email', e.target.value)}\n              />\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-semibold text-white mb-3\">Phone number</label>\n              <input\n                type=\"tel\"\n                required\n                className=\"w-full px-4 py-4 bg-emerald-500/10 border border-emerald-400/30 rounded-xl focus:outline-none focus:ring-2 focus:ring-emerald-400 focus:border-emerald-400 text-white placeholder-slate-400 font-normal\"\n                placeholder=\"(555) 123-4567\"\n                value={formData.phone}\n                onChange={(e) => handleInputChange('phone', e.target.value)}\n              />\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-semibold text-white mb-3\">Password</label>\n              <input\n                type=\"password\"\n                required\n                className=\"w-full px-4 py-4 bg-emerald-500/10 border border-emerald-400/30 rounded-xl focus:outline-none focus:ring-2 focus:ring-emerald-400 focus:border-emerald-400 text-white placeholder-slate-400 font-normal\"\n                placeholder=\"Choose a strong password\"\n                value={formData.password}\n                onChange={(e) => handleInputChange('password', e.target.value)}\n              />\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-semibold text-white mb-3\">Confirm password</label>\n              <input\n                type=\"password\"\n                required\n                className=\"w-full px-4 py-4 bg-emerald-500/10 border border-emerald-400/30 rounded-xl focus:outline-none focus:ring-2 focus:ring-emerald-400 focus:border-emerald-400 text-white placeholder-slate-400 font-normal\"\n                placeholder=\"Confirm your password\"\n                value={formData.confirmPassword}\n                onChange={(e) => handleInputChange('confirmPassword', e.target.value)}\n              />\n            </div>\n\n            <button\n              type=\"submit\"\n              disabled={loading}\n              className=\"w-full bg-gradient-to-r from-emerald-500 to-emerald-600 hover:from-emerald-400 hover:to-emerald-500 text-white py-4 px-6 rounded-xl font-semibold text-lg transition-all duration-300 hover:scale-105 shadow-2xl shadow-emerald-500/25 disabled:opacity-50 disabled:cursor-not-allowed\"\n            >\n              {loading ? 'Creating account...' : 'Create account'}\n            </button>\n          </form>\n\n          <div className=\"mt-6 bg-emerald-500/10 border border-emerald-400/30 rounded-xl p-4\">\n            <h3 className=\"font-bold text-white mb-3\">What you get:</h3>\n            <ul className=\"space-y-2 text-sm text-white\">\n              <li className=\"flex items-center\">\n                <div className=\"w-2 h-2 bg-emerald-400 rounded-full mr-3\"></div>\n                Direct access to owner-financed homes\n              </li>\n              <li className=\"flex items-center\">\n                <div className=\"w-2 h-2 bg-emerald-400 rounded-full mr-3\"></div>\n                Flexible financing terms\n              </li>\n              <li className=\"flex items-center\">\n                <div className=\"w-2 h-2 bg-emerald-400 rounded-full mr-3\"></div>\n                Professional agent support\n              </li>\n            </ul>\n          </div>\n\n        </div>\n        </div>\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/app/terms/page.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":34,"column":49,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[1823,2090],"text":"By accessing or using OwnerFi (&quot;the Service\"), you agree to be bound by these Terms of Service (\"Terms\"). If you do not agree to these Terms, do not use the Service. You must be at least 18 years old and legally capable of entering into contracts to use this service."},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[1823,2090],"text":"By accessing or using OwnerFi (&ldquo;the Service\"), you agree to be bound by these Terms of Service (\"Terms\"). If you do not agree to these Terms, do not use the Service. You must be at least 18 years old and legally capable of entering into contracts to use this service."},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[1823,2090],"text":"By accessing or using OwnerFi (&#34;the Service\"), you agree to be bound by these Terms of Service (\"Terms\"). If you do not agree to these Terms, do not use the Service. You must be at least 18 years old and legally capable of entering into contracts to use this service."},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[1823,2090],"text":"By accessing or using OwnerFi (&rdquo;the Service\"), you agree to be bound by these Terms of Service (\"Terms\"). If you do not agree to these Terms, do not use the Service. You must be at least 18 years old and legally capable of entering into contracts to use this service."},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":34,"column":61,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[1823,2090],"text":"By accessing or using OwnerFi (\"the Service&quot;), you agree to be bound by these Terms of Service (\"Terms\"). If you do not agree to these Terms, do not use the Service. You must be at least 18 years old and legally capable of entering into contracts to use this service."},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[1823,2090],"text":"By accessing or using OwnerFi (\"the Service&ldquo;), you agree to be bound by these Terms of Service (\"Terms\"). If you do not agree to these Terms, do not use the Service. You must be at least 18 years old and legally capable of entering into contracts to use this service."},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[1823,2090],"text":"By accessing or using OwnerFi (\"the Service&#34;), you agree to be bound by these Terms of Service (\"Terms\"). If you do not agree to these Terms, do not use the Service. You must be at least 18 years old and legally capable of entering into contracts to use this service."},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[1823,2090],"text":"By accessing or using OwnerFi (\"the Service&rdquo;), you agree to be bound by these Terms of Service (\"Terms\"). If you do not agree to these Terms, do not use the Service. You must be at least 18 years old and legally capable of entering into contracts to use this service."},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":34,"column":114,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[1823,2090],"text":"By accessing or using OwnerFi (\"the Service\"), you agree to be bound by these Terms of Service (&quot;Terms\"). If you do not agree to these Terms, do not use the Service. You must be at least 18 years old and legally capable of entering into contracts to use this service."},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[1823,2090],"text":"By accessing or using OwnerFi (\"the Service\"), you agree to be bound by these Terms of Service (&ldquo;Terms\"). If you do not agree to these Terms, do not use the Service. You must be at least 18 years old and legally capable of entering into contracts to use this service."},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[1823,2090],"text":"By accessing or using OwnerFi (\"the Service\"), you agree to be bound by these Terms of Service (&#34;Terms\"). If you do not agree to these Terms, do not use the Service. You must be at least 18 years old and legally capable of entering into contracts to use this service."},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[1823,2090],"text":"By accessing or using OwnerFi (\"the Service\"), you agree to be bound by these Terms of Service (&rdquo;Terms\"). If you do not agree to these Terms, do not use the Service. You must be at least 18 years old and legally capable of entering into contracts to use this service."},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":34,"column":120,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[1823,2090],"text":"By accessing or using OwnerFi (\"the Service\"), you agree to be bound by these Terms of Service (\"Terms&quot;). If you do not agree to these Terms, do not use the Service. You must be at least 18 years old and legally capable of entering into contracts to use this service."},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[1823,2090],"text":"By accessing or using OwnerFi (\"the Service\"), you agree to be bound by these Terms of Service (\"Terms&ldquo;). If you do not agree to these Terms, do not use the Service. You must be at least 18 years old and legally capable of entering into contracts to use this service."},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[1823,2090],"text":"By accessing or using OwnerFi (\"the Service\"), you agree to be bound by these Terms of Service (\"Terms&#34;). If you do not agree to these Terms, do not use the Service. You must be at least 18 years old and legally capable of entering into contracts to use this service."},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[1823,2090],"text":"By accessing or using OwnerFi (\"the Service\"), you agree to be bound by these Terms of Service (\"Terms&rdquo;). If you do not agree to these Terms, do not use the Service. You must be at least 18 years old and legally capable of entering into contracts to use this service."},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":105,"column":69,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[7397,7569],"text":"THE SERVICE IS PROVIDED &quot;AS IS\" AND \"AS AVAILABLE\" WITHOUT WARRANTIES OF ANY KIND, EXPRESS OR IMPLIED. WE SPECIFICALLY DISCLAIM ALL WARRANTIES INCLUDING BUT NOT LIMITED TO:"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[7397,7569],"text":"THE SERVICE IS PROVIDED &ldquo;AS IS\" AND \"AS AVAILABLE\" WITHOUT WARRANTIES OF ANY KIND, EXPRESS OR IMPLIED. WE SPECIFICALLY DISCLAIM ALL WARRANTIES INCLUDING BUT NOT LIMITED TO:"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[7397,7569],"text":"THE SERVICE IS PROVIDED &#34;AS IS\" AND \"AS AVAILABLE\" WITHOUT WARRANTIES OF ANY KIND, EXPRESS OR IMPLIED. WE SPECIFICALLY DISCLAIM ALL WARRANTIES INCLUDING BUT NOT LIMITED TO:"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[7397,7569],"text":"THE SERVICE IS PROVIDED &rdquo;AS IS\" AND \"AS AVAILABLE\" WITHOUT WARRANTIES OF ANY KIND, EXPRESS OR IMPLIED. WE SPECIFICALLY DISCLAIM ALL WARRANTIES INCLUDING BUT NOT LIMITED TO:"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":105,"column":75,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[7397,7569],"text":"THE SERVICE IS PROVIDED \"AS IS&quot; AND \"AS AVAILABLE\" WITHOUT WARRANTIES OF ANY KIND, EXPRESS OR IMPLIED. WE SPECIFICALLY DISCLAIM ALL WARRANTIES INCLUDING BUT NOT LIMITED TO:"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[7397,7569],"text":"THE SERVICE IS PROVIDED \"AS IS&ldquo; AND \"AS AVAILABLE\" WITHOUT WARRANTIES OF ANY KIND, EXPRESS OR IMPLIED. WE SPECIFICALLY DISCLAIM ALL WARRANTIES INCLUDING BUT NOT LIMITED TO:"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[7397,7569],"text":"THE SERVICE IS PROVIDED \"AS IS&#34; AND \"AS AVAILABLE\" WITHOUT WARRANTIES OF ANY KIND, EXPRESS OR IMPLIED. WE SPECIFICALLY DISCLAIM ALL WARRANTIES INCLUDING BUT NOT LIMITED TO:"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[7397,7569],"text":"THE SERVICE IS PROVIDED \"AS IS&rdquo; AND \"AS AVAILABLE\" WITHOUT WARRANTIES OF ANY KIND, EXPRESS OR IMPLIED. WE SPECIFICALLY DISCLAIM ALL WARRANTIES INCLUDING BUT NOT LIMITED TO:"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":105,"column":81,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[7397,7569],"text":"THE SERVICE IS PROVIDED \"AS IS\" AND &quot;AS AVAILABLE\" WITHOUT WARRANTIES OF ANY KIND, EXPRESS OR IMPLIED. WE SPECIFICALLY DISCLAIM ALL WARRANTIES INCLUDING BUT NOT LIMITED TO:"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[7397,7569],"text":"THE SERVICE IS PROVIDED \"AS IS\" AND &ldquo;AS AVAILABLE\" WITHOUT WARRANTIES OF ANY KIND, EXPRESS OR IMPLIED. WE SPECIFICALLY DISCLAIM ALL WARRANTIES INCLUDING BUT NOT LIMITED TO:"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[7397,7569],"text":"THE SERVICE IS PROVIDED \"AS IS\" AND &#34;AS AVAILABLE\" WITHOUT WARRANTIES OF ANY KIND, EXPRESS OR IMPLIED. WE SPECIFICALLY DISCLAIM ALL WARRANTIES INCLUDING BUT NOT LIMITED TO:"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[7397,7569],"text":"THE SERVICE IS PROVIDED \"AS IS\" AND &rdquo;AS AVAILABLE\" WITHOUT WARRANTIES OF ANY KIND, EXPRESS OR IMPLIED. WE SPECIFICALLY DISCLAIM ALL WARRANTIES INCLUDING BUT NOT LIMITED TO:"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":105,"column":94,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[7397,7569],"text":"THE SERVICE IS PROVIDED \"AS IS\" AND \"AS AVAILABLE&quot; WITHOUT WARRANTIES OF ANY KIND, EXPRESS OR IMPLIED. WE SPECIFICALLY DISCLAIM ALL WARRANTIES INCLUDING BUT NOT LIMITED TO:"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[7397,7569],"text":"THE SERVICE IS PROVIDED \"AS IS\" AND \"AS AVAILABLE&ldquo; WITHOUT WARRANTIES OF ANY KIND, EXPRESS OR IMPLIED. WE SPECIFICALLY DISCLAIM ALL WARRANTIES INCLUDING BUT NOT LIMITED TO:"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[7397,7569],"text":"THE SERVICE IS PROVIDED \"AS IS\" AND \"AS AVAILABLE&#34; WITHOUT WARRANTIES OF ANY KIND, EXPRESS OR IMPLIED. WE SPECIFICALLY DISCLAIM ALL WARRANTIES INCLUDING BUT NOT LIMITED TO:"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[7397,7569],"text":"THE SERVICE IS PROVIDED \"AS IS\" AND \"AS AVAILABLE&rdquo; WITHOUT WARRANTIES OF ANY KIND, EXPRESS OR IMPLIED. WE SPECIFICALLY DISCLAIM ALL WARRANTIES INCLUDING BUT NOT LIMITED TO:"},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { Header } from '@/components/ui/Header';\nimport { Footer } from '@/components/ui/Footer';\nimport Link from 'next/link';\n\nexport default function TermsOfService() {\n  return (\n    <div className=\"min-h-screen bg-primary-bg\">\n      <Header />\n      \n      <div className=\"max-w-4xl mx-auto px-6 py-16\">\n        <div className=\"bg-white rounded-xl shadow-light p-8 md:p-12\">\n          <h1 className=\"text-4xl font-bold text-primary-text mb-8\">Terms of Service</h1>\n          <p className=\"text-gray-600 mb-8\">Last updated: September 3, 2025</p>\n          \n          {/* Plain English Summary */}\n          <div className=\"bg-blue-50 border border-blue-200 rounded-xl p-6 mb-8\">\n            <h2 className=\"text-2xl font-semibold text-blue-800 mb-4\">üìã What You Need to Know (Plain English)</h2>\n            <ul className=\"space-y-2 text-blue-700\">\n              <li>‚Ä¢ <strong>We connect buyers with real estate agents</strong> - that&apos;s our business model</li>\n              <li>‚Ä¢ <strong>Your contact info will be sold to licensed realtors</strong> who may call/text/email you</li>\n              <li>‚Ä¢ <strong>We don&apos;t guarantee property accuracy</strong> - always verify everything yourself</li>\n              <li>‚Ä¢ <strong>We&apos;re not your agent, broker, or advisor</strong> - we&apos;re just a lead generation platform</li>\n              <li>‚Ä¢ <strong>Do your own homework</strong> before making any real estate decisions</li>\n              <li>‚Ä¢ <strong>All sales are final</strong> - no refunds on lead purchases</li>\n            </ul>\n          </div>\n\n          <div className=\"space-y-8 text-lg leading-relaxed text-gray-700\">\n            \n            <section>\n              <h2 className=\"text-2xl font-semibold text-primary-text mb-4\">1. Acceptance of Terms</h2>\n              <p>By accessing or using OwnerFi (\"the Service\"), you agree to be bound by these Terms of Service (\"Terms\"). If you do not agree to these Terms, do not use the Service. You must be at least 18 years old and legally capable of entering into contracts to use this service.</p>\n            </section>\n\n            <section>\n              <h2 className=\"text-2xl font-semibold text-primary-text mb-4\">2. Description of Service</h2>\n              <p>OwnerFi is a platform that:</p>\n              <ul className=\"list-disc ml-6 mt-2 space-y-2\">\n                <li>Lists owner-financed real estate properties</li>\n                <li>Collects buyer information and preferences</li>\n                <li>Matches buyers with properties based on their criteria</li>\n                <li>Sells buyer lead information to licensed real estate agents and brokers</li>\n                <li>Provides lead management tools for real estate professionals</li>\n              </ul>\n              <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4 mt-4\">\n                <p className=\"text-blue-700\"><strong>Important:</strong> <strong className=\"text-blue-800\">Buyers do not pay for use of OwnerFi.</strong> Our service is free for buyers. Payments are made by licensed real estate professionals for access to leads. Your use of the service is also governed by our <Link href=\"/privacy\" className=\"underline hover:text-blue-800\">Privacy Policy</Link>, which describes how we collect, use, and share your information.</p>\n              </div>\n            </section>\n\n            <section>\n              <h2 className=\"text-2xl font-semibold text-primary-text mb-4\">3. NOT A LICENSED BROKER OR AGENT</h2>\n              <div className=\"bg-red-50 border border-red-200 rounded-lg p-4 mb-4\">\n                <p className=\"font-bold text-red-800 text-xl\">‚ö†Ô∏è IMPORTANT DISCLAIMER</p>\n                <p className=\"text-red-700 mt-2\"><strong>OWNERFI IS NOT A LICENSED REAL ESTATE BROKER, AGENT, OR LENDER.</strong> We do not:</p>\n                <ul className=\"list-disc ml-6 mt-2 space-y-1 text-red-700\">\n                  <li>Represent buyers or sellers in real estate transactions</li>\n                  <li>Negotiate sales prices or financing terms</li>\n                  <li>Provide real estate brokerage services</li>\n                  <li>Act as a fiduciary or advocate for any party</li>\n                  <li>Provide lending or mortgage services</li>\n                </ul>\n                <p className=\"text-red-700 mt-2\"><strong>WE ARE SOLELY A LEAD GENERATION AND MARKETING PLATFORM.</strong></p>\n              </div>\n            </section>\n\n            <section>\n              <h2 className=\"text-2xl font-semibold text-primary-text mb-4\">4. Lead Sales and Marketing Consent</h2>\n              <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-4 mb-4\">\n                <p className=\"font-bold text-yellow-800 text-xl\">üìû MARKETING & COMMUNICATION CONSENT</p>\n                <p className=\"text-yellow-700 mt-2\"><strong>BY REGISTERING, YOU EXPRESSLY CONSENT TO:</strong></p>\n                <ul className=\"list-disc ml-6 mt-2 space-y-1 text-yellow-700\">\n                  <li>Having your contact information SOLD to licensed real estate professionals</li>\n                  <li>Receiving calls, texts, and emails from multiple real estate agents</li>\n                  <li>Being contacted using automated dialing systems</li>\n                  <li>Marketing communications from OwnerFi and our partners</li>\n                </ul>\n                <p className=\"text-yellow-700 mt-2\"><strong>Message and data rates may apply. This consent is required to use our service.</strong></p>\n              </div>\n              <p>When you register as a buyer, your information including but not limited to name, email, phone number, and property preferences <strong>WILL BE SOLD</strong> to real estate professionals who serve your area. You <strong>WILL BE CONTACTED</strong> by multiple agents regarding properties and services.</p>\n            </section>\n\n            <section>\n              <h2 className=\"text-2xl font-semibold text-primary-text mb-4\">5. Payments and Refunds</h2>\n              <div className=\"bg-orange-50 border border-orange-200 rounded-lg p-4 mb-4\">\n                <p className=\"font-bold text-orange-800 text-xl\">üí∞ NO REFUNDS POLICY</p>\n                <p className=\"text-orange-700 mt-2\"><strong>ALL PAYMENTS FOR LEADS OR SERVICES ARE FINAL AND NON-REFUNDABLE.</strong></p>\n                <p className=\"text-orange-700 mt-2\"><strong>Payments are made exclusively by licensed real estate professionals for access to leads.</strong></p>\n                <p className=\"text-orange-700 mt-2\">OwnerFi does not guarantee:</p>\n                <ul className=\"list-disc ml-6 mt-2 space-y-1 text-orange-700\">\n                  <li>Lead conversion or transaction success</li>\n                  <li>Buyer qualification or ability to purchase</li>\n                  <li>Property availability or accuracy</li>\n                  <li>That buyers will respond to contact attempts</li>\n                  <li>Any specific return on investment</li>\n                </ul>\n              </div>\n            </section>\n\n            <section>\n              <h2 className=\"text-2xl font-semibold text-primary-text mb-4\">6. No Warranties or Guarantees</h2>\n              <div className=\"bg-red-50 border border-red-200 rounded-lg p-4\">\n                <h3 className=\"font-semibold text-red-800 mb-2\">DISCLAIMER OF WARRANTIES</h3>\n                <p className=\"text-red-700\">THE SERVICE IS PROVIDED \"AS IS\" AND \"AS AVAILABLE\" WITHOUT WARRANTIES OF ANY KIND, EXPRESS OR IMPLIED. WE SPECIFICALLY DISCLAIM ALL WARRANTIES INCLUDING BUT NOT LIMITED TO:</p>\n                <ul className=\"list-disc ml-6 mt-2 space-y-1 text-red-700\">\n                  <li>Accuracy of property information, prices, terms, or availability</li>\n                  <li>Completeness or timeliness of any data or listings</li>\n                  <li>Accuracy of financial calculations, payment amounts, or interest rates</li>\n                  <li>Quality or condition of any properties listed</li>\n                  <li>Legal status or ownership of properties</li>\n                  <li>Reliability of third-party information</li>\n                </ul>\n              </div>\n            </section>\n\n            <section>\n              <h2 className=\"text-2xl font-semibold text-primary-text mb-4\">7. Limitation of Liability</h2>\n              <div className=\"bg-red-50 border border-red-200 rounded-lg p-4\">\n                <h3 className=\"font-semibold text-red-800 mb-2\">LIABILITY DISCLAIMER</h3>\n                <p className=\"text-red-700 mb-2\">TO THE MAXIMUM EXTENT PERMITTED BY LAW, OWNERFI AND ITS OWNERS, EMPLOYEES, AND AFFILIATES SHALL NOT BE LIABLE FOR:</p>\n                <ul className=\"list-disc ml-6 space-y-1 text-red-700\">\n                  <li>ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, CONSEQUENTIAL, OR PUNITIVE DAMAGES</li>\n                  <li>LOSS OF PROFITS, REVENUE, DATA, OR BUSINESS OPPORTUNITIES</li>\n                  <li>PROPERTY PURCHASE DECISIONS OR FINANCIAL LOSSES</li>\n                  <li>INACCURATE PROPERTY INFORMATION OR PRICING</li>\n                  <li>FAILED PROPERTY TRANSACTIONS OR FINANCING ARRANGEMENTS</li>\n                  <li>THIRD-PARTY CONDUCT OR COMMUNICATIONS</li>\n                  <li>ANY DAMAGES EXCEEDING $100 IN THE AGGREGATE</li>\n                </ul>\n              </div>\n            </section>\n\n            <section>\n              <h2 className=\"text-2xl font-semibold text-primary-text mb-4\">8. Property Information Disclaimer</h2>\n              <p>All property information is provided by third parties and may be inaccurate, incomplete, or outdated. You acknowledge that:</p>\n              <ul className=\"list-disc ml-6 mt-2 space-y-2\">\n                <li>Property prices, terms, and availability may change without notice</li>\n                <li>Financial calculations are estimates only and may not reflect actual costs</li>\n                <li>Property conditions, sizes, and features may differ from descriptions</li>\n                <li>You must independently verify all information before making any decisions</li>\n                <li>We are not responsible for errors in property data from any source</li>\n              </ul>\n            </section>\n\n            <section>\n              <h2 className=\"text-2xl font-semibold text-primary-text mb-4\">9. No Professional Advice</h2>\n              <p>OwnerFi does not provide legal, financial, tax, or real estate advice. Information on this platform is for informational purposes only. You should consult qualified professionals before making any real estate or financial decisions.</p>\n            </section>\n\n            <section>\n              <h2 className=\"text-2xl font-semibold text-primary-text mb-4\">10. User Responsibilities</h2>\n              <p>You agree to:</p>\n              <ul className=\"list-disc ml-6 mt-2 space-y-2\">\n                <li>Provide accurate information when registering</li>\n                <li>Conduct your own due diligence on any properties</li>\n                <li>Comply with all applicable laws and regulations</li>\n                <li>Not use the service for any illegal or unauthorized purpose</li>\n                <li>Indemnify OwnerFi against any claims arising from your use of the service</li>\n              </ul>\n            </section>\n\n            <section>\n              <h2 className=\"text-2xl font-semibold text-primary-text mb-4\">11. Third-Party Services</h2>\n              <p>Our service may contain links to or integrate with third-party websites, services, or applications. We are not responsible for the content, privacy practices, or terms of service of any third parties.</p>\n            </section>\n\n            <section>\n              <h2 className=\"text-2xl font-semibold text-primary-text mb-4\">12. Modifications to Service and Terms</h2>\n              <p>We reserve the right to modify, suspend, or discontinue the service at any time without notice. We may also update these Terms at any time, and continued use constitutes acceptance of any changes.</p>\n            </section>\n\n            <section>\n              <h2 className=\"text-2xl font-semibold text-primary-text mb-4\">13. Account Suspension and Abuse</h2>\n              <p>We reserve the right to immediately suspend or terminate your account and access to the service if you:</p>\n              <ul className=\"list-disc ml-6 mt-2 space-y-2\">\n                <li>Violate these Terms of Service</li>\n                <li>Engage in spam, fraud, or abusive behavior</li>\n                <li>Provide false or misleading information</li>\n                <li>Attempt to circumvent our systems or security measures</li>\n                <li>Use the service for illegal or unauthorized purposes</li>\n                <li>Harass other users or our staff</li>\n              </ul>\n              <p className=\"mt-4\">Upon termination, you forfeit any unused credits or payments and remain liable for all obligations incurred.</p>\n            </section>\n\n            <section>\n              <h2 className=\"text-2xl font-semibold text-primary-text mb-4\">14. Intellectual Property</h2>\n              <p>All content on OwnerFi, including but not limited to trademarks, logos, text, graphics, software, and design elements, are the exclusive property of OwnerFi or our licensors. You may not copy, modify, distribute, or create derivative works without our express written permission.</p>\n            </section>\n\n            <section>\n              <h2 className=\"text-2xl font-semibold text-primary-text mb-4\">15. Governing Law and Binding Arbitration</h2>\n              <div className=\"bg-gray-50 border border-gray-200 rounded-lg p-4 mb-4\">\n                <p className=\"font-bold text-gray-800\">‚öñÔ∏è BINDING ARBITRATION & CLASS ACTION WAIVER</p>\n                <p className=\"text-gray-700 mt-2\"><strong>BY USING THIS SERVICE, YOU AGREE TO:</strong></p>\n                <ul className=\"list-disc ml-6 mt-2 space-y-1 text-gray-700\">\n                  <li><strong>WAIVE YOUR RIGHT TO A JURY TRIAL</strong></li>\n                  <li><strong>WAIVE YOUR RIGHT TO PARTICIPATE IN CLASS ACTION LAWSUITS</strong></li>\n                  <li><strong>RESOLVE ALL DISPUTES THROUGH BINDING ARBITRATION</strong></li>\n                </ul>\n              </div>\n              <p>These Terms shall be governed by the laws of the State of Texas. Any disputes arising from these Terms or your use of the service shall be resolved exclusively through binding arbitration in accordance with the rules of the American Arbitration Association. You agree that any arbitration will be conducted on an individual basis and not as part of a class action or class-wide arbitration.</p>\n            </section>\n\n            <section>\n              <h2 className=\"text-2xl font-semibold text-primary-text mb-4\">16. Severability</h2>\n              <p>If any provision of these Terms is found to be unenforceable, the remaining provisions will continue to be valid and enforceable.</p>\n            </section>\n\n            <section>\n              <h2 className=\"text-2xl font-semibold text-primary-text mb-4\">17. Contact Information</h2>\n              <p>If you have questions about these Terms, please contact us at:</p>\n              <div className=\"mt-2 p-4 bg-gray-50 rounded-lg\">\n                <p><strong>OwnerFi (operated by Prosway)</strong></p>\n                <p>Email: admin@prosway.com</p>\n                <p>Address: 5095 Covington Way, Memphis, TN 38134</p>\n              </div>\n            </section>\n\n            <div className=\"border-t pt-8 mt-8\">\n              <p className=\"text-sm text-gray-500\">\n                By using OwnerFi, you acknowledge that you have read, understood, and agree to be bound by these Terms of Service.\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      <Footer />\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/app/test-checkout/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/components/ui/Button.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/components/ui/Card.tsx","messages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":30,"column":7,"nodeType":"JSXOpeningElement","endLine":34,"endColumn":9}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\n\ninterface CardProps {\n  children: React.ReactNode;\n  className?: string;\n  hover?: boolean;\n}\n\nexport function Card({ children, className = '', hover = false }: CardProps) {\n  const baseClasses = 'bg-white rounded-xl p-6 shadow-light';\n  const hoverClasses = hover ? 'hover:shadow-medium transition-shadow duration-200' : '';\n  \n  return (\n    <div className={`${baseClasses} ${hoverClasses} ${className}`}>\n      {children}\n    </div>\n  );\n}\n\ninterface CardImageProps {\n  src?: string;\n  alt?: string;\n  placeholder?: React.ReactNode;\n  className?: string;\n}\n\nexport function CardImage({ src, alt, placeholder, className = '' }: CardImageProps) {\n  if (src) {\n    return (\n      <img \n        src={src} \n        alt={alt || ''} \n        className={`w-full h-48 object-cover rounded-lg mb-4 ${className}`}\n      />\n    );\n  }\n  \n  return (\n    <div className={`w-full h-48 bg-gradient-to-br from-blue-400 to-purple-500 rounded-lg mb-4 flex items-center justify-center text-white ${className}`}>\n      {placeholder || (\n        <div className=\"text-center\">\n          <div className=\"text-4xl mb-2\">üè†</div>\n          <p className=\"text-sm\">Photo Coming Soon</p>\n        </div>\n      )}\n    </div>\n  );\n}\n\ninterface CardHeaderProps {\n  title: string;\n  subtitle?: string;\n  className?: string;\n}\n\nexport function CardHeader({ title, subtitle, className = '' }: CardHeaderProps) {\n  return (\n    <div className={`mb-4 ${className}`}>\n      <h3 className=\"text-2xl font-semibold text-primary-text mb-2 leading-tight\">\n        {title}\n      </h3>\n      {subtitle && (\n        <p className=\"text-gray-600 text-base\">\n          {subtitle}\n        </p>\n      )}\n    </div>\n  );\n}\n\ninterface CardContentProps {\n  children: React.ReactNode;\n  className?: string;\n}\n\nexport function CardContent({ children, className = '' }: CardContentProps) {\n  return (\n    <div className={`text-gray-600 leading-relaxed ${className}`}>\n      {children}\n    </div>\n  );\n}\n\ninterface CardFooterProps {\n  children: React.ReactNode;\n  className?: string;\n}\n\nexport function CardFooter({ children, className = '' }: CardFooterProps) {\n  return (\n    <div className={`mt-6 pt-4 border-t border-gray-100 ${className}`}>\n      {children}\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/components/ui/CityAutocomplete.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":92,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":92,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useEffect, useRef } from 'react';\n\ninterface City {\n  name: string;\n  state: string;\n  displayName: string;\n}\n\ninterface CityAutocompleteProps {\n  value: string;\n  onChange: (city: string) => void;\n  placeholder?: string;\n  className?: string;\n  label?: string;\n}\n\nexport function CityAutocomplete({ \n  value, \n  onChange, \n  placeholder = \"Enter city name\", \n  className = \"\",\n  label \n}: CityAutocompleteProps) {\n  const [query, setQuery] = useState(value);\n  const [cities, setCities] = useState<City[]>([]);\n  const [showDropdown, setShowDropdown] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const inputRef = useRef<HTMLInputElement>(null);\n  const dropdownRef = useRef<HTMLDivElement>(null);\n\n  // Update query when value prop changes\n  useEffect(() => {\n    setQuery(value);\n  }, [value]);\n\n  // Search cities when query changes (debounced)\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      if (query.length >= 2) {\n        searchCities(query);\n      } else {\n        setCities([]);\n        setShowDropdown(false);\n      }\n    }, 300);\n\n    return () => clearTimeout(timer);\n  }, [query]);\n\n  // Close dropdown when clicking outside\n  useEffect(() => {\n    function handleClickOutside(event: MouseEvent) {\n      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {\n        setShowDropdown(false);\n      }\n    }\n\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => document.removeEventListener('mousedown', handleClickOutside);\n  }, []);\n\n  const searchCities = async (searchQuery: string) => {\n    try {\n      setLoading(true);\n      \n      // Use Google Places API for city autocomplete\n      const response = await fetch('/api/cities/search', {\n        method: 'GET',\n        headers: { 'Content-Type': 'application/json' },\n        cache: 'no-cache'\n      });\n      \n      if (response.ok) {\n        const data = await response.json();\n        const filtered = data\n          .filter((city: { name?: string; description?: string; state?: string }) => \n            city.name?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n            city.description?.toLowerCase().includes(searchQuery.toLowerCase())\n          )\n          .map((city: { name?: string; description?: string; state?: string }) => ({\n            name: city.name || city.description,\n            state: city.state || '',\n            displayName: city.description || city.name\n          }))\n          .slice(0, 8);\n        \n        setCities(filtered);\n        setShowDropdown(filtered.length > 0);\n      }\n    } catch (error) {\n      // Error handled silently\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue = e.target.value;\n    setQuery(newValue);\n  };\n\n  const handleCitySelect = (city: City) => {\n    setQuery(city.name);\n    onChange(city.name);\n    setShowDropdown(false);\n    inputRef.current?.blur();\n  };\n\n  return (\n    <div className=\"relative\" ref={dropdownRef}>\n      {label && (\n        <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n          {label}\n        </label>\n      )}\n      \n      <div className=\"relative\">\n        <input\n          ref={inputRef}\n          type=\"text\"\n          value={query}\n          onChange={handleInputChange}\n          onFocus={() => query.length >= 2 && setCities.length > 0 && setShowDropdown(true)}\n          className={`w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${className}`}\n          placeholder={placeholder}\n          autoComplete=\"off\"\n        />\n        \n        {loading && (\n          <div className=\"absolute right-3 top-3\">\n            <div className=\"animate-spin rounded-full h-5 w-5 border-b-2 border-blue-600\"></div>\n          </div>\n        )}\n      </div>\n\n      {/* Dropdown */}\n      {showDropdown && cities.length > 0 && (\n        <div className=\"absolute z-10 w-full mt-1 bg-white border border-gray-200 rounded-lg shadow-lg max-h-60 overflow-y-auto\">\n          {cities.map((city, index) => (\n            <button\n              key={`${city.name}-${index}`}\n              type=\"button\"\n              onClick={() => handleCitySelect(city)}\n              className=\"w-full text-left px-4 py-3 hover:bg-blue-50 focus:bg-blue-50 focus:outline-none border-b border-gray-100 last:border-b-0\"\n            >\n              <div className=\"font-medium text-gray-900\">{city.name}</div>\n              {city.state && (\n                <div className=\"text-sm text-gray-500\">{city.state}</div>\n              )}\n            </button>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/components/ui/Footer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/components/ui/GoogleCityAutocomplete.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":64,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":64,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useEffect, useRef } from 'react';\n\ninterface GoogleCityAutocompleteProps {\n  value: string;\n  onChange: (city: string) => void;\n  label?: string;\n  placeholder?: string;\n}\n\nexport function GoogleCityAutocomplete({ value, onChange, label, placeholder = \"Type city name...\" }: GoogleCityAutocompleteProps) {\n  const [query, setQuery] = useState(value);\n  const [suggestions, setSuggestions] = useState<string[]>([]);\n  const [showDropdown, setShowDropdown] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const inputRef = useRef<HTMLInputElement>(null);\n  const dropdownRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    setQuery(value);\n  }, [value]);\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      if (query.length >= 2) {\n        searchCities(query);\n      } else {\n        setSuggestions([]);\n        setShowDropdown(false);\n      }\n    }, 500);\n\n    return () => clearTimeout(timer);\n  }, [query]);\n\n  useEffect(() => {\n    function handleClickOutside(event: MouseEvent) {\n      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {\n        setShowDropdown(false);\n      }\n    }\n\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => document.removeEventListener('mousedown', handleClickOutside);\n  }, []);\n\n  const searchCities = async (searchQuery: string) => {\n    try {\n      setLoading(true);\n      \n      const response = await fetch(`/api/cities/search?q=${encodeURIComponent(searchQuery)}`);\n      const data = await response.json();\n      \n      if (Array.isArray(data)) {\n        const cityNames = data\n          .filter(place => place.description)\n          .map(place => place.description)\n          .slice(0, 8);\n        \n        setSuggestions(cityNames);\n        setShowDropdown(cityNames.length > 0);\n      }\n    } catch (error) {\n      setSuggestions([]);\n      setShowDropdown(false);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSelect = (cityName: string) => {\n    setQuery(cityName);\n    onChange(cityName);\n    setShowDropdown(false);\n    inputRef.current?.blur();\n  };\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(e.target.value);\n  };\n\n  const handleKeyDown = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && suggestions.length > 0) {\n      e.preventDefault();\n      handleSelect(suggestions[0]);\n    }\n  };\n\n  return (\n    <div className=\"relative\" ref={dropdownRef}>\n      {label && (\n        <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n          {label}\n        </label>\n      )}\n      \n      <div className=\"relative\">\n        <input\n          ref={inputRef}\n          type=\"text\"\n          value={query}\n          onChange={handleInputChange}\n          onKeyDown={handleKeyDown}\n          onFocus={() => query.length >= 2 && suggestions.length > 0 && setShowDropdown(true)}\n          className=\"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n          placeholder={placeholder}\n          autoComplete=\"off\"\n        />\n        \n        {loading && (\n          <div className=\"absolute right-3 top-3\">\n            <div className=\"animate-spin rounded-full h-5 w-5 border-b-2 border-blue-600\"></div>\n          </div>\n        )}\n      </div>\n\n      {showDropdown && suggestions.length > 0 && (\n        <div className=\"absolute z-10 w-full mt-1 bg-white border border-gray-200 rounded-lg shadow-lg max-h-60 overflow-y-auto\">\n          {suggestions.map((suggestion, index) => (\n            <button\n              key={index}\n              type=\"button\"\n              onClick={() => handleSelect(suggestion)}\n              className=\"w-full text-left px-4 py-3 hover:bg-blue-50 focus:bg-blue-50 focus:outline-none border-b border-gray-100 last:border-b-0\"\n            >\n              <div className=\"font-medium text-gray-900\">{suggestion}</div>\n            </button>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/components/ui/GooglePlacesAutocomplete.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'hasGoogleMapsKey' is assigned a value but never used.","line":33,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":33,"endColumn":25},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":115,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":115,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3660,3663],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3660,3663],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'onChange'. Either include it or remove the dependency array. If 'onChange' changes too often, find the parent component that defines it and wrap that definition in useCallback.","line":141,"column":6,"nodeType":"ArrayExpression","endLine":141,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [onChange]","fix":{"range":[4556,4558],"text":"[onChange]"}}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":180,"column":59,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[5897,5980],"text":"\n            You can still type city names manually (e.g., &quot;Dallas, TX\")\n          "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[5897,5980],"text":"\n            You can still type city names manually (e.g., &ldquo;Dallas, TX\")\n          "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[5897,5980],"text":"\n            You can still type city names manually (e.g., &#34;Dallas, TX\")\n          "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[5897,5980],"text":"\n            You can still type city names manually (e.g., &rdquo;Dallas, TX\")\n          "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":180,"column":70,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[5897,5980],"text":"\n            You can still type city names manually (e.g., \"Dallas, TX&quot;)\n          "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[5897,5980],"text":"\n            You can still type city names manually (e.g., \"Dallas, TX&ldquo;)\n          "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[5897,5980],"text":"\n            You can still type city names manually (e.g., \"Dallas, TX&#34;)\n          "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[5897,5980],"text":"\n            You can still type city names manually (e.g., \"Dallas, TX&rdquo;)\n          "},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useEffect, useRef, useState } from 'react';\n\n// Extend window to include Google Maps\ndeclare global {\n  interface Window {\n    google: typeof google;\n    googleMapsLoaded?: Event;\n  }\n}\n\ninterface GooglePlacesAutocompleteProps {\n  value: string;\n  onChange: (city: string) => void;\n  label?: string;\n  placeholder?: string;\n}\n\nexport function GooglePlacesAutocomplete({ \n  value, \n  onChange, \n  label, \n  placeholder = \"Type city name...\" \n}: GooglePlacesAutocompleteProps) {\n  const inputRef = useRef<HTMLInputElement>(null);\n  const autocompleteRef = useRef<google.maps.places.Autocomplete | null>(null);\n  const [mapsLoadError, setMapsLoadError] = useState(false);\n  const [mapsLoaded, setMapsLoaded] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  \n  // Check if Google Maps API key is available\n  const hasGoogleMapsKey = typeof window !== 'undefined' && process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY;\n\n  useEffect(() => {\n    const initAutocomplete = () => {\n      try {\n        if (!inputRef.current || !window.google?.maps?.places) {\n          return;\n        }\n\n        // Clear any existing autocomplete\n        if (autocompleteRef.current) {\n          google.maps.event.clearInstanceListeners(autocompleteRef.current);\n        }\n\n        // Initialize Google Places Autocomplete\n        autocompleteRef.current = new window.google.maps.places.Autocomplete(inputRef.current, {\n          types: ['(cities)'],\n          componentRestrictions: { country: 'US' }\n        });\n\n        // Prevent autocomplete from interfering with React's input handling\n        autocompleteRef.current.set('strictBounds', false);\n        setMapsLoaded(true);\n        setMapsLoadError(false);\n        setIsLoading(false);\n\n        // Listen for place selection with session isolation\n        const listener = autocompleteRef.current.addListener('place_changed', () => {\n          try {\n            const place = autocompleteRef.current?.getPlace();\n            if (place?.formatted_address && place?.address_components) {\n              // Extract city and state from formatted address\n              const addressComponents = place.address_components;\n              let city = '';\n              let state = '';\n              \n              addressComponents.forEach(component => {\n                if (component.types.includes('locality')) {\n                  city = component.long_name;\n                }\n                if (component.types.includes('administrative_area_level_1')) {\n                  state = component.short_name;\n                }\n              });\n\n              const fullCityName = state ? `${city}, ${state}` : city;\n              \n              // CRITICAL: Isolate from session validation by using async microtask\n              Promise.resolve().then(() => {\n                React.startTransition(() => {\n                  onChange(fullCityName);\n                });\n              });\n            }\n          } catch (error) {\n            console.error('Place selection error:', error);\n          }\n        });\n\n        return () => {\n          if (listener) {\n            google.maps.event.removeListener(listener);\n          }\n        };\n      } catch (error) {\n        console.error('Autocomplete initialization failed:', error);\n        setMapsLoadError(true);\n        setIsLoading(false);\n      }\n    };\n\n    // Handle Google Maps state changes\n    const handleMapsReady = () => {\n      initAutocomplete();\n    };\n\n    const handleMapsError = () => {\n      setIsLoading(false);\n      setMapsLoadError(true);\n    };\n\n    // Check current Google Maps state\n    const mapsState = (window as any).googleMapsState;\n    if (mapsState?.loaded && window.google?.maps?.places) {\n      handleMapsReady();\n    } else if (mapsState?.error) {\n      handleMapsError();\n    } else {\n      // Listen for loading events\n      window.addEventListener('googleMapsReady', handleMapsReady);\n      window.addEventListener('googleMapsError', handleMapsError);\n      \n      return () => {\n        window.removeEventListener('googleMapsReady', handleMapsReady);\n        window.removeEventListener('googleMapsError', handleMapsError);\n        if (autocompleteRef.current) {\n          google.maps.event.clearInstanceListeners(autocompleteRef.current);\n          autocompleteRef.current = null;\n        }\n      };\n    }\n\n    return () => {\n      if (autocompleteRef.current) {\n        google.maps.event.clearInstanceListeners(autocompleteRef.current);\n        autocompleteRef.current = null;\n      }\n    };\n  }, []);\n\n  // Handle manual input changes\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    onChange(e.target.value);\n  };\n\n  return (\n    <div>\n      {label && (\n        <label className=\"block text-sm font-medium text-white mb-2\">\n          {label}\n        </label>\n      )}\n      \n      <div className=\"relative\">\n        <input\n          ref={inputRef}\n          type=\"text\"\n          value={value}\n          onChange={handleInputChange}\n          className=\"w-full px-4 py-4 bg-emerald-500/10 border border-emerald-400/30 rounded-xl focus:outline-none focus:ring-2 focus:ring-emerald-400 focus:border-emerald-400 text-white placeholder-slate-400 font-normal\"\n          placeholder={isLoading ? \"Loading maps...\" : placeholder}\n          disabled={isLoading}\n        />\n        \n        {isLoading && (\n          <div className=\"absolute right-3 top-1/2 transform -translate-y-1/2\">\n            <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-blue-500\"></div>\n          </div>\n        )}\n      </div>\n      \n      {mapsLoadError && (\n        <div className=\"mt-1 p-2 bg-orange-50 border border-orange-200 rounded text-sm\">\n          <p className=\"text-orange-800 font-medium\">\n            üó∫Ô∏è Maps autocomplete unavailable\n          </p>\n          <p className=\"text-orange-600 text-xs mt-1\">\n            You can still type city names manually (e.g., \"Dallas, TX\")\n          </p>\n        </div>\n      )}\n      \n      {mapsLoaded && !mapsLoadError && (\n        <p className=\"mt-1 text-xs text-green-600\">\n          ‚úì Maps autocomplete ready\n        </p>\n      )}\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/components/ui/Header.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ExtendedSession' is defined but never used.","line":5,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":25},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":40,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":40,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1586,1589],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1586,1589],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":41,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":41,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1660,1663],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1660,1663],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport Link from 'next/link';\nimport { useSession, signOut } from 'next-auth/react';\nimport { Button } from './Button';\nimport { ExtendedSession } from '@/types/session';\n\ninterface HeaderProps {\n  className?: string;\n}\n\nexport function Header({ className = '' }: HeaderProps) {\n  const { data: session } = useSession();\n\n  return (\n    <header className={`bg-slate-800/50 backdrop-blur-lg border-b border-slate-700/50 sticky top-0 z-50 ${className}`}>\n      <div className=\"px-6 py-4\">\n        <div className=\"flex items-center justify-between\">\n          {/* Masculine logo design */}\n          <Link href=\"/\" className=\"flex items-center space-x-3 group\">\n            <div className=\"w-12 h-12 bg-gradient-to-br from-emerald-400 to-blue-500 rounded-xl flex items-center justify-center shadow-2xl group-hover:scale-110 transition-all duration-300\">\n              <svg className=\"w-7 h-7 text-white\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path d=\"M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z\"/>\n              </svg>\n            </div>\n            <div>\n              <h1 className=\"text-2xl font-black text-white group-hover:text-emerald-400 transition-all duration-300\">\n                OwnerFi\n              </h1>\n            </div>\n          </Link>\n          \n          {/* Dynamic navigation based on auth status */}\n          <div className=\"flex items-center space-x-4\">\n            {session?.user ? (\n              <>\n                <Button \n                  variant=\"primary\" \n                  size=\"sm\" \n                  href={\n                    (session as any)?.user?.role === 'admin' ? '/admin' :\n                    (session as any)?.user?.role === 'realtor' ? '/realtor-dashboard' : '/dashboard'\n                  } \n                  className=\"font-bold bg-gradient-to-r from-emerald-500 to-emerald-600 hover:from-emerald-400 hover:to-emerald-500 px-6 py-2 rounded-xl transition-all duration-300 hover:scale-105 shadow-xl shadow-emerald-500/25\"\n                >\n                  DASHBOARD\n                </Button>\n                <Button \n                  variant=\"ghost\" \n                  size=\"sm\" \n                  onClick={() => signOut({ callbackUrl: '/' })}\n                  className=\"font-bold text-slate-300 hover:text-white px-4 py-2 rounded-xl hover:bg-slate-700/50 transition-all duration-300\"\n                >\n                  SIGN OUT\n                </Button>\n              </>\n            ) : (\n              <>\n                <Button \n                  variant=\"ghost\" \n                  size=\"sm\" \n                  href=\"/auth/signin\" \n                  className=\"hidden sm:inline-flex font-bold text-slate-300 hover:text-white px-4 py-2 rounded-xl hover:bg-slate-700/50 transition-all duration-300\"\n                >\n                  SIGN IN\n                </Button>\n                <Button \n                  variant=\"primary\" \n                  size=\"sm\" \n                  href=\"/signup\" \n                  className=\"font-bold bg-gradient-to-r from-emerald-500 to-emerald-600 hover:from-emerald-400 hover:to-emerald-500 px-6 py-2 rounded-xl transition-all duration-300 hover:scale-105 shadow-xl shadow-emerald-500/25\"\n                >\n                  GET STARTED\n                </Button>\n              </>\n            )}\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/components/ui/Hero.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'backgroundImage' is defined but never used.","line":16,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":18}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport { Button } from './Button';\n\ninterface HeroProps {\n  backgroundImage?: string;\n  title: string;\n  subtitle: string;\n  ctaText?: string;\n  ctaHref?: string;\n  ctaOnClick?: () => void;\n  showUserTypeButtons?: boolean;\n  className?: string;\n}\n\nexport function Hero({ \n  backgroundImage, \n  title, \n  subtitle, \n  ctaText, \n  ctaHref, \n  ctaOnClick, \n  showUserTypeButtons = false,\n  className = '' \n}: HeroProps) {\n  return (\n    <section className={`bg-gradient-to-br from-accent-light via-surface-bg to-neutral-hover ${className}`}>\n      {/* Mobile-first hero content */}\n      <div className=\"px-6 py-16\">\n        <div className=\"text-center max-w-2xl mx-auto\">\n          {/* Mobile-optimized heading */}\n          <h1 className=\"text-4xl font-bold text-primary-text mb-6 leading-tight\">\n            {title}\n          </h1>\n          \n          {/* Mobile-friendly subtitle */}\n          <div className=\"text-lg text-secondary-text mb-12 leading-relaxed\" dangerouslySetInnerHTML={{ __html: subtitle }}>\n          </div>\n          \n          {/* Mobile-optimized buttons */}\n          {showUserTypeButtons ? (\n            <div className=\"space-y-4\">\n              <Button \n                variant=\"primary\" \n                size=\"lg\"\n                href=\"/signup\"\n                className=\"w-full text-lg py-5 font-semibold min-h-[56px] shadow-medium\"\n              >\n                üè† I Need a Home (Start Here)\n              </Button>\n              <Button \n                variant=\"outline\" \n                size=\"lg\"\n                href=\"/signup\"\n                className=\"w-full text-lg py-5 font-semibold min-h-[56px]\"\n              >\n                üíº I Help Families Find Homes\n              </Button>\n              <p className=\"text-sm text-muted-text mt-4\">\n                Free to start ‚Ä¢ No credit check required ‚Ä¢ Real human support\n              </p>\n            </div>\n          ) : (\n            <div>\n              <Button \n                variant=\"primary\" \n                size=\"lg\"\n                href={ctaHref}\n                onClick={ctaOnClick}\n                className=\"w-full text-lg py-5 font-semibold min-h-[56px] shadow-medium\"\n              >\n                {ctaText}\n              </Button>\n              <p className=\"text-sm text-muted-text mt-4\">\n                Free to start ‚Ä¢ No credit check required ‚Ä¢ Real human support\n              </p>\n            </div>\n          )}\n        </div>\n      </div>\n    </section>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/components/ui/Input.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/components/ui/Newsletter.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":22,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { Button } from './Button';\nimport { Input } from './Input';\n\ninterface NewsletterProps {\n  className?: string;\n}\n\nexport function Newsletter({ className = '' }: NewsletterProps) {\n  const [email, setEmail] = useState('');\n  const [status, setStatus] = useState<'idle' | 'loading' | 'success' | 'error'>('idle');\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setStatus('loading');\n    \n    // Simulate API call\n    try {\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      setStatus('success');\n      setEmail('');\n    } catch (error) {\n      setStatus('error');\n    }\n  };\n\n  return (\n    <section className={`py-12 px-6 bg-surface-bg ${className}`}>\n      <div className=\"text-center mb-8\">\n        <h2 className=\"text-3xl font-bold text-primary-text mb-4\">\n          Don&apos;t Miss Out\n        </h2>\n        <p className=\"text-lg text-secondary-text leading-relaxed\">\n          New homes get added daily. Be the first to know when something perfect for you becomes available.\n        </p>\n      </div>\n      \n      <div className=\"bg-primary-bg rounded-xl p-6 shadow-soft\">\n        {status === 'success' ? (\n          <div className=\"text-center\">\n            <div className=\"text-4xl mb-4\">‚ú®</div>\n            <p className=\"text-accent-primary text-xl font-semibold\">\n              You&apos;re all set! We&apos;ll be in touch.\n            </p>\n          </div>\n        ) : (\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <Input\n              type=\"email\"\n              placeholder=\"Your email address\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n              required\n              disabled={status === 'loading'}\n            />\n            <Button\n              type=\"submit\"\n              variant=\"primary\"\n              size=\"lg\"\n              disabled={status === 'loading' || !email}\n              className=\"w-full font-semibold text-lg py-5\"\n            >\n              {status === 'loading' ? 'Adding You...' : 'Stay Updated'}\n            </Button>\n            {status === 'error' && (\n              <p className=\"text-accent-primary text-sm mt-2\">\n                Oops! Please try again.\n              </p>\n            )}\n          </form>\n        )}\n      </div>\n    </section>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/components/ui/PropertySwiper.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'onFavorite' is defined but never used.","line":18,"column":69,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":79},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isDragging' is assigned a value but never used.","line":20,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setIsDragging' is assigned a value but never used.","line":20,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":35},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'dragOffset' is assigned a value but never used.","line":21,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setDragOffset' is assigned a value but never used.","line":21,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":35},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'startPos' is assigned a value but never used.","line":22,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setStartPos' is assigned a value but never used.","line":22,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setButtonPressed' is assigned a value but never used.","line":23,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":41},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isTransitioning' is assigned a value but never used.","line":24,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setIsTransitioning' is assigned a value but never used.","line":24,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":45},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleMouseDown' is assigned a value but never used.","line":101,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":101,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleMouseMove' is assigned a value but never used.","line":102,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":102,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleMouseUp' is assigned a value but never used.","line":103,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":103,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isFavorited' is assigned a value but never used.","line":105,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":105,"endColumn":20},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":117,"column":13,"nodeType":"JSXOpeningElement","endLine":121,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport { Button } from './Button';\n\nimport { PropertyListing } from '@/lib/property-schema';\n\ninterface PropertyListingSwiperProps {\n  properties: PropertyListing[];\n  onLike: (property: PropertyListing) => void;\n  onPass: (property: PropertyListing) => void;\n  onFavorite: (property: PropertyListing) => void;\n  favorites: string[];\n  passedIds?: string[];\n  isLoading?: boolean;\n}\n\nexport function PropertyListingSwiper({ properties, onLike, onPass, onFavorite, favorites, passedIds = [], isLoading = false }: PropertyListingSwiperProps) {\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [isDragging, setIsDragging] = useState(false);\n  const [dragOffset, setDragOffset] = useState({ x: 0, y: 0 });\n  const [startPos, setStartPos] = useState({ x: 0, y: 0 });\n  const [buttonPressed, setButtonPressed] = useState<'like' | 'pass' | null>(null);\n  const [isTransitioning, setIsTransitioning] = useState(false);\n  const [showToast, setShowToast] = useState<{ type: 'saved' | 'deleted'; show: boolean }>({ type: 'saved', show: false });\n  const cardRef = useRef<HTMLDivElement>(null);\n  \n  // Filter out passed properties\n  const visibleProperties = properties.filter(property => !passedIds.includes(property.id));\n  \n  // Auto-adjust index if current property was filtered out\n  const safeIndex = currentIndex >= visibleProperties.length ? \n    Math.max(0, visibleProperties.length - 1) : currentIndex;\n  const currentPropertyListing = visibleProperties[safeIndex];\n  \n  // Update index if it was adjusted\n  useEffect(() => {\n    if (currentIndex !== safeIndex) {\n      setCurrentIndex(safeIndex);\n    }\n  }, [safeIndex, currentIndex]);\n\n  // ONLY use database imageUrls (no API calls)\n  const getHousePhoto = (property: PropertyListing): string => {\n    // All properties should have imageUrls saved in database\n    return property.imageUrls?.[0] || '/placeholder-house.jpg'; // Simple fallback\n  };\n\n  // Loading state\n  if (isLoading) {\n    return (\n      <div className=\"flex-1 flex items-center justify-center p-6\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-accent-primary mx-auto mb-4\"></div>\n          <h2 className=\"text-xl font-semibold text-primary-text mb-2\">\n            Finding Your Perfect Properties\n          </h2>\n          <p className=\"text-secondary-text\">\n            Searching through thousands of owner-financed homes...\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  // No properties message\n  if (!currentPropertyListing || visibleProperties.length === 0) {\n    return (\n      <div className=\"flex-1 flex items-center justify-center p-6\">\n        <div className=\"text-center max-w-md\">\n          <div className=\"text-6xl mb-4\">üîç</div>\n          <h2 className=\"text-2xl font-semibold text-gray-900 mb-4\">\n            We&apos;re On It!\n          </h2>\n          <p className=\"text-gray-600 mb-6 leading-relaxed\">\n            We don&apos;t have properties matching your criteria at the moment, but we&apos;re constantly adding new owner-financed properties to our platform.\n          </p>\n          <div className=\"bg-blue-50 rounded-lg p-4 mb-6\">\n            <p className=\"text-blue-800 font-medium\">\n              üí° We&apos;ll notify you as soon as properties become available in your area!\n            </p>\n          </div>\n          <Button variant=\"primary\" href=\"/dashboard/settings\">\n            Adjust Search Criteria\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  // Simple next property function\n  const handleNextPropertyListing = () => {\n    if (currentIndex < visibleProperties.length - 1) {\n      setCurrentIndex(prev => prev + 1);\n    } else {\n      setCurrentIndex(0); // Loop back to first\n    }\n  };\n\n  // Disable swipe functionality - just use arrow buttons\n  const handleMouseDown = () => {};\n  const handleMouseMove = () => {};\n  const handleMouseUp = () => {};\n\n  const isFavorited = favorites.includes(currentPropertyListing.id);\n\n  return (\n    <div className=\"flex-1 flex flex-col relative overflow-hidden\">\n      {/* Mobile-First PropertyListing Card */}\n      <div className=\"flex-1 p-4\">\n        <div \n          ref={cardRef}\n          className=\"relative w-full h-full bg-white rounded-3xl shadow-lg overflow-hidden\"\n        >\n          {/* PropertyListing Image - Large and Prominent */}\n          <div className=\"relative h-80\">\n            <img\n              src={getHousePhoto(currentPropertyListing)}\n              alt={`${currentPropertyListing.address}`}\n              className=\"w-full h-full object-cover\"\n            />\n\n            {/* PropertyListing Counter */}\n            <div className=\"absolute top-4 left-4 bg-black/50 text-white px-3 py-1 rounded-full text-sm font-medium\">\n              {currentIndex + 1} of {visibleProperties.length}\n            </div>\n\n            {/* Owner Financing Badge */}\n            <div className=\"absolute bottom-4 left-4 bg-blue-500 text-white px-3 py-1 rounded-full text-sm font-semibold\">\n              Owner Finance\n            </div>\n          </div>\n\n          {/* PropertyListing Navigation Row - Clean and Simple */}\n          <div className=\"px-6 py-4 border-b border-gray-100\">\n            <div className=\"flex items-center justify-between\">\n              <button \n                onClick={() => setCurrentIndex(prev => prev > 0 ? prev - 1 : visibleProperties.length - 1)}\n                className=\"p-4 bg-blue-100 hover:bg-blue-200 rounded-full transition-all disabled:opacity-30 disabled:cursor-not-allowed\"\n                disabled={visibleProperties.length <= 1}\n              >\n                <svg className=\"w-10 h-10 text-blue-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={3} d=\"M15 19l-7-7 7-7\" />\n                </svg>\n              </button>\n              \n              <div className=\"text-center\">\n                <div className=\"text-sm text-gray-500 mb-1\">Browsing Properties</div>\n                <div className=\"text-lg font-bold text-gray-800\">\n                  {currentIndex + 1} of {visibleProperties.length}\n                </div>\n              </div>\n              \n              <button \n                onClick={() => setCurrentIndex(prev => prev < visibleProperties.length - 1 ? prev + 1 : 0)}\n                className=\"p-4 bg-blue-100 hover:bg-blue-200 rounded-full transition-all disabled:opacity-30 disabled:cursor-not-allowed\"\n                disabled={visibleProperties.length <= 1}\n              >\n                <svg className=\"w-10 h-10 text-blue-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={3} d=\"M9 5l7 7-7 7\" />\n                </svg>\n              </button>\n            </div>\n          </div>\n\n          {/* PropertyListing Details */}\n          <div className=\"p-6 space-y-6\">\n            {/* Price & Address Section */}\n            <div className=\"bg-slate-50 rounded-xl p-4 border border-slate-200\">\n              <div className=\"flex justify-between items-start\">\n                <div className=\"flex-1\">\n                  <div className=\"text-sm text-slate-600 mb-1\">Asking Price</div>\n                  <div className=\"text-2xl font-bold text-slate-900\">\n                    ${currentPropertyListing.listPrice?.toLocaleString()}\n                  </div>\n                </div>\n                <div className=\"text-right\">\n                  <div className=\"text-lg font-semibold text-slate-700\">{currentPropertyListing.address}</div>\n                  <div className=\"text-base text-slate-600\">{currentPropertyListing.city}, {currentPropertyListing.state} {currentPropertyListing.zipCode}</div>\n                </div>\n              </div>\n            </div>\n\n            {/* PropertyListing Features Section */}\n            <div className=\"bg-slate-100 rounded-xl p-4 border border-slate-300\">\n              <div className=\"grid grid-cols-3 gap-4 text-center\">\n                <div>\n                  <div className=\"text-2xl font-bold text-slate-800\">{currentPropertyListing.bedrooms}</div>\n                  <div className=\"text-base text-slate-600\">Bedrooms</div>\n                </div>\n                <div>\n                  <div className=\"text-2xl font-bold text-slate-800\">{currentPropertyListing.bathrooms}</div>\n                  <div className=\"text-base text-slate-600\">Bathrooms</div>\n                </div>\n                <div>\n                  <div className=\"text-2xl font-bold text-slate-800\">{currentPropertyListing.squareFeet?.toLocaleString()}</div>\n                  <div className=\"text-base text-slate-600\">Sq Ft</div>\n                </div>\n              </div>\n            </div>\n\n            {/* Owner Financing Terms Section */}\n            <div className=\"bg-blue-50 rounded-xl p-4 border border-blue-200\">\n              <h3 className=\"text-xl font-bold text-center text-blue-700 mb-3\">üí≥ Owner Financing Terms</h3>\n              \n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between items-center border-b border-blue-200 pb-1\">\n                  <span className=\"text-base text-blue-700 font-medium\">Monthly Payment:</span>\n                  <div className=\"text-right\">\n                    <div className=\"text-2xl font-bold text-blue-800\">${currentPropertyListing.monthlyPayment?.toLocaleString()}/mo</div>\n                    <div className=\"text-sm text-blue-600\">est</div>\n                  </div>\n                </div>\n                \n                <div className=\"flex justify-between items-center border-b border-blue-200 pb-1\">\n                  <span className=\"text-base text-blue-700 font-medium\">Down Payment:</span>\n                  <div className=\"text-right\">\n                    <div className=\"text-2xl font-bold text-blue-800\">${currentPropertyListing.downPaymentAmount?.toLocaleString()}</div>\n                    <div className=\"text-sm text-blue-600\">est</div>\n                  </div>\n                </div>\n                \n                <div className=\"flex justify-between items-center border-b border-blue-200 pb-1\">\n                  <span className=\"text-base text-blue-700 font-medium\">Interest Rate:</span>\n                  <div className=\"text-right\">\n                    <div className=\"text-2xl font-bold text-blue-800\">{currentPropertyListing.interestRate}%</div>\n                    <div className=\"text-sm text-blue-600\">est</div>\n                  </div>\n                </div>\n                \n                <div className=\"flex justify-between items-center pt-1\">\n                  <span className=\"text-base text-blue-700 font-medium\">Term Length:</span>\n                  <div className=\"text-right\">\n                    <div className=\"text-2xl font-bold text-blue-800\">{currentPropertyListing.termYears} years</div>\n                    <div className=\"text-sm text-blue-600\">est</div>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {/* More Details Link */}\n            <div className=\"text-center mb-4\">\n              <a\n                href={`https://www.google.com/search?q=${encodeURIComponent(`${currentPropertyListing.address} ${currentPropertyListing.city}, ${currentPropertyListing.state} ${currentPropertyListing.zipCode}`)}`}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"inline-flex items-center space-x-2 text-blue-600 hover:text-blue-800 font-medium transition-colors\"\n              >\n                <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\" />\n                </svg>\n                <span>More Details</span>\n                <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14\" />\n                </svg>\n              </a>\n            </div>\n\n            {/* Action Buttons */}\n            <div className=\"flex space-x-4\">\n              <button\n                onClick={() => {\n                  onPass(currentPropertyListing);\n                  setShowToast({ type: 'deleted', show: true });\n                  setTimeout(() => setShowToast({ type: 'deleted', show: false }), 2000);\n                  handleNextPropertyListing();\n                }}\n                className={`flex-1 py-4 px-6 rounded-xl font-semibold transition-all ${\n                  buttonPressed === 'pass' \n                    ? 'bg-red-500 text-white scale-105' \n                    : 'bg-red-100 text-red-700 hover:bg-red-200 active:scale-95'\n                }`}\n              >\n                üëé Pass\n              </button>\n              <button\n                onClick={() => {\n                  onLike(currentPropertyListing);\n                  setShowToast({ type: 'saved', show: true });\n                  setTimeout(() => setShowToast({ type: 'saved', show: false }), 2000);\n                  // Don't auto-advance for likes\n                }}\n                className={`flex-1 py-4 px-6 rounded-xl font-semibold transition-all ${\n                  buttonPressed === 'like' \n                    ? 'bg-green-500 text-white scale-105' \n                    : 'bg-green-100 text-green-700 hover:bg-green-200 active:scale-95'\n                }`}\n              >\n                üëç Interested\n              </button>\n            </div>\n\n            {/* Toast Notification */}\n            {showToast.show && (\n              <div className={`fixed top-20 left-1/2 transform -translate-x-1/2 px-6 py-3 rounded-full text-white font-semibold shadow-lg z-50 transition-all ${\n                showToast.type === 'saved' \n                  ? 'bg-green-500' \n                  : 'bg-red-500'\n              }`}>\n                {showToast.type === 'saved' ? '‚úÖ PropertyListing Saved!' : 'üóëÔ∏è PropertyListing Deleted!'}\n              </div>\n            )}\n          </div>\n\n        </div>\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/components/ui/SimpleCitySelect.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/components/ui/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/lib/auth-utils.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ExtendedUser' is defined but never used.","line":4,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":39}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { getServerSession } from 'next-auth/next';\nimport { redirect } from 'next/navigation';\nimport { authOptions } from './auth';\nimport { ExtendedSession, ExtendedUser } from '@/types/session';\n\n// Check if user has required role, redirect if not\nexport async function requireRole(requiredRole: 'buyer' | 'realtor'): Promise<ExtendedSession> {\n  const session = await getServerSession(authOptions) as ExtendedSession | null;\n  \n  if (!session?.user) {\n    // Not logged in - redirect to appropriate signin\n    if (requiredRole === 'buyer') {\n      redirect('/auth/signin');\n    } else {\n      redirect('/realtor/signin');\n    }\n  }\n  \n  if (session.user.role !== requiredRole) {\n    // Wrong role - redirect to their appropriate dashboard\n    if (session.user.role === 'buyer') {\n      redirect('/dashboard');\n    } else if (session.user.role === 'realtor') {\n      redirect('/realtor/dashboard');\n    } else {\n      // No role set - redirect to signin\n      redirect('/auth/signin');\n    }\n  }\n  \n  return session;\n}\n\n// Get session and validate role for API routes\nexport async function getSessionWithRole(requiredRole: 'buyer' | 'realtor'): Promise<ExtendedSession> {\n  const session = await getServerSession(authOptions) as ExtendedSession | null;\n  \n  if (!session?.user) {\n    throw new Error('Not authenticated');\n  }\n  \n  if (session.user.role !== requiredRole) {\n    throw new Error(`Access denied. Required role: ${requiredRole}, current role: ${session.user.role}`);\n  }\n  \n  return session;\n}\n\n// Check if current user can access a route\nexport function canAccessRoute(userRole: string | undefined, route: string): boolean {\n  if (!userRole) return false;\n  \n  // Buyer routes\n  if (route.startsWith('/dashboard')) {\n    return userRole === 'buyer';\n  }\n  \n  // Realtor routes  \n  if (route.startsWith('/realtor')) {\n    return userRole === 'realtor';\n  }\n  \n  // Public routes\n  return true;\n}","usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/lib/auth.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'doc' is defined but never used.","line":5,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":6},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getDoc' is defined but never used.","line":6,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ExtendedUser' is defined but never used.","line":13,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":22},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":15,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[366,369],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[366,369],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":72,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":72,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1876,1879],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1876,1879],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":78,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":78,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2006,2009],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2006,2009],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Use any type to avoid NextAuth version conflicts\nimport CredentialsProvider from 'next-auth/providers/credentials';\nimport { compare } from 'bcryptjs';\nimport { \n  doc, \n  getDoc, \n  collection, \n  query, \n  where, \n  getDocs\n} from 'firebase/firestore';\nimport { db } from './firebase';\nimport { ExtendedUser } from '@/types/session';\n\nexport const authOptions: any = {\n  providers: [\n    CredentialsProvider({\n      name: 'credentials',\n      credentials: {\n        email: { label: 'Email', type: 'email' },\n        password: { label: 'Password', type: 'password' },\n        firstName: { label: 'First Name', type: 'text' },\n        lastName: { label: 'Last Name', type: 'text' },\n        isSignUp: { label: 'Is Sign Up', type: 'text' }\n      },\n      async authorize(credentials) {\n        if (!credentials?.email || !credentials?.password) {\n          return null;\n        }\n\n        const email = credentials.email as string;\n        const password = credentials.password as string;\n\n        // Sign in logic - look up user in Firebase\n        if (!db) {\n          return null;\n        }\n        \n        const usersQuery = query(\n          collection(db, 'users'),\n          where('email', '==', email)\n        );\n        const userDocs = await getDocs(usersQuery);\n        \n        if (userDocs.empty) {\n          return null;\n        }\n\n        const userDoc = userDocs.docs[0];\n        const userData = userDoc.data();\n        \n        if (!userData.password) {\n          return null;\n        }\n\n        const isPasswordValid = await compare(password, userData.password);\n        \n        if (!isPasswordValid) {\n          return null;\n        }\n\n        return {\n          id: userDoc.id,\n          email: userData.email,\n          name: userData.name,\n          role: userData.role,\n        };\n      },\n    }),\n  ],\n  callbacks: {\n    async jwt({ token, user }: any) {\n      if (user) {\n        token.role = user.role;\n      }\n      return token;\n    },\n    async session({ session, token }: any) {\n      if (token && session.user) {\n        session.user.id = token.sub;\n        session.user.role = token.role;\n      }\n      return session;\n    },\n  },\n  pages: {\n    signIn: '/auth/signin',\n  },\n  session: {\n    strategy: 'jwt' as const,\n    maxAge: 30 * 24 * 60 * 60, // 30 days\n    updateAge: 24 * 60 * 60, // 24 hours\n  },\n  cookies: {\n    sessionToken: {\n      name: `next-auth.session-token`,\n      options: {\n        httpOnly: true,\n        // Use 'none' for cross-origin compatibility with Google Maps API\n        sameSite: process.env.NODE_ENV === 'production' ? 'none' : 'lax',\n        path: '/',\n        secure: process.env.NODE_ENV === 'production',\n        maxAge: 30 * 24 * 60 * 60, // 30 days\n        // Remove domain restriction to prevent Google Maps API cross-origin issues\n        domain: undefined\n      }\n    }\n  },\n};","usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/lib/background-jobs.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":106,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":106,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Background job system for async property processing\nimport { doc, updateDoc, serverTimestamp, writeBatch } from 'firebase/firestore';\nimport { db } from './firebase';\nimport { getCitiesWithinRadiusComprehensive } from './comprehensive-cities';\n\ntype JobType = 'populate_nearby_cities';\ntype JobStatus = 'pending' | 'processing' | 'completed' | 'failed';\n\ninterface BackgroundJob {\n  id: string;\n  type: JobType;\n  propertyId: string;\n  city: string;\n  state: string;\n  status: JobStatus;\n  createdAt: Date;\n  completedAt?: Date;\n  error?: string;\n}\n\n// Job queue (in production, use Redis or Cloud Tasks)\nconst jobQueue: BackgroundJob[] = [];\nlet isProcessing = false;\n\n/**\n * Add job to queue for nearby cities population\n */\nexport function queueNearbyCitiesJob(propertyId: string, city: string, state: string): void {\n  const job: BackgroundJob = {\n    id: `${propertyId}_${Date.now()}`,\n    type: 'populate_nearby_cities',\n    propertyId,\n    city,\n    state,\n    status: 'pending',\n    createdAt: new Date()\n  };\n  \n  jobQueue.push(job);\n  \n  // Start processing if not already running\n  if (!isProcessing) {\n    processJobQueue();\n  }\n}\n\n/**\n * Process jobs in the background\n */\nasync function processJobQueue(): Promise<void> {\n  if (isProcessing) return;\n  isProcessing = true;\n  \n  \n  while (jobQueue.length > 0) {\n    const job = jobQueue.shift()!;\n    \n    try {\n      job.status = 'processing';\n      \n      // Get nearby cities\n      const nearbyCities = await getCitiesWithinRadiusComprehensive(job.city, job.state, 30);\n      \n      // Update property with nearby cities\n      if (!db) {\n        throw new Error('Firebase not initialized');\n      }\n      await updateDoc(doc(db, 'properties', job.propertyId), {\n        nearbyCities: nearbyCities,\n        nearbyCitiesUpdatedAt: serverTimestamp()\n      });\n      \n      job.status = 'completed';\n      job.completedAt = new Date();\n      \n    } catch (error) {\n      job.status = 'failed';\n      job.error = (error as Error).message;\n      job.completedAt = new Date();\n    }\n  }\n  \n  isProcessing = false;\n}\n\n/**\n * Batch process multiple properties with rate limiting\n */\nexport async function batchProcessNearbyCities(properties: Array<{id: string, city: string, state: string}>): Promise<void> {\n  const batchSize = 10;\n  const batches = [];\n  \n  // Split into batches\n  for (let i = 0; i < properties.length; i += batchSize) {\n    batches.push(properties.slice(i, i + batchSize));\n  }\n  \n  \n  for (const [batchIndex, propertyBatch] of batches.entries()) {\n    \n    // Process batch in parallel\n    const promises = propertyBatch.map(async property => {\n      try {\n        const nearbyCities = await getCitiesWithinRadiusComprehensive(property.city, property.state, 30);\n        return { propertyId: property.id, nearbyCities, success: true };\n      } catch (error) {\n        return { propertyId: property.id, nearbyCities: [], success: false };\n      }\n    });\n    \n    const results = await Promise.all(promises);\n    \n    // Batch write to Firestore (up to 500 operations)\n    if (!db) {\n      throw new Error('Firebase not initialized');\n    }\n    const batch = writeBatch(db);\n    let operations = 0;\n    \n    for (const result of results) {\n      if (result.success) {\n        const propertyRef = doc(db!, 'properties', result.propertyId);\n        batch.update(propertyRef, {\n          nearbyCities: result.nearbyCities,\n          nearbyCitiesUpdatedAt: serverTimestamp()\n        });\n        operations++;\n      }\n    }\n    \n    if (operations > 0) {\n      await batch.commit();\n    }\n    \n    // Rate limiting between batches\n    if (batchIndex < batches.length - 1) {\n      await new Promise(resolve => setTimeout(resolve, 2000));\n    }\n  }\n  \n}\n\n/**\n * Get job queue status\n */\nexport function getJobQueueStatus(): { queueLength: number; isProcessing: boolean } {\n  return {\n    queueLength: jobQueue.length,\n    isProcessing\n  };\n}","usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/lib/batch-operations.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isPositiveNumber' is defined but never used.","line":31,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":31,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":196,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":196,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Batch Database Operations\n * Eliminates N+1 queries with efficient batch processing\n */\n\nimport { \n  collection, \n  query, \n  where, \n  getDocs,\n  getDoc,\n  documentId,\n  QueryConstraint,\n  doc,\n  updateDoc,\n  serverTimestamp\n} from 'firebase/firestore';\nimport { db } from '@/lib/firebase';\nimport { PropertyListing } from './property-schema';\n\n/**\n * Type guard to check if a value is a non-empty string\n */\nfunction isValidString(value: unknown): value is string {\n  return typeof value === 'string' && value.trim().length > 0;\n}\n\n/**\n * Type guard to check if a value is a positive number\n */\nfunction isPositiveNumber(value: unknown): value is number {\n  return typeof value === 'number' && value > 0 && !isNaN(value);\n}\n\n/**\n * Batch fetch documents by IDs (eliminates N+1 queries)\n */\nexport async function batchGetDocuments(\n  collectionName: string, \n  ids: string[]\n): Promise<Record<string, unknown>[]> {\n  if (ids.length === 0) return [];\n  if (!db) {\n    throw new Error('Firebase not initialized');\n  }\n\n  const results = [];\n  \n  // Firestore 'in' query limit is 10, so batch in groups\n  for (let i = 0; i < ids.length; i += 10) {\n    const batch = ids.slice(i, i + 10);\n    \n    const batchQuery = query(\n      collection(db, collectionName),\n      where(documentId(), 'in', batch)\n    );\n    \n    const snapshot = await getDocs(batchQuery);\n    const batchResults = snapshot.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data()\n    }));\n    \n    results.push(...batchResults);\n  }\n\n  return results;\n}\n\n/**\n * Optimized property search with proper indexing\n */\ninterface SearchCriteria {\n  state: string;\n  cities?: string[];\n  maxMonthlyPayment?: number;\n  maxDownPayment?: number;\n  minBedrooms?: number;\n  minBathrooms?: number;\n}\n\nexport async function searchProperties(criteria: SearchCriteria): Promise<Record<string, unknown>[]> {\n  // Validate required criteria\n  if (!isValidString(criteria.state)) {\n    throw new Error('State is required and must be a valid string');\n  }\n  \n  const constraints: QueryConstraint[] = [\n    where('isActive', '==', true),\n    where('state', '==', criteria.state)\n  ];\n\n  // Add budget constraints at database level for performance\n  if (criteria.maxMonthlyPayment) {\n    constraints.push(where('monthlyPayment', '<=', criteria.maxMonthlyPayment));\n  }\n\n  if (!db) {\n    throw new Error('Firebase not initialized');\n  }\n  \n  const propertiesQuery = query(\n    collection(db, 'properties'),\n    ...constraints\n  );\n\n  const snapshot = await getDocs(propertiesQuery);\n  let properties = snapshot.docs.map(doc => ({\n    id: doc.id,\n    ...doc.data()\n  })) as (PropertyListing & { id: string })[];\n\n  // Apply remaining filters in JavaScript (on smaller dataset)\n  if (criteria.cities && criteria.cities.length > 0) {\n    properties = properties.filter(property => \n      criteria.cities!.some(city => \n(property as PropertyListing).city.toLowerCase() === city.toLowerCase()\n      )\n    );\n  }\n\n  if (criteria.maxDownPayment) {\n    properties = properties.filter(property => \n(property as PropertyListing).downPaymentAmount <= criteria.maxDownPayment!\n    );\n  }\n\n  if (criteria.minBedrooms) {\n    properties = properties.filter(property => \n(property as PropertyListing).bedrooms >= criteria.minBedrooms!\n    );\n  }\n\n  if (criteria.minBathrooms) {\n    properties = properties.filter(property => \n(property as PropertyListing).bathrooms >= criteria.minBathrooms!\n    );\n  }\n\n  return properties;\n}\n\n/**\n * Batch update property matches for multiple buyers\n */\nexport async function batchUpdatePropertyMatches(updates: Array<{\n  buyerId: string;\n  matches: Record<string, unknown>[];\n}>): Promise<void> {\n  \n  if (!db) {\n    throw new Error('Firebase not initialized');\n  }\n  \n  // Process in parallel for performance\n  const updatePromises = updates.map(async ({ buyerId, matches }) => {\n    const updateDocRef = doc(collection(db!, 'buyerProfiles'), buyerId);\n    await updateDoc(updateDocRef, {\n      propertyMatches: matches,\n      lastMatchUpdate: serverTimestamp(),\n      updatedAt: serverTimestamp()\n    });\n  });\n\n  await Promise.all(updatePromises);\n}\n\n/**\n * Efficient user lookup with caching\n */\nconst userCache = new Map<string, { data: Record<string, unknown> | null; timestamp: number }>();\nconst CACHE_TTL = 5 * 60 * 1000; // 5 minutes\n\nexport async function getCachedUser(userId: string): Promise<Record<string, unknown> | null> {\n  // Check cache first\n  const cached = userCache.get(userId);\n  if (cached && (Date.now() - cached.timestamp) < CACHE_TTL) {\n    return cached.data;\n  }\n\n  // Fetch from database\n  try {\n    if (!db) {\n      throw new Error('Firebase not initialized');\n    }\n    const userDoc = await getDoc(doc(db, 'users', userId));\n    const userData = userDoc.exists() ? { id: userDoc.id, ...userDoc.data() } : null;\n    \n    // Cache result\n    userCache.set(userId, {\n      data: userData,\n      timestamp: Date.now()\n    });\n    \n    return userData;\n  } catch (error) {\n    return null;\n  }\n}","usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/lib/buyer-system-migration.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":39,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":39,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1141,1144],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1141,1144],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":40,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":40,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1189,1192],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1189,1192],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":41,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":41,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1244,1247],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1244,1247],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":43,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":43,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1291,1294],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1291,1294],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":48,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":48,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1440,1443],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1440,1443],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":53,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":53,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1615,1618],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1615,1618],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":104,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":104,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3629,3632],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3629,3632],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":106,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":106,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3703,3706],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3703,3706],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'newProfile' is assigned a value but never used.","line":109,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":109,"endColumn":29},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":121,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":121,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4228,4231],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4228,4231],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":123,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":123,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4289,4292],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4289,4292],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":131,"column":77,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":131,"endColumn":80,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4640,4643],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4640,4643],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":140,"column":80,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":140,"endColumn":83,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5031,5034],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5031,5034],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":145,"column":70,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":145,"endColumn":73,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5197,5200],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5197,5200],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":174,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":174,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6133,6136],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6133,6136],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":174,"column":71,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":174,"endColumn":74,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6147,6150],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6147,6150],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":272,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":272,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9031,9034],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9031,9034],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":296,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":296,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9946,9949],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9946,9949],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":300,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":300,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10113,10116],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10113,10116],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":18,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// BUYER SYSTEM MIGRATION - Consolidate buyerProfiles and buyerLinks into single collection\n// This migration preserves all data while eliminating dual-profile complexity\n\nimport { FirebaseDB } from './firebase-db';\nimport { Timestamp } from 'firebase/firestore';\n\nexport interface MigrationResult {\n  success: boolean;\n  profilesEnhanced: number;\n  profilesCreated: number;\n  purchasesUpdated: number;\n  totalProfiles: number;\n  errors: string[];\n}\n\nexport class BuyerSystemMigration {\n  \n  static async executeMigration(): Promise<MigrationResult> {\n    const result: MigrationResult = {\n      success: false,\n      profilesEnhanced: 0,\n      profilesCreated: 0,\n      purchasesUpdated: 0,\n      totalProfiles: 0,\n      errors: []\n    };\n    \n    \n    try {\n      // Step 1: Get all existing data\n      const [buyerProfiles, buyerLinks, leadPurchases] = await Promise.all([\n        FirebaseDB.queryDocuments('buyerProfiles', []),\n        FirebaseDB.queryDocuments('buyerLinks', []),\n        FirebaseDB.queryDocuments('leadPurchases', [])\n      ]);\n      \n      \n      // Step 2: Create mappings\n      const linksByUserId = new Map<string, any>();\n      const linksById = new Map<string, any>();\n      const profilesByUserId = new Map<string, any>();\n      \n      buyerLinks.forEach((link: any) => {\n        linksByUserId.set(link.userId, link);\n        linksById.set(link.id, link);\n      });\n      \n      buyerProfiles.forEach((profile: any) => {\n        profilesByUserId.set(profile.userId, profile);\n      });\n      \n      // Step 3: Enhance existing buyerProfiles\n      for (const profile of buyerProfiles as any[]) {\n        try {\n          const linkData = linksByUserId.get(profile.userId);\n          \n          const enhancedData = {\n            // Preserve all existing fields\n            ...profile,\n            \n            // Add compatibility fields for API consistency\n            city: profile.preferredCity,\n            state: profile.preferredState,\n            \n            // Merge liked properties from both systems\n            likedPropertyIds: this.mergeLikedProperties(\n              profile.likedPropertyIds || [],\n              linkData?.likedPropertyIds || []\n            ),\n            \n            // Add lead selling fields from buyerLink\n            isAvailableForPurchase: linkData?.isAvailable ?? true,\n            purchasedBy: linkData?.purchasedBy,\n            purchasedAt: linkData?.purchasedAt ? \n              (linkData.purchasedAt instanceof Date ? \n                Timestamp.fromDate(linkData.purchasedAt) : \n                Timestamp.fromDate(new Date(linkData.purchasedAt))\n              ) : undefined,\n            leadPrice: 1, // Default credit cost\n            \n            // Ensure required arrays exist\n            passedPropertyIds: profile.passedPropertyIds || [],\n            matchedPropertyIds: profile.matchedPropertyIds || [],\n            languages: profile.languages || linkData?.languages || ['English'],\n            \n            // Activity tracking\n            lastActiveAt: profile.updatedAt || Timestamp.now(),\n            \n            // Metadata\n            updatedAt: Timestamp.now()\n          };\n          \n          await FirebaseDB.updateDocument('buyerProfiles', profile.id, enhancedData);\n          result.profilesEnhanced++;\n          \n          \n        } catch (error) {\n          const errorMsg = `Failed to enhance profile ${profile.id}: ${(error as Error).message}`;\n          result.errors.push(errorMsg);\n        }\n      }\n      \n      // Step 4: Create missing profiles from orphaned buyerLinks\n      const existingUserIds = new Set((buyerProfiles as any[]).map(p => p.userId));\n      \n      for (const link of buyerLinks as any[]) {\n        if (!existingUserIds.has(link.userId)) {\n          try {\n            const newProfile = await this.createBuyerProfileFromLink(link);\n            result.profilesCreated++;\n            \n            \n          } catch (error) {\n            const errorMsg = `Failed to create profile from link ${link.id}: ${(error as Error).message}`;\n            result.errors.push(errorMsg);\n            }\n        }\n      }\n      \n      // Step 5: Update lead purchase references\n      for (const purchase of leadPurchases as any[]) {\n        try {\n          const linkId = (purchase as any).buyerId;\n          const linkData = linksById.get(linkId);\n          \n          if (linkData) {\n            // Find the corresponding buyerProfile\n            const matchingProfile = profilesByUserId.get(linkData.userId);\n            \n            if (matchingProfile) {\n              await FirebaseDB.updateDocument('leadPurchases', (purchase as any).id, {\n                buyerId: matchingProfile.id,\n                originalBuyerLinkId: linkId, // Keep reference for audit\n                migratedAt: Timestamp.now(),\n                updatedAt: Timestamp.now()\n              });\n              \n              result.purchasesUpdated++;\n            } else {\n              result.errors.push(`No profile found for purchase ${(purchase as any).id} with linkId ${linkId}`);\n            }\n          }\n          \n        } catch (error) {\n          const errorMsg = `Failed to update purchase ${(purchase as any).id}: ${(error as Error).message}`;\n          result.errors.push(errorMsg);\n        }\n      }\n      \n      // Step 6: Final verification\n      const finalProfiles = await FirebaseDB.queryDocuments('buyerProfiles', []);\n      result.totalProfiles = finalProfiles.length;\n      \n      result.success = result.errors.length === 0;\n      \n      \n      if (result.errors.length > 0) {\n      }\n      \n    } catch (error) {\n      result.errors.push(`Migration failed: ${(error as Error).message}`);\n    }\n    \n    return result;\n  }\n  \n  // Helper: Merge liked properties without duplicates\n  private static mergeLikedProperties(profileLikes: string[] = [], linkLikes: string[] = []): string[] {\n    const combined = [...(profileLikes || []), ...(linkLikes || [])];\n    return [...new Set(combined)]; // Remove duplicates\n  }\n  \n  // Helper: Create buyer profile from buyerLink data\n  private static async createBuyerProfileFromLink(link: any): Promise<any> {\n    const profileData = {\n      userId: link.userId,\n      firstName: link.firstName,\n      lastName: link.lastName,\n      email: link.email,\n      phone: link.phone || '',\n      \n      // Map link fields to profile fields\n      preferredCity: link.city,\n      preferredState: link.state,\n      city: link.city,                    // API compatibility\n      state: link.state,                  // API compatibility\n      \n      // Budget from link\n      maxMonthlyPayment: link.maxMonthlyPayment || 0,\n      maxDownPayment: link.maxDownPayment || 0,\n      \n      // Defaults for missing fields\n      searchRadius: 25,\n      minBedrooms: null,\n      minBathrooms: null,\n      minSquareFeet: null,\n      minPrice: null,\n      maxPrice: null,\n      \n      // Communication\n      languages: link.languages || ['English'],\n      emailNotifications: true,\n      smsNotifications: true,\n      \n      // System fields\n      profileComplete: true,\n      isActive: true,\n      \n      // Property interactions\n      likedPropertyIds: link.likedPropertyIds || [],\n      passedPropertyIds: [],\n      matchedPropertyIds: [],\n      \n      // Lead selling fields\n      isAvailableForPurchase: link.isAvailable ?? true,\n      purchasedBy: link.purchasedBy,\n      purchasedAt: link.purchasedAt ? \n        (link.purchasedAt instanceof Date ? \n          Timestamp.fromDate(link.purchasedAt) : \n          Timestamp.fromDate(new Date(link.purchasedAt))\n        ) : undefined,\n      leadPrice: 1,\n      \n      // Additional fields\n      hasBeenSold: false,\n      preferredStates: null,\n      preferredCities: null,\n      searchCriteria: null,\n      lastMatchUpdate: null,\n      \n      // Activity tracking\n      lastActiveAt: Timestamp.now(),\n      \n      // Timestamps\n      createdAt: link.createdAt ? \n        (link.createdAt instanceof Date ? \n          Timestamp.fromDate(link.createdAt) : \n          Timestamp.fromDate(new Date(link.createdAt))\n        ) : Timestamp.now(),\n      updatedAt: Timestamp.now()\n    };\n    \n    return await FirebaseDB.createDocument('buyerProfiles', profileData);\n  }\n  \n  // Verification method to check migration success\n  static async verifyMigration(): Promise<{\n    success: boolean;\n    issues: string[];\n    statistics: {\n      totalBuyerProfiles: number;\n      availableForPurchase: number;\n      purchased: number;\n      withLikedProperties: number;\n      leadPurchasesReferencing: number;\n    };\n  }> {\n    const issues: string[] = [];\n    \n    try {\n      const [buyerProfiles, leadPurchases] = await Promise.all([\n        FirebaseDB.queryDocuments('buyerProfiles', []),\n        FirebaseDB.queryDocuments('leadPurchases', [])\n      ]);\n      \n      // Check for required fields\n      let availableCount = 0;\n      let purchasedCount = 0;\n      let withLikedPropsCount = 0;\n      \n      for (const profile of buyerProfiles) {\n        const p = profile as any;\n        \n        // Check required fields exist\n        if (!p.city || !p.state) {\n          issues.push(`Profile ${p.id} missing city/state compatibility fields`);\n        }\n        \n        if (!Object.prototype.hasOwnProperty.call(p, 'isAvailableForPurchase')) {\n          issues.push(`Profile ${p.id} missing isAvailableForPurchase field`);\n        }\n        \n        if (!Array.isArray(p.likedPropertyIds)) {\n          issues.push(`Profile ${p.id} missing likedPropertyIds array`);\n        }\n        \n        // Statistics\n        if (p.isAvailableForPurchase) availableCount++;\n        if (p.purchasedBy) purchasedCount++;\n        if (p.likedPropertyIds && p.likedPropertyIds.length > 0) withLikedPropsCount++;\n      }\n      \n      // Check lead purchases reference buyerProfiles not buyerLinks\n      let validPurchaseRefs = 0;\n      for (const purchase of leadPurchases) {\n        const p = purchase as any;\n        const buyerId = p.buyerId;\n        \n        // Should reference a buyerProfile, not a buyerLink\n        const referencedProfile = buyerProfiles.find((bp: any) => bp.id === buyerId);\n        if (referencedProfile) {\n          validPurchaseRefs++;\n        } else {\n          issues.push(`Purchase ${p.id} references invalid buyerId: ${buyerId}`);\n        }\n      }\n      \n      return {\n        success: issues.length === 0,\n        issues,\n        statistics: {\n          totalBuyerProfiles: buyerProfiles.length,\n          availableForPurchase: availableCount,\n          purchased: purchasedCount,\n          withLikedProperties: withLikedPropsCount,\n          leadPurchasesReferencing: validPurchaseRefs\n        }\n      };\n      \n    } catch (error) {\n      return {\n        success: false,\n        issues: [`Verification failed: ${(error as Error).message}`],\n        statistics: {\n          totalBuyerProfiles: 0,\n          availableForPurchase: 0,\n          purchased: 0,\n          withLikedProperties: 0,\n          leadPurchasesReferencing: 0\n        }\n      };\n    }\n  }\n}","usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/lib/calculations.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/lib/cities-service-v2.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/lib/cities-service.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'City' is defined but never used.","line":1,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":22}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { cities, City } from './cities';\n\ninterface NearbyCity {\n  name: string;\n  state: string;\n  distance: number;\n}\n\n/**\n * Calculate distance between two coordinates using Haversine formula\n */\nfunction calculateDistance(lat1: number, lng1: number, lat2: number, lng2: number): number {\n  const R = 3959; // Earth's radius in miles\n  const dLat = (lat2 - lat1) * Math.PI / 180;\n  const dLng = (lng2 - lng1) * Math.PI / 180;\n  const a = \n    Math.sin(dLat/2) * Math.sin(dLat/2) +\n    Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * \n    Math.sin(dLng/2) * Math.sin(dLng/2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n  return R * c;\n}\n\n/**\n * Get nearby cities within specified radius\n */\nexport async function getNearbyCitiesDirect(\n  centerCity: string, \n  state: string, \n  radiusMiles: number\n): Promise<NearbyCity[]> {\n  const center = cities.find(c => \n    c.name.toLowerCase() === centerCity.toLowerCase() && \n    c.state.toLowerCase() === state.toLowerCase()\n  );\n  \n  if (!center) {\n    return [];\n  }\n\n  const nearbyCities: NearbyCity[] = [];\n  \n  for (const city of cities) {\n    const distance = calculateDistance(center.lat, center.lng, city.lat, city.lng);\n    if (distance <= radiusMiles && city.name !== centerCity) {\n      nearbyCities.push({\n        name: city.name,\n        state: city.state,\n        distance\n      });\n    }\n  }\n  \n  return nearbyCities.sort((a, b) => a.distance - b.distance);\n}","usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/lib/cities.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/lib/comprehensive-cities.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'endTime' is assigned a value but never used.","line":89,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":89,"endColumn":16}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Comprehensive US Cities Service - Using cities.json database\nimport citiesData from 'cities.json';\n\ninterface City {\n  name: string;\n  country: string;\n  state: string;\n  lat: number;\n  lng: number;\n}\n\ninterface CityWithDistance extends City {\n  distance: number;\n}\n\n// Filter to get only US cities (admin1 is already state abbreviation)  \nconst usCities: City[] = (citiesData as Array<{\n  name: string;\n  country: string;\n  admin1: string;\n  lat: string;\n  lng: string;\n}>)\n  .filter((city) => city.country === 'US')\n  .map((city) => ({\n    name: city.name,\n    country: city.country,\n    state: city.admin1, // admin1 is already the state abbreviation (GA, TX, FL, etc.)\n    lat: parseFloat(city.lat),\n    lng: parseFloat(city.lng)\n  }))\n  .filter((city: City) => city.state && city.lat && city.lng); // Valid data only\n\n\n/**\n * Calculate distance between two points using Haversine formula\n */\nfunction calculateDistance(lat1: number, lng1: number, lat2: number, lng2: number): number {\n  const R = 3959; // Earth's radius in miles\n  const dLat = (lat2 - lat1) * Math.PI / 180;\n  const dLng = (lng2 - lng1) * Math.PI / 180;\n  const a = \n    Math.sin(dLat/2) * Math.sin(dLat/2) +\n    Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * \n    Math.sin(dLng/2) * Math.sin(dLng/2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n  return R * c;\n}\n\n/**\n * Get coordinates for a city (FAST lookup from comprehensive database)\n */\nexport function getCityCoordinatesComprehensive(cityName: string, state: string): { lat: number; lng: number } | null {\n  const city = usCities.find(c => \n    c.name.toLowerCase() === cityName.toLowerCase() && \n    c.state === state\n  );\n  \n  return city ? { lat: city.lat, lng: city.lng } : null;\n}\n\n/**\n * FAST: Get all cities within radius using comprehensive database\n * NO EXTERNAL API CALLS - Pure JavaScript calculation\n */\nexport function getCitiesWithinRadiusComprehensive(\n  centerCity: string, \n  centerState: string, \n  radiusMiles: number = 35\n): CityWithDistance[] {\n  const startTime = Date.now();\n  \n  // Find center city coordinates\n  const centerCoords = getCityCoordinatesComprehensive(centerCity, centerState);\n  if (!centerCoords) {\n    return [];\n  }\n\n  // Calculate distances to all cities in the same state\n  const nearbyCities = usCities\n    .filter(city => city.state === centerState) // Same state only\n    .map(city => ({\n      ...city,\n      distance: calculateDistance(centerCoords.lat, centerCoords.lng, city.lat, city.lng)\n    }))\n    .filter(city => city.distance <= radiusMiles)\n    .sort((a, b) => a.distance - b.distance);\n\n  const endTime = Date.now() - startTime;\n\n  return nearbyCities;\n}\n\n/**\n * Get nearby city names for property storage (excludes center city)\n */\nexport function getNearbyCityNamesForProperty(\n  propertyCity: string,\n  propertyState: string,\n  radiusMiles: number = 35,\n  maxCities: number = 100\n): string[] {\n  const nearbyCities = getCitiesWithinRadiusComprehensive(propertyCity, propertyState, radiusMiles);\n  \n  return nearbyCities\n    .filter(city => city.name.toLowerCase() !== propertyCity.toLowerCase()) // Exclude property's own city\n    .slice(0, maxCities) // Limit for storage efficiency\n    .map(city => city.name);\n}\n\n/**\n * Get cities with distances for display purposes\n */\nexport function getCitiesWithDistancesForDisplay(\n  centerCity: string,\n  centerState: string,\n  radiusMiles: number = 35,\n  limit: number = 20\n): CityWithDistance[] {\n  return getCitiesWithinRadiusComprehensive(centerCity, centerState, radiusMiles)\n    .slice(0, limit);\n}\n\n/**\n * Search cities by name with fuzzy matching\n */\nexport function searchCitiesComprehensive(\n  searchQuery: string, \n  state?: string,\n  limit: number = 10\n): City[] {\n  if (!searchQuery || searchQuery.length < 2) return [];\n  \n  const queryLower = searchQuery.toLowerCase();\n  let searchPool = usCities;\n  \n  // Filter by state if provided\n  if (state) {\n    searchPool = usCities.filter(city => city.state === state);\n  }\n  \n  // Exact matches first\n  const exactMatches = searchPool.filter(city => \n    city.name.toLowerCase() === queryLower\n  );\n  \n  // Starts with matches\n  const startsWithMatches = searchPool.filter(city => \n    city.name.toLowerCase().startsWith(queryLower) && \n    !exactMatches.some(exact => exact.name === city.name && exact.state === city.state)\n  );\n  \n  // Contains matches\n  const containsMatches = searchPool.filter(city => \n    city.name.toLowerCase().includes(queryLower) && \n    !exactMatches.some(exact => exact.name === city.name && exact.state === city.state) &&\n    !startsWithMatches.some(starts => starts.name === city.name && starts.state === city.state)\n  );\n  \n  return [...exactMatches, ...startsWithMatches, ...containsMatches]\n    .slice(0, limit);\n}\n\n/**\n * Get database stats for monitoring\n */\nexport function getCitiesDatabaseStats(): {\n  totalCities: number;\n  citiesByState: Record<string, number>;\n  largestStates: Array<{ state: string; count: number }>;\n} {\n  const citiesByState: Record<string, number> = {};\n  \n  usCities.forEach(city => {\n    citiesByState[city.state] = (citiesByState[city.state] || 0) + 1;\n  });\n  \n  const largestStates = Object.entries(citiesByState)\n    .map(([state, count]) => ({ state, count }))\n    .sort((a, b) => b.count - a.count)\n    .slice(0, 10);\n\n  return {\n    totalCities: usCities.length,\n    citiesByState,\n    largestStates\n  };\n}","usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/lib/comprehensive-city-finder.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'radiusMiles' is assigned a value but never used.","line":21,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":14}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// COMPREHENSIVE CITY FINDER - Gets ALL cities within radius, not just manually curated ones\n// This system is designed to find EVERY SINGLE CITY within a given radius\n\ninterface CityResult {\n  name: string;\n  state: string;\n  stateCode: string;\n  distance: number;\n  population?: number;\n  lat: number;\n  lng: number;\n}\n\n/**\n * ULTIMATE SOLUTION: Get ALL cities within radius using external API\n * This would call external services to get comprehensive city data\n */\nexport async function getAllCitiesWithinRadiusAPI(\n  centerLat: number,\n  centerLng: number, \n  radiusMiles: number = 30\n): Promise<CityResult[]> {\n  // This would integrate with:\n  // 1. Google Places API (places with type: locality)\n  // 2. OpenStreetMap Overpass API \n  // 3. USGS Geographic Names Information System\n  // 4. Census Bureau API\n  \n  console.warn('getAllCitiesWithinRadiusAPI: External API integration needed for comprehensive coverage');\n  return [];\n}\n\n/**\n * ENHANCED DATABASE SOLUTION: Comprehensive US cities database\n * In production, this would load from a complete 29,000+ cities JSON file\n */\nexport async function getAllCitiesWithinRadiusDatabase(\n  centerLat: number,\n  centerLng: number, \n  radiusMiles: number = 30\n): Promise<CityResult[]> {\n  // In production, this would load from a comprehensive database file\n  // containing all US cities, towns, villages, and unincorporated areas\n  \n  const comprehensiveDatabase = await loadComprehensiveCitiesDatabase();\n  return calculateCitiesWithinRadius(comprehensiveDatabase, centerLat, centerLng, radiusMiles);\n}\n\n/**\n * Load comprehensive cities database (placeholder for actual implementation)\n */\nasync function loadComprehensiveCitiesDatabase(): Promise<CityResult[]> {\n  // In production, this would load from:\n  // - A large JSON file with 29,000+ US cities\n  // - A SQLite database with cities data\n  // - API calls to comprehensive data sources\n  \n  console.warn('loadComprehensiveCitiesDatabase: Need to integrate with comprehensive US cities dataset');\n  return [];\n}\n\n/**\n * Calculate which cities from a comprehensive database fall within radius\n */\nfunction calculateCitiesWithinRadius(\n  allCities: CityResult[],\n  centerLat: number,\n  centerLng: number,\n  radiusMiles: number\n): CityResult[] {\n  const nearbyCities: CityResult[] = [];\n  \n  for (const city of allCities) {\n    const distance = calculateHaversineDistance(centerLat, centerLng, city.lat, city.lng);\n    \n    if (distance <= radiusMiles) {\n      nearbyCities.push({\n        ...city,\n        distance: Math.round(distance * 100) / 100\n      });\n    }\n  }\n  \n  return nearbyCities.sort((a, b) => a.distance - b.distance);\n}\n\n/**\n * Accurate distance calculation using Haversine formula\n */\nfunction calculateHaversineDistance(lat1: number, lng1: number, lat2: number, lng2: number): number {\n  const R = 3959; // Earth's radius in miles\n  const dLat = (lat2 - lat1) * Math.PI / 180;\n  const dLng = (lng2 - lng1) * Math.PI / 180;\n  const a = \n    Math.sin(dLat/2) * Math.sin(dLat/2) +\n    Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * \n    Math.sin(dLng/2) * Math.sin(dLng/2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n  return R * c;\n}\n\n/**\n * HYBRID SOLUTION: Combine multiple data sources for maximum coverage\n */\nexport async function getAllCitiesWithinRadiusHybrid(\n  centerLat: number,\n  centerLng: number, \n  radiusMiles: number = 30\n): Promise<CityResult[]> {\n  const results: CityResult[] = [];\n  \n  try {\n    // Source 1: Local comprehensive database\n    const databaseResults = await getAllCitiesWithinRadiusDatabase(centerLat, centerLng, radiusMiles);\n    results.push(...databaseResults);\n    \n    // Source 2: External API for additional coverage\n    const apiResults = await getAllCitiesWithinRadiusAPI(centerLat, centerLng, radiusMiles);\n    \n    // Merge and deduplicate\n    const allResults = [...results, ...apiResults];\n    const uniqueResults = deduplicateCities(allResults);\n    \n    return uniqueResults.sort((a, b) => a.distance - b.distance);\n    \n  } catch (error) {\n    console.error('Error in hybrid city finder:', error);\n    return results;\n  }\n}\n\n/**\n * Remove duplicate cities from multiple sources\n */\nfunction deduplicateCities(cities: CityResult[]): CityResult[] {\n  const seen = new Set<string>();\n  return cities.filter(city => {\n    const key = `${city.name.toLowerCase()}-${city.stateCode.toLowerCase()}`;\n    if (seen.has(key)) {\n      return false;\n    }\n    seen.add(key);\n    return true;\n  });\n}\n\n/**\n * SOLUTION RECOMMENDATION for Production:\n * \n * To get EVERY SINGLE CITY within 30 miles, you need:\n * \n * 1. **Comprehensive Database**: \n *    - Download USGS Geographic Names Information System (GNIS) database\n *    - Contains ~29,000 populated places in the US\n *    - Available at: https://www.usgs.gov/us-board-on-geographic-names/download-gnis-data\n * \n * 2. **API Integration**:\n *    - Google Places API with type: locality\n *    - OpenStreetMap Overpass API for place nodes\n *    - Census Bureau API for incorporated places\n * \n * 3. **Optimized Storage**:\n *    - Store in SQLite or PostgreSQL with spatial indexing\n *    - Use PostGIS for efficient geographic queries\n *    - Create spatial indexes for fast radius queries\n * \n * 4. **Implementation Steps**:\n *    - Replace manual city array with database queries\n *    - Add API fallbacks for real-time data\n *    - Cache results to minimize API calls\n *    - Update data periodically\n */\n\nexport const IMPLEMENTATION_NOTES = {\n  currentLimitation: \"Manual database with ~150 major cities\",\n  productionSolution: \"Need comprehensive US cities database with 29,000+ places\",\n  recommendedSources: [\n    \"USGS GNIS Database\",\n    \"Google Places API\", \n    \"OpenStreetMap Overpass API\",\n    \"US Census Bureau API\"\n  ],\n  expectedResults: {\n    dallas: \"Should return 100+ cities/towns/villages within 30 miles\",\n    nyc: \"Should return 200+ places within 30 miles\",\n    rural: \"Should return 10-50 places depending on area\"\n  }\n};","usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/lib/comprehensive-us-cities.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'headers' is assigned a value but never used.","line":37,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":37,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'stateCode' is assigned a value but never used.","line":119,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":119,"endColumn":24}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// COMPREHENSIVE US CITIES DATABASE - State-based lookup for ALL US populated places\n// This system provides complete coverage of US cities for property enhancement\n\ninterface USCity {\n  id: number;\n  stateCode: string;\n  stateName: string;\n  city: string;\n  county: string;\n  latitude: number;\n  longitude: number;\n}\n\ninterface CityWithDistance extends USCity {\n  distance: number;\n}\n\n// Complete US cities database (will be populated from USGS/comprehensive source)\nconst usCitiesDatabase: Map<string, USCity[]> = new Map();\nlet isDatabaseLoaded = false;\n\n/**\n * Load comprehensive US cities database organized by state\n */\nasync function loadComprehensiveUSCitiesDatabase(): Promise<void> {\n  if (isDatabaseLoaded) return;\n\n  try {\n    console.log('Loading comprehensive US cities database...');\n    \n    // Fetch the complete database from GitHub\n    const response = await fetch('https://raw.githubusercontent.com/kelvins/US-Cities-Database/main/csv/us_cities.csv');\n    const csvContent = await response.text();\n    \n    // Parse CSV content\n    const lines = csvContent.split('\\n');\n    const headers = lines[0].split(',');\n    \n    // Clear and rebuild database organized by state\n    usCitiesDatabase.clear();\n    \n    let totalCities = 0;\n    \n    for (let i = 1; i < lines.length; i++) {\n      const line = lines[i].trim();\n      if (!line) continue;\n      \n      const values = line.split(',');\n      if (values.length < 7) continue;\n      \n      const city: USCity = {\n        id: parseInt(values[0]) || 0,\n        stateCode: values[1]?.replace(/['\"]/g, '') || '',\n        stateName: values[2]?.replace(/['\"]/g, '') || '',\n        city: values[3]?.replace(/['\"]/g, '') || '',\n        county: values[4]?.replace(/['\"]/g, '') || '',\n        latitude: parseFloat(values[5]) || 0,\n        longitude: parseFloat(values[6]) || 0\n      };\n      \n      // Skip invalid entries\n      if (!city.stateCode || !city.city || !city.latitude || !city.longitude) {\n        continue;\n      }\n      \n      // Group by state code for efficient lookups\n      if (!usCitiesDatabase.has(city.stateCode)) {\n        usCitiesDatabase.set(city.stateCode, []);\n      }\n      \n      usCitiesDatabase.get(city.stateCode)!.push(city);\n      totalCities++;\n    }\n    \n    console.log(`‚úÖ Loaded ${totalCities} cities across ${usCitiesDatabase.size} states`);\n    \n    // Log stats by state\n    console.log('Cities per state:');\n    Array.from(usCitiesDatabase.entries())\n      .sort((a, b) => b[1].length - a[1].length)\n      .slice(0, 10)\n      .forEach(([state, cities]) => {\n        console.log(`  ${state}: ${cities.length} cities`);\n      });\n    \n    isDatabaseLoaded = true;\n    \n  } catch (error) {\n    console.error('Failed to load comprehensive cities database:', error);\n    throw new Error('Could not load US cities database');\n  }\n}\n\n/**\n * Get ALL cities within radius from any point in the US\n * This is the main function that replaces our limited manual database\n */\nexport async function getAllUSCitiesWithinRadius(\n  centerLat: number,\n  centerLng: number,\n  radiusMiles: number = 30\n): Promise<CityWithDistance[]> {\n  \n  // Ensure database is loaded\n  await loadComprehensiveUSCitiesDatabase();\n  \n  const nearbyCities: CityWithDistance[] = [];\n  \n  // Calculate rough bounding box for efficiency (approximate)\n  const latRange = radiusMiles / 69; // Rough miles per degree of latitude\n  const lngRange = radiusMiles / (69 * Math.cos(centerLat * Math.PI / 180));\n  \n  const minLat = centerLat - latRange;\n  const maxLat = centerLat + latRange;\n  const minLng = centerLng - lngRange;\n  const maxLng = centerLng + lngRange;\n  \n  // Search through all states (could be optimized to nearby states only)\n  for (const [stateCode, cities] of usCitiesDatabase.entries()) {\n    for (const city of cities) {\n      // Quick bounding box filter first\n      if (city.latitude < minLat || city.latitude > maxLat ||\n          city.longitude < minLng || city.longitude > maxLng) {\n        continue;\n      }\n      \n      // Precise distance calculation for candidates\n      const distance = calculateHaversineDistance(\n        centerLat, centerLng, \n        city.latitude, city.longitude\n      );\n      \n      if (distance <= radiusMiles) {\n        nearbyCities.push({\n          ...city,\n          distance: Math.round(distance * 100) / 100\n        });\n      }\n    }\n  }\n  \n  // Sort by distance\n  return nearbyCities.sort((a, b) => a.distance - b.distance);\n}\n\n/**\n * State-optimized version: Get cities within radius, focusing on specific state first\n */\nexport async function getCitiesWithinRadiusByState(\n  centerLat: number,\n  centerLng: number,\n  primaryStateCode: string,\n  radiusMiles: number = 30\n): Promise<CityWithDistance[]> {\n  \n  await loadComprehensiveUSCitiesDatabase();\n  \n  const nearbyCities: CityWithDistance[] = [];\n  \n  // Helper function to search cities in a state\n  const searchInState = (stateCode: string) => {\n    const cities = usCitiesDatabase.get(stateCode.toUpperCase());\n    if (!cities) return;\n    \n    for (const city of cities) {\n      const distance = calculateHaversineDistance(\n        centerLat, centerLng,\n        city.latitude, city.longitude\n      );\n      \n      if (distance <= radiusMiles) {\n        nearbyCities.push({\n          ...city,\n          distance: Math.round(distance * 100) / 100\n        });\n      }\n    }\n  };\n  \n  // Search primary state first\n  searchInState(primaryStateCode);\n  \n  // Search neighboring states (all states for now, could be optimized)\n  for (const [stateCode] of usCitiesDatabase.entries()) {\n    if (stateCode !== primaryStateCode.toUpperCase()) {\n      searchInState(stateCode);\n    }\n  }\n  \n  return nearbyCities.sort((a, b) => a.distance - b.distance);\n}\n\n/**\n * Get cities by city name and state (for property enhancement integration)\n */\nexport async function getCitiesNearProperty(\n  propertyCityName: string,\n  propertyStateCode: string,\n  radiusMiles: number = 30\n): Promise<string[]> {\n  \n  await loadComprehensiveUSCitiesDatabase();\n  \n  // Find the property's city in our database\n  const stateCities = usCitiesDatabase.get(propertyStateCode.toUpperCase());\n  if (!stateCities) {\n    console.warn(`State not found: ${propertyStateCode}`);\n    return [];\n  }\n  \n  const propertyCity = stateCities.find(city => \n    city.city.toLowerCase() === propertyCityName.toLowerCase()\n  );\n  \n  if (!propertyCity) {\n    console.warn(`City not found: ${propertyCityName}, ${propertyStateCode}`);\n    return [];\n  }\n  \n  // Get all cities within radius\n  const nearbyCities = await getAllUSCitiesWithinRadius(\n    propertyCity.latitude,\n    propertyCity.longitude,\n    radiusMiles\n  );\n  \n  // Return just the city names (excluding the property city itself)\n  return nearbyCities\n    .filter(city => city.city.toLowerCase() !== propertyCityName.toLowerCase())\n    .map(city => city.city);\n}\n\n/**\n * Accurate distance calculation using Haversine formula\n */\nfunction calculateHaversineDistance(lat1: number, lng1: number, lat2: number, lng2: number): number {\n  const R = 3959; // Earth's radius in miles\n  const dLat = (lat2 - lat1) * Math.PI / 180;\n  const dLng = (lng2 - lng1) * Math.PI / 180;\n  const a = \n    Math.sin(dLat/2) * Math.sin(dLat/2) +\n    Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * \n    Math.sin(dLng/2) * Math.sin(dLng/2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n  return R * c;\n}\n\n/**\n * Get database statistics\n */\nexport async function getDatabaseStats(): Promise<{totalCities: number, stateCount: number, stateStats: {[key: string]: number}}> {\n  await loadComprehensiveUSCitiesDatabase();\n  \n  let totalCities = 0;\n  const stateStats: {[key: string]: number} = {};\n  \n  for (const [stateCode, cities] of usCitiesDatabase.entries()) {\n    totalCities += cities.length;\n    stateStats[stateCode] = cities.length;\n  }\n  \n  return {\n    totalCities,\n    stateCount: usCitiesDatabase.size,\n    stateStats\n  };\n}\n\n/**\n * Test function to verify database coverage for a specific location\n */\nexport async function testLocationCoverage(\n  cityName: string,\n  stateCode: string,\n  radiusMiles: number = 30\n): Promise<{\n  found: boolean,\n  cityCoordinates?: {lat: number, lng: number},\n  nearbyCitiesCount: number,\n  sampleNearbyCities: string[]\n}> {\n  \n  await loadComprehensiveUSCitiesDatabase();\n  \n  const stateCities = usCitiesDatabase.get(stateCode.toUpperCase());\n  if (!stateCities) {\n    return { found: false, nearbyCitiesCount: 0, sampleNearbyCities: [] };\n  }\n  \n  const city = stateCities.find(c => c.city.toLowerCase() === cityName.toLowerCase());\n  if (!city) {\n    return { found: false, nearbyCitiesCount: 0, sampleNearbyCities: [] };\n  }\n  \n  const nearbyCities = await getAllUSCitiesWithinRadius(\n    city.latitude, city.longitude, radiusMiles\n  );\n  \n  return {\n    found: true,\n    cityCoordinates: { lat: city.latitude, lng: city.longitude },\n    nearbyCitiesCount: nearbyCities.length,\n    sampleNearbyCities: nearbyCities.slice(0, 10).map(c => `${c.city}, ${c.stateCode}`)\n  };\n}","usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/lib/consolidated-lead-system.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":93,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":93,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":213,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":213,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":229,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":229,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":252,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":252,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// CONSOLIDATED LEAD SYSTEM - Replaces MatchingModule with single buyerProfiles collection\n// Handles buyer-realtor lead matching, purchasing, and management\n\nimport { FirebaseDB } from './firebase-db';\nimport { BuyerProfile } from './firebase-models';\nimport { Timestamp } from 'firebase/firestore';\n\nexport interface LeadMatch {\n  id: string;                    // buyerProfile id\n  firstName: string;\n  lastName: string;\n  email: string;\n  phone: string;\n  city: string;\n  state: string;\n  maxMonthlyPayment: number;\n  maxDownPayment: number;\n  languages: string[];\n  matchScore: number;\n  matchReasons: string[];\n  likedPropertiesCount: number;\n  leadPrice: number;\n  createdAt: Timestamp;\n  lastActiveAt?: Timestamp;\n}\n\nexport interface RealtorMatchProfile {\n  cities: string[];              // Cities realtor serves\n  languages: string[];           // Languages realtor speaks\n  state: string;                 // Primary state\n}\n\nexport interface BuyerDetails {\n  firstName: string;\n  lastName: string;\n  email: string;\n  phone: string;\n  city: string;\n  state: string;\n  maxMonthlyPayment: number;\n  maxDownPayment: number;\n}\n\nexport class ConsolidatedLeadSystem {\n  \n  /**\n   * Find available buyer leads for a realtor based on location and language matching\n   */\n  static async findAvailableLeads(realtorProfile: RealtorMatchProfile): Promise<LeadMatch[]> {\n    try {\n      \n      // Get all available buyer profiles (use preferredState for main query)\n      const availableBuyers = await FirebaseDB.queryDocuments<BuyerProfile>('buyerProfiles', [\n        { field: 'preferredState', operator: '==', value: realtorProfile.state },\n        { field: 'isAvailableForPurchase', operator: '==', value: true },\n        { field: 'isActive', operator: '==', value: true },\n        { field: 'profileComplete', operator: '==', value: true }\n      ]);\n      \n      \n      // Score and filter matches\n      const matches: LeadMatch[] = [];\n      \n      for (const buyer of availableBuyers) {\n        const matchResult = this.calculateMatch(buyer, realtorProfile);\n        if (matchResult.isMatch) {\n          matches.push({\n            id: buyer.id,\n            firstName: buyer.firstName,\n            lastName: buyer.lastName,\n            email: buyer.email,\n            phone: buyer.phone,\n            city: buyer.preferredCity,\n            state: buyer.preferredState,\n            maxMonthlyPayment: buyer.maxMonthlyPayment,\n            maxDownPayment: buyer.maxDownPayment,\n            languages: buyer.languages,\n            matchScore: matchResult.score,\n            matchReasons: matchResult.reasons,\n            likedPropertiesCount: buyer.likedPropertyIds?.length || 0,\n            leadPrice: buyer.leadPrice || 1,\n            createdAt: buyer.createdAt,\n            lastActiveAt: buyer.lastActiveAt\n          });\n        }\n      }\n      \n      // Sort by match score (highest first)\n      matches.sort((a, b) => b.matchScore - a.matchScore);\n      \n      return matches;\n      \n    } catch (error) {\n      return [];\n    }\n  }\n  \n  /**\n   * Calculate match score between buyer and realtor\n   */\n  private static calculateMatch(buyer: BuyerProfile, realtor: RealtorMatchProfile): {\n    isMatch: boolean;\n    score: number;\n    reasons: string[];\n  } {\n    let score = 0;\n    const reasons: string[] = [];\n    \n    // Geographic match (required) - Does realtor serve buyer's city?\n    const buyerCity = buyer.preferredCity || buyer.city || '';\n    const realtorCities = realtor.cities.map(c => c.toLowerCase());\n    const cityMatch = realtorCities.includes(buyerCity.toLowerCase());\n    \n    if (!cityMatch) {\n      return { isMatch: false, score: 0, reasons: ['No geographic overlap'] };\n    }\n    \n    score += 50;\n    reasons.push(`Serves ${buyerCity}`);\n    \n    // Language match (required) - At least 1 common language\n    const buyerLanguages = buyer.languages || ['English'];\n    const languageMatch = buyerLanguages.some(lang => \n      realtor.languages.map(rl => rl.toLowerCase()).includes(lang.toLowerCase())\n    );\n    \n    if (!languageMatch) {\n      return { isMatch: false, score: 0, reasons: ['No language match'] };\n    }\n    \n    score += 50;\n    const commonLangs = buyerLanguages.filter(lang => \n      realtor.languages.map(rl => rl.toLowerCase()).includes(lang.toLowerCase())\n    );\n    reasons.push(`Common languages: ${commonLangs.join(', ')}`);\n    \n    // Bonus scoring\n    \n    // Activity bonus - Buyer has liked properties\n    if (buyer.likedPropertyIds && buyer.likedPropertyIds.length > 0) {\n      score += 10;\n      reasons.push(`Active buyer (${buyer.likedPropertyIds.length} liked properties)`);\n    }\n    \n    // Recent activity bonus\n    if (buyer.lastActiveAt) {\n      const daysSinceActive = (Date.now() - buyer.lastActiveAt.toMillis()) / (1000 * 60 * 60 * 24);\n      if (daysSinceActive <= 7) {\n        score += 15;\n        reasons.push('Active within last week');\n      } else if (daysSinceActive <= 30) {\n        score += 5;\n        reasons.push('Active within last month');\n      }\n    }\n    \n    // Budget reasonableness bonus (buyers with realistic budgets)\n    if (buyer.maxMonthlyPayment >= 800 && buyer.maxDownPayment >= 5000) {\n      score += 10;\n      reasons.push('Realistic budget');\n    }\n    \n    return {\n      isMatch: true,\n      score: Math.min(score, 100), // Cap at 100\n      reasons: reasons\n    };\n  }\n  \n  /**\n   * Purchase a buyer lead (mark as unavailable)\n   */\n  static async purchaseLead(buyerProfileId: string, realtorUserId: string): Promise<{\n    success: boolean;\n    error?: string;\n    buyerDetails?: BuyerDetails;\n  }> {\n    try {\n      // Get buyer profile\n      const buyer = await FirebaseDB.getDocument<BuyerProfile>('buyerProfiles', buyerProfileId);\n      \n      if (!buyer) {\n        return { success: false, error: 'Buyer not found' };\n      }\n      \n      if (!buyer.isAvailableForPurchase) {\n        return { success: false, error: 'Buyer lead no longer available' };\n      }\n      \n      // Mark as purchased\n      await FirebaseDB.updateDocument('buyerProfiles', buyerProfileId, {\n        isAvailableForPurchase: false,\n        purchasedBy: realtorUserId,\n        purchasedAt: Timestamp.now(),\n        updatedAt: Timestamp.now()\n      });\n      \n      \n      return {\n        success: true,\n        buyerDetails: {\n          firstName: buyer.firstName,\n          lastName: buyer.lastName,\n          email: buyer.email,\n          phone: buyer.phone,\n          city: buyer.preferredCity,\n          state: buyer.preferredState,\n          maxMonthlyPayment: buyer.maxMonthlyPayment,\n          maxDownPayment: buyer.maxDownPayment\n        }\n      };\n      \n    } catch (error) {\n      return { success: false, error: 'Purchase failed' };\n    }\n  }\n  \n  /**\n   * Get purchased leads for a realtor\n   */\n  static async getPurchasedLeads(realtorUserId: string): Promise<BuyerProfile[]> {\n    try {\n      const purchasedBuyers = await FirebaseDB.queryDocuments<BuyerProfile>('buyerProfiles', [\n        { field: 'purchasedBy', operator: '==', value: realtorUserId }\n      ]);\n      \n      return purchasedBuyers;\n      \n    } catch (error) {\n      return [];\n    }\n  }\n  \n  /**\n   * Update buyer when they like properties (for activity scoring)\n   */\n  static async updateBuyerActivity(userId: string, likedPropertyIds: string[]): Promise<void> {\n    try {\n      const buyers = await FirebaseDB.queryDocuments<BuyerProfile>('buyerProfiles', [\n        { field: 'userId', operator: '==', value: userId }\n      ]);\n      \n      if (buyers.length > 0) {\n        await FirebaseDB.updateDocument('buyerProfiles', buyers[0].id, {\n          likedPropertyIds: likedPropertyIds,\n          lastActiveAt: Timestamp.now(),\n          updatedAt: Timestamp.now()\n        });\n        \n      }\n      \n    } catch (error) {\n    }\n  }\n  \n  /**\n   * Create a new buyer profile (replaces createBuyerLinkProfile)\n   */\n  static async createBuyerProfile(data: {\n    userId: string;\n    firstName: string;\n    lastName: string;\n    email: string;\n    phone: string;\n    city: string;\n    maxMonthlyPayment: number;\n    maxDownPayment: number;\n    languages?: string[];\n  }): Promise<string> {\n    try {\n      // Parse location\n      const cityParts = data.city.split(',');\n      const city = cityParts[0]?.trim();\n      const state = cityParts[1]?.trim() || 'TX';\n      \n      \n      const profileData: Omit<BuyerProfile, 'id' | 'createdAt' | 'updatedAt'> = {\n        userId: data.userId,\n        firstName: data.firstName,\n        lastName: data.lastName,\n        email: data.email,\n        phone: data.phone,\n        \n        // Location\n        preferredCity: city,\n        preferredState: state,\n        city: city,                    // API compatibility\n        state: state,                  // API compatibility\n        searchRadius: 25,\n        \n        // Budget\n        maxMonthlyPayment: data.maxMonthlyPayment,\n        maxDownPayment: data.maxDownPayment,\n        \n        // Defaults\n        languages: data.languages || ['English'],\n        emailNotifications: true,\n        smsNotifications: true,\n        profileComplete: true,\n        isActive: true,\n        \n        // Arrays\n        matchedPropertyIds: [],\n        likedPropertyIds: [],\n        passedPropertyIds: [],\n        \n        // Lead selling\n        isAvailableForPurchase: true,\n        leadPrice: 1,\n        \n        // Activity\n        lastActiveAt: Timestamp.now()\n      };\n      \n      const profile = await FirebaseDB.createDocument<BuyerProfile>('buyerProfiles', profileData);\n      \n      return profile.id;\n      \n    } catch (error) {\n      throw error;\n    }\n  }\n  \n  /**\n   * Debug: Get statistics about the lead system\n   */\n  static async getSystemStatistics(): Promise<{\n    totalBuyerProfiles: number;\n    availableForPurchase: number;\n    purchased: number;\n    activeInLastWeek: number;\n    byState: Record<string, number>;\n    byCity: Record<string, number>;\n  }> {\n    try {\n      const allBuyers = await FirebaseDB.queryDocuments<BuyerProfile>('buyerProfiles', []);\n      \n      const stats = {\n        totalBuyerProfiles: allBuyers.length,\n        availableForPurchase: 0,\n        purchased: 0,\n        activeInLastWeek: 0,\n        byState: {} as Record<string, number>,\n        byCity: {} as Record<string, number>\n      };\n      \n      const weekAgo = Date.now() - (7 * 24 * 60 * 60 * 1000);\n      \n      for (const buyer of allBuyers) {\n        if (buyer.isAvailableForPurchase) stats.availableForPurchase++;\n        if (buyer.purchasedBy) stats.purchased++;\n        \n        if (buyer.lastActiveAt && buyer.lastActiveAt.toMillis() > weekAgo) {\n          stats.activeInLastWeek++;\n        }\n        \n        const state = buyer.preferredState || buyer.state || 'Unknown';\n        const city = buyer.preferredCity || buyer.city || 'Unknown';\n        \n        stats.byState[state] = (stats.byState[state] || 0) + 1;\n        stats.byCity[`${city}, ${state}`] = (stats.byCity[`${city}, ${state}`] || 0) + 1;\n      }\n      \n      return stats;\n      \n    } catch (error) {\n      throw error;\n    }\n  }\n}","usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/lib/database-cleanup.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'where' is defined but never used.","line":5,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'updateDoc' is defined but never used.","line":9,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":12},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":71,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":71,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1903,1906],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1903,1906],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":72,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":72,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1978,1981],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1978,1981],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Database cleanup and integrity utilities for OwnerFi\nimport { \n  collection, \n  query, \n  where, \n  getDocs, \n  doc, \n  deleteDoc, \n  updateDoc,\n  serverTimestamp,\n  writeBatch\n} from 'firebase/firestore';\nimport { db } from './firebase';\nimport { logInfo, logError } from './logger';\n\nexport interface CleanupResult {\n  success: boolean;\n  action: string;\n  recordsProcessed: number;\n  recordsUpdated: number;\n  recordsDeleted: number;\n  errors: string[];\n  details?: string[];\n}\n\nexport class DatabaseCleanup {\n  \n  // Remove duplicate buyer profiles based on email\n  static async removeDuplicateBuyers(): Promise<CleanupResult> {\n    const result: CleanupResult = {\n      success: false,\n      action: 'remove_duplicate_buyers',\n      recordsProcessed: 0,\n      recordsUpdated: 0,\n      recordsDeleted: 0,\n      errors: [],\n      details: []\n    };\n\n    try {\n      if (!db) {\n        throw new Error('Firebase not initialized');\n      }\n      \n      // Get all buyer profiles\n      const buyersQuery = query(collection(db, 'buyerProfiles'));\n      const buyerDocs = await getDocs(buyersQuery);\n      \n      result.recordsProcessed = buyerDocs.docs.length;\n      \n      // Group buyers by email\n      const buyersByEmail: { [email: string]: Record<string, unknown>[] } = {};\n      \n      buyerDocs.docs.forEach(doc => {\n        const data = doc.data();\n        const email = data.email?.toLowerCase() || '';\n        \n        if (email) {\n          if (!buyersByEmail[email]) {\n            buyersByEmail[email] = [];\n          }\n          buyersByEmail[email].push({ id: doc.id, ...data });\n        }\n      });\n\n      // Find and remove duplicates\n      for (const [email, buyers] of Object.entries(buyersByEmail)) {\n        if (buyers.length > 1) {\n          // Sort by createdAt, keep the oldest (most complete profile)\n          buyers.sort((a, b) => {\n            const aDate = (a.createdAt as any)?.toDate?.() || new Date(0);\n            const bDate = (b.createdAt as any)?.toDate?.() || new Date(0);\n            return aDate.getTime() - bDate.getTime();\n          });\n\n          const keepBuyer = buyers[0];\n          const duplicates = buyers.slice(1);\n\n          result.details?.push(`Found ${buyers.length} duplicate profiles for ${email}, keeping ${keepBuyer.id}`);\n\n          // Delete duplicate profiles\n          for (const duplicate of duplicates) {\n            if (!db) {\n              throw new Error('Firebase not initialized');\n            }\n            await deleteDoc(doc(db, 'buyerProfiles', String(duplicate.id)));\n            result.recordsDeleted++;\n            result.details?.push(`Deleted duplicate buyer ${duplicate.id} (${duplicate.firstName} ${duplicate.lastName})`);\n          }\n        }\n      }\n\n      result.success = true;\n      await logInfo('Database cleanup: duplicate buyers removed', {\n        action: result.action,\n        metadata: {\n          recordsProcessed: result.recordsProcessed,\n          recordsDeleted: result.recordsDeleted\n        }\n      });\n\n    } catch (error) {\n      result.errors.push(`Failed to remove duplicate buyers: ${(error as Error).message}`);\n      await logError('Database cleanup failed', { action: result.action }, error as Error);\n    }\n\n    return result;\n  }\n\n  // Clean up orphaned lead purchases (purchases without valid buyer/realtor)\n  static async cleanupOrphanedLeadPurchases(): Promise<CleanupResult> {\n    const result: CleanupResult = {\n      success: false,\n      action: 'cleanup_orphaned_lead_purchases',\n      recordsProcessed: 0,\n      recordsUpdated: 0,\n      recordsDeleted: 0,\n      errors: [],\n      details: []\n    };\n\n    try {\n      if (!db) {\n        throw new Error('Firebase not initialized');\n      }\n      \n      // Get all lead purchases\n      const purchasesQuery = query(collection(db, 'buyerLeadPurchases'));\n      const purchaseDocs = await getDocs(purchasesQuery);\n      \n      result.recordsProcessed = purchaseDocs.docs.length;\n\n      // Get valid buyer and realtor IDs\n      const buyersQuery = query(collection(db, 'buyerProfiles'));\n      const buyerDocs = await getDocs(buyersQuery);\n      const validBuyerIds = new Set(buyerDocs.docs.map(doc => doc.id));\n\n      const realtorsQuery = query(collection(db, 'realtors'));\n      const realtorDocs = await getDocs(realtorsQuery);\n      const validRealtorIds = new Set(realtorDocs.docs.map(doc => doc.id));\n\n      // Check each purchase for valid references\n      for (const purchaseDoc of purchaseDocs.docs) {\n        const purchase = purchaseDoc.data();\n        const buyerId = purchase.buyerId;\n        const realtorId = purchase.realtorId;\n\n        let shouldDelete = false;\n        const reasons = [];\n\n        if (!validBuyerIds.has(buyerId)) {\n          reasons.push(`invalid buyer ID: ${buyerId}`);\n          shouldDelete = true;\n        }\n\n        if (!validRealtorIds.has(realtorId)) {\n          reasons.push(`invalid realtor ID: ${realtorId}`);\n          shouldDelete = true;\n        }\n\n        if (shouldDelete) {\n          if (!db) {\n            throw new Error('Firebase not initialized');\n          }\n          await deleteDoc(doc(db, 'buyerLeadPurchases', purchaseDoc.id));\n          result.recordsDeleted++;\n          result.details?.push(`Deleted orphaned purchase ${purchaseDoc.id}: ${reasons.join(', ')}`);\n        }\n      }\n\n      result.success = true;\n      await logInfo('Database cleanup: orphaned lead purchases removed', {\n        action: result.action,\n        metadata: {\n          recordsProcessed: result.recordsProcessed,\n          recordsDeleted: result.recordsDeleted\n        }\n      });\n\n    } catch (error) {\n      result.errors.push(`Failed to cleanup orphaned purchases: ${(error as Error).message}`);\n      await logError('Database cleanup failed', { action: result.action }, error as Error);\n    }\n\n    return result;\n  }\n\n  // Fix incomplete profiles (add missing required fields with defaults)\n  static async fixIncompleteProfiles(): Promise<CleanupResult> {\n    const result: CleanupResult = {\n      success: false,\n      action: 'fix_incomplete_profiles',\n      recordsProcessed: 0,\n      recordsUpdated: 0,\n      recordsDeleted: 0,\n      errors: [],\n      details: []\n    };\n\n    try {\n      if (!db) {\n        throw new Error('Firebase not initialized');\n      }\n      \n      const batch = writeBatch(db);\n      let batchCount = 0;\n\n      // Fix buyer profiles\n      const buyersQuery = query(collection(db, 'buyerProfiles'));\n      const buyerDocs = await getDocs(buyersQuery);\n\n      for (const buyerDoc of buyerDocs.docs) {\n        const buyer = buyerDoc.data();\n        const updates: Record<string, unknown> = {};\n        \n        // Add default values for missing fields\n        if (!buyer.languages || !Array.isArray(buyer.languages)) {\n          updates.languages = ['English'];\n        }\n        \n        if (typeof buyer.emailNotifications !== 'boolean') {\n          updates.emailNotifications = true;\n        }\n        \n        if (typeof buyer.smsNotifications !== 'boolean') {\n          updates.smsNotifications = false;\n        }\n        \n        if (!buyer.searchRadius) {\n          updates.searchRadius = 25;\n        }\n\n        if (!buyer.minBedrooms) {\n          updates.minBedrooms = 2;\n        }\n\n        if (!buyer.minBathrooms) {\n          updates.minBathrooms = 1;\n        }\n\n        if (typeof buyer.profileComplete !== 'boolean') {\n          // Determine if profile is complete based on essential fields\n          updates.profileComplete = !!(\n            buyer.maxMonthlyPayment && \n            buyer.maxDownPayment && \n            buyer.preferredCity && \n            buyer.preferredState\n          );\n        }\n\n        if (Object.keys(updates).length > 0) {\n          updates.updatedAt = serverTimestamp();\n          if (!db) {\n            throw new Error('Firebase not initialized');\n          }\n          batch.update(doc(db, 'buyerProfiles', buyerDoc.id), updates);\n          batchCount++;\n          result.recordsUpdated++;\n          result.details?.push(`Updated buyer ${buyerDoc.id} with defaults: ${Object.keys(updates).join(', ')}`);\n\n          // Commit batch every 500 operations\n          if (batchCount >= 500) {\n            await batch.commit();\n            batchCount = 0;\n          }\n        }\n      }\n\n      // Fix realtor profiles\n      const realtorsQuery = query(collection(db, 'realtors'));\n      const realtorDocs = await getDocs(realtorsQuery);\n\n      for (const realtorDoc of realtorDocs.docs) {\n        const realtor = realtorDoc.data();\n        const updates: Record<string, unknown> = {};\n        \n        if (!realtor.languages || !Array.isArray(realtor.languages)) {\n          updates.languages = ['English'];\n        }\n\n        if (!realtor.serviceRadius) {\n          updates.serviceRadius = 50;\n        }\n\n        if (!realtor.serviceStates || !Array.isArray(realtor.serviceStates)) {\n          updates.serviceStates = realtor.primaryState ? [realtor.primaryState] : [];\n        }\n\n        if (!realtor.serviceCities || !Array.isArray(realtor.serviceCities)) {\n          updates.serviceCities = realtor.primaryCity && realtor.primaryState ? \n            [`${realtor.primaryCity}, ${realtor.primaryState}`] : [];\n        }\n\n        if (typeof realtor.credits !== 'number') {\n          updates.credits = 0;\n        }\n\n        if (typeof realtor.isOnTrial !== 'boolean') {\n          updates.isOnTrial = true;\n        }\n\n        if (Object.keys(updates).length > 0) {\n          updates.updatedAt = serverTimestamp();\n          if (!db) {\n            throw new Error('Firebase not initialized');\n          }\n          batch.update(doc(db, 'realtors', realtorDoc.id), updates);\n          batchCount++;\n          result.recordsUpdated++;\n          result.details?.push(`Updated realtor ${realtorDoc.id} with defaults: ${Object.keys(updates).join(', ')}`);\n\n          if (batchCount >= 500) {\n            await batch.commit();\n            batchCount = 0;\n          }\n        }\n      }\n\n      // Commit remaining operations\n      if (batchCount > 0) {\n        await batch.commit();\n      }\n\n      result.recordsProcessed = buyerDocs.docs.length + realtorDocs.docs.length;\n      result.success = true;\n\n      await logInfo('Database cleanup: incomplete profiles fixed', {\n        action: result.action,\n        metadata: {\n          recordsProcessed: result.recordsProcessed,\n          recordsUpdated: result.recordsUpdated\n        }\n      });\n\n    } catch (error) {\n      result.errors.push(`Failed to fix incomplete profiles: ${(error as Error).message}`);\n      await logError('Database cleanup failed', { action: result.action }, error as Error);\n    }\n\n    return result;\n  }\n\n  // Remove test data (emails ending with specific patterns)\n  static async removeTestData(): Promise<CleanupResult> {\n    const result: CleanupResult = {\n      success: false,\n      action: 'remove_test_data',\n      recordsProcessed: 0,\n      recordsUpdated: 0,\n      recordsDeleted: 0,\n      errors: [],\n      details: []\n    };\n\n    const testPatterns = [\n      'test.com',\n      'example.com',\n      'ownerfi-test.com',\n      '@aol.com', // Often test emails\n      'test@',\n      'demo@'\n    ];\n\n    try {\n      if (!db) {\n        throw new Error('Firebase not initialized');\n      }\n      \n      // Remove test buyers\n      const buyersQuery = query(collection(db, 'buyerProfiles'));\n      const buyerDocs = await getDocs(buyersQuery);\n\n      for (const buyerDoc of buyerDocs.docs) {\n        const buyer = buyerDoc.data();\n        const email = buyer.email?.toLowerCase() || '';\n        \n        const isTestData = testPatterns.some(pattern => email.includes(pattern.toLowerCase()));\n        \n        if (isTestData) {\n          if (!db) {\n            throw new Error('Firebase not initialized');\n          }\n          await deleteDoc(doc(db, 'buyerProfiles', buyerDoc.id));\n          result.recordsDeleted++;\n          result.details?.push(`Deleted test buyer: ${buyer.firstName} ${buyer.lastName} (${email})`);\n        }\n      }\n\n      // Remove test realtors\n      const realtorsQuery = query(collection(db, 'realtors'));\n      const realtorDocs = await getDocs(realtorsQuery);\n\n      for (const realtorDoc of realtorDocs.docs) {\n        const realtor = realtorDoc.data();\n        const email = realtor.email?.toLowerCase() || '';\n        \n        const isTestData = testPatterns.some(pattern => email.includes(pattern.toLowerCase()));\n        \n        if (isTestData) {\n          if (!db) {\n            throw new Error('Firebase not initialized');\n          }\n          await deleteDoc(doc(db, 'realtors', realtorDoc.id));\n          result.recordsDeleted++;\n          result.details?.push(`Deleted test realtor: ${realtor.firstName} ${realtor.lastName} (${email})`);\n        }\n      }\n\n      result.recordsProcessed = buyerDocs.docs.length + realtorDocs.docs.length;\n      result.success = true;\n\n      await logInfo('Database cleanup: test data removed', {\n        action: result.action,\n        metadata: {\n          recordsProcessed: result.recordsProcessed,\n          recordsDeleted: result.recordsDeleted\n        }\n      });\n\n    } catch (error) {\n      result.errors.push(`Failed to remove test data: ${(error as Error).message}`);\n      await logError('Database cleanup failed', { action: result.action }, error as Error);\n    }\n\n    return result;\n  }\n\n  // Run comprehensive cleanup\n  static async runComprehensiveCleanup(): Promise<CleanupResult[]> {\n    const results: CleanupResult[] = [];\n    \n    \n    // Run all cleanup operations\n    results.push(await this.fixIncompleteProfiles());\n    results.push(await this.removeDuplicateBuyers());\n    results.push(await this.cleanupOrphanedLeadPurchases());\n    \n    \n    return results;\n  }\n}","usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/lib/firebase-admin.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":41,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":41,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Lazy initialization to prevent build-time Firebase imports\nlet adminDb: unknown = null;\nlet adminAuth: unknown = null;\nlet isInitialized = false;\n\nasync function initializeAdminSDK() {\n  if (isInitialized) return { adminDb, adminAuth };\n  \n  try {\n    // Dynamic imports to avoid build-time initialization\n    const { initializeApp, getApps, cert } = await import('firebase-admin/app');\n    const { getFirestore } = await import('firebase-admin/firestore');\n    const { getAuth } = await import('firebase-admin/auth');\n\n    // Skip if already initialized\n    if (getApps().length === 0) {\n      // Check if we have the required environment variables\n      const projectId = process.env.FIREBASE_PROJECT_ID;\n      const privateKey = process.env.FIREBASE_PRIVATE_KEY;\n      const clientEmail = process.env.FIREBASE_CLIENT_EMAIL;\n\n\n      if (!projectId || !privateKey || !clientEmail) {\n        isInitialized = true;\n        return { adminDb: null, adminAuth: null };\n      }\n\n      initializeApp({\n        credential: cert({\n          projectId,\n          privateKey: privateKey.replace(/\\\\n/g, '\\n'),\n          clientEmail,\n        })\n      });\n    }\n\n    const app = getApps()[0];\n    adminDb = getFirestore(app);\n    adminAuth = getAuth(app);\n    \n  } catch (error) {\n    adminDb = null;\n    adminAuth = null;\n  }\n  \n  isInitialized = true;\n  return { adminDb, adminAuth };\n}\n\n// Export functions that initialize on demand\nexport async function getAdminDb() {\n  const { adminDb } = await initializeAdminSDK();\n  return adminDb;\n}\n\nexport async function getAdminAuth() {\n  const { adminAuth } = await initializeAdminSDK();\n  return adminAuth;\n}\n\n// Legacy exports for backward compatibility (these will be null initially)\nexport { adminDb, adminAuth };","usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/lib/firebase-db.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'writeBatch' is defined but never used.","line":15,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'LeadDispute' is defined but never used.","line":27,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'PropertyMatch' is defined but never used.","line":28,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":28,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'RealtorSubscription' is defined but never used.","line":29,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Transaction' is defined but never used.","line":30,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'SystemLog' is defined but never used.","line":31,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":31,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'createTimestamp' is defined but never used.","line":37,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":37,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'convertTimestampToDate' is defined but never used.","line":38,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":38,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'PropertyListing' is defined but never used.","line":40,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":40,"endColumn":25},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":69,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":69,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1434,1437],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1434,1437],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// AUTHORITATIVE Firebase database layer - SINGLE SOURCE OF TRUTH\n// All database operations go through this file\n\nimport { \n  collection, \n  doc, \n  getDoc, \n  getDocs, \n  setDoc, \n  updateDoc, \n  deleteDoc, \n  query, \n  where, \n  limit as firestoreLimit,\n  writeBatch,\n  serverTimestamp,\n  runTransaction,\n  Timestamp,\n  WhereFilterOp\n} from 'firebase/firestore';\nimport { db } from './firebase';\nimport { \n  User, \n  BuyerProfile, \n  RealtorProfile, \n  LeadPurchase, \n  LeadDispute, \n  PropertyMatch, \n  RealtorSubscription, \n  Transaction, \n  SystemLog,\n  COLLECTIONS,\n  isValidUser,\n  isValidBuyerProfile,\n  isValidRealtorProfile,\n  generateFirebaseId,\n  createTimestamp,\n  convertTimestampToDate\n} from './firebase-models';\nimport { PropertyListing } from './property-schema';\n\n// Generic database operations\nexport class FirebaseDB {\n  \n  private static checkFirebase() {\n    if (!db) {\n      throw new Error('Firebase not initialized');\n    }\n  }\n  \n  // Generic document operations\n  static async createDocument<T>(\n    collectionName: string, \n    data: Omit<T, 'id' | 'createdAt' | 'updatedAt'>,\n    customId?: string\n  ): Promise<T> {\n    FirebaseDB.checkFirebase();\n    \n    const id = customId || generateFirebaseId();\n    const now = serverTimestamp();\n    \n    const docData = {\n      ...data,\n      id,\n      createdAt: now,\n      updatedAt: now\n    } as T;\n\n    await setDoc(doc(db!, collectionName, id), docData as any);\n    return docData;\n  }\n\n  static async getDocument<T>(collectionName: string, id: string): Promise<T | null> {\n    FirebaseDB.checkFirebase();\n    const docRef = doc(db!, collectionName, id);\n    const docSnap = await getDoc(docRef);\n    \n    if (!docSnap.exists()) return null;\n    \n    return { id: docSnap.id, ...docSnap.data() } as T;\n  }\n\n  static async updateDocument<T>(\n    collectionName: string, \n    id: string, \n    updates: Partial<T>\n  ): Promise<void> {\n    FirebaseDB.checkFirebase();\n    const docRef = doc(db!, collectionName, id);\n    await updateDoc(docRef, {\n      ...updates,\n      updatedAt: serverTimestamp()\n    });\n  }\n\n  static async deleteDocument(collectionName: string, id: string): Promise<void> {\n    FirebaseDB.checkFirebase();\n    const docRef = doc(db!, collectionName, id);\n    await deleteDoc(docRef);\n  }\n\n  static async queryDocuments<T>(\n    collectionName: string,\n    conditions: { field: string; operator: WhereFilterOp; value: unknown }[],\n    limitCount?: number\n  ): Promise<T[]> {\n    FirebaseDB.checkFirebase();\n    let q = query(collection(db!, collectionName));\n    \n    // Add where conditions\n    for (const condition of conditions) {\n      q = query(q, where(condition.field, condition.operator, condition.value));\n    }\n    \n    // Add limit if specified\n    if (limitCount) {\n      q = query(q, firestoreLimit(limitCount));\n    }\n\n    const querySnapshot = await getDocs(q);\n    return querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() } as T));\n  }\n\n  // User operations\n  static async createUser(userData: {\n    email: string;\n    name: string;\n    password: string;\n    role: 'buyer' | 'realtor' | 'admin' | 'pending';\n  }): Promise<User> {\n    const user = await this.createDocument<User>(COLLECTIONS.USERS, userData);\n    \n    // Validate created user\n    if (!isValidUser(user)) {\n      throw new Error('Invalid user data created');\n    }\n    \n    return user;\n  }\n\n  static async findUserByEmail(email: string): Promise<User | null> {\n    const users = await this.queryDocuments<User>(\n      COLLECTIONS.USERS,\n      [{ field: 'email', operator: '==', value: email.toLowerCase() }],\n      1\n    );\n    \n    return users.length > 0 ? users[0] : null;\n  }\n\n  static async findUserById(id: string): Promise<User | null> {\n    return this.getDocument<User>(COLLECTIONS.USERS, id);\n  }\n\n  // Buyer profile operations\n  static async createBuyerProfile(\n    buyerData: Omit<BuyerProfile, 'id' | 'createdAt' | 'updatedAt'>\n  ): Promise<BuyerProfile> {\n    const buyer = await this.createDocument<BuyerProfile>(COLLECTIONS.BUYER_PROFILES, buyerData);\n    \n    if (!isValidBuyerProfile(buyer)) {\n      throw new Error('Invalid buyer profile data');\n    }\n    \n    return buyer;\n  }\n\n  static async findBuyerByUserId(userId: string): Promise<BuyerProfile | null> {\n    const buyers = await this.queryDocuments<BuyerProfile>(\n      COLLECTIONS.BUYER_PROFILES,\n      [{ field: 'userId', operator: '==', value: userId }],\n      1\n    );\n    \n    return buyers.length > 0 ? buyers[0] : null;\n  }\n\n  static async getCompleteBuyers(limit?: number): Promise<BuyerProfile[]> {\n    return this.queryDocuments<BuyerProfile>(\n      COLLECTIONS.BUYER_PROFILES,\n      [{ field: 'profileComplete', operator: '==', value: true }],\n      limit\n    );\n  }\n\n  // Realtor profile operations\n  static async createRealtorProfile(\n    realtorData: Omit<RealtorProfile, 'id' | 'createdAt' | 'updatedAt'>\n  ): Promise<RealtorProfile> {\n    const realtor = await this.createDocument<RealtorProfile>(COLLECTIONS.REALTOR_PROFILES, realtorData);\n    \n    if (!isValidRealtorProfile(realtor)) {\n      throw new Error('Invalid realtor profile data');\n    }\n    \n    return realtor;\n  }\n\n  static async findRealtorByUserId(userId: string): Promise<RealtorProfile | null> {\n    const realtors = await this.queryDocuments<RealtorProfile>(\n      COLLECTIONS.REALTOR_PROFILES,\n      [{ field: 'userId', operator: '==', value: userId }],\n      1\n    );\n    \n    return realtors.length > 0 ? realtors[0] : null;\n  }\n\n  static async updateRealtorCredits(realtorId: string, newBalance: number): Promise<void> {\n    await this.updateDocument<RealtorProfile>(\n      COLLECTIONS.REALTOR_PROFILES,\n      realtorId,\n      { credits: newBalance }\n    );\n  }\n\n  // Lead purchase operations\n  static async createLeadPurchase(purchaseData: {\n    realtorId: string;\n    buyerId: string;\n    creditsCost: number;\n    purchasePrice: number;\n  }): Promise<LeadPurchase> {\n    return this.createDocument<LeadPurchase>(COLLECTIONS.LEAD_PURCHASES, {\n      ...purchaseData,\n      status: 'purchased',\n      purchasedAt: serverTimestamp() as unknown as Timestamp\n    });\n  }\n\n  static async getPurchasedLeads(realtorId: string): Promise<LeadPurchase[]> {\n    return this.queryDocuments<LeadPurchase>(\n      COLLECTIONS.LEAD_PURCHASES,\n      [{ field: 'realtorId', operator: '==', value: realtorId }]\n    );\n  }\n\n  // Atomic user + profile creation (solves orphaned records problem)\n  static async createUserWithProfile(userData: {\n    email: string;\n    name: string;\n    password: string;\n    role: 'buyer' | 'realtor';\n    profileData: Record<string, unknown>;\n  }): Promise<{ user: User; profile: BuyerProfile | RealtorProfile }> {\n    FirebaseDB.checkFirebase();\n    return runTransaction(db!, async (transaction) => {\n      // Create user first\n      const userId = generateFirebaseId();\n      const user: User = {\n        id: userId,\n        email: userData.email.toLowerCase(),\n        name: userData.name,\n        role: userData.role,\n        password: userData.password,\n        createdAt: Timestamp.now(),\n        updatedAt: Timestamp.now()\n      };\n      \n      // Create profile\n      const profileId = generateFirebaseId();\n      const profileCollection = userData.role === 'buyer' ? \n        COLLECTIONS.BUYER_PROFILES : COLLECTIONS.REALTOR_PROFILES;\n      \n      const profile = {\n        id: profileId,\n        userId: userId,\n        ...userData.profileData,\n        createdAt: Timestamp.now(),\n        updatedAt: Timestamp.now()\n      };\n      \n      // Write both documents atomically\n      const userRef = doc(db!, COLLECTIONS.USERS, userId);\n      const profileRef = doc(db!, profileCollection, profileId);\n      \n      transaction.set(userRef, user);\n      transaction.set(profileRef, profile);\n      \n      return { user, profile: profile as BuyerProfile | RealtorProfile };\n    });\n  }\n\n  // Atomic lead purchase (solves credit/purchase consistency)\n  static async purchaseLeadAtomic(data: {\n    realtorId: string;\n    buyerId: string;\n    creditsCost: number;\n    purchasePrice: number;\n  }): Promise<{ purchase: LeadPurchase; newBalance: number }> {\n    FirebaseDB.checkFirebase();\n    return runTransaction(db!, async (transaction) => {\n      // Get current realtor profile\n      const realtorRef = doc(db!, COLLECTIONS.REALTOR_PROFILES, data.realtorId);\n      const realtorSnap = await transaction.get(realtorRef);\n      \n      if (!realtorSnap.exists()) {\n        throw new Error('Realtor not found');\n      }\n      \n      const realtorData = realtorSnap.data() as RealtorProfile;\n      \n      // Check credits\n      if (realtorData.credits < data.creditsCost) {\n        throw new Error('Insufficient credits');\n      }\n      \n      // Create purchase record\n      const purchaseId = generateFirebaseId();\n      const purchase: LeadPurchase = {\n        id: purchaseId,\n        realtorId: data.realtorId,\n        buyerId: data.buyerId,\n        creditsCost: data.creditsCost,\n        purchasePrice: data.purchasePrice,\n        status: 'purchased',\n        purchasedAt: Timestamp.now(),\n        createdAt: Timestamp.now(),\n        updatedAt: Timestamp.now()\n      };\n      \n      // Calculate new balance\n      const newBalance = realtorData.credits - data.creditsCost;\n      \n      // Write both updates atomically\n      const purchaseRef = doc(db!, COLLECTIONS.LEAD_PURCHASES, purchaseId);\n      \n      transaction.set(purchaseRef, purchase);\n      transaction.update(realtorRef, {\n        credits: newBalance,\n        updatedAt: serverTimestamp()\n      });\n      \n      return { purchase, newBalance };\n    });\n  }\n\n  // Helper: Clean up orphaned data\n  static async cleanupOrphanedData(): Promise<{\n    usersWithoutProfiles: string[];\n    profilesWithoutUsers: string[];\n    fixed: number;\n  }> {\n    const results = {\n      usersWithoutProfiles: [] as string[],\n      profilesWithoutUsers: [] as string[],\n      fixed: 0\n    };\n    \n    // Find users without profiles\n    const users = await this.queryDocuments<User>(COLLECTIONS.USERS, []);\n    for (const user of users) {\n      const profileCollection = user.role === 'buyer' ? \n        COLLECTIONS.BUYER_PROFILES : COLLECTIONS.REALTOR_PROFILES;\n      \n      const profiles = await this.queryDocuments<BuyerProfile | RealtorProfile>(\n        profileCollection,\n        [{ field: 'userId', operator: '==', value: user.id }],\n        1\n      );\n      \n      if (profiles.length === 0) {\n        results.usersWithoutProfiles.push(user.id);\n      }\n    }\n    \n    return results;\n  }\n}\n\n// Export convenience methods\nexport const { \n  createUser, \n  findUserByEmail, \n  createBuyerProfile, \n  createRealtorProfile, \n  findBuyerByUserId, \n  findRealtorByUserId, \n  createUserWithProfile, \n  purchaseLeadAtomic, \n  cleanupOrphanedData\n} = FirebaseDB;","usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/lib/firebase-models.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/lib/firebase-safe.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/lib/firebase.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":34,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":34,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { initializeApp, getApps, FirebaseApp } from 'firebase/app';\nimport { getFirestore, Firestore } from 'firebase/firestore';\nimport { getAuth, Auth } from 'firebase/auth';\nimport { getStorage, FirebaseStorage } from 'firebase/storage';\n\n\n// Check if we have the minimum required environment variables\nconst hasFirebaseConfig = !!(\n  process.env.NEXT_PUBLIC_FIREBASE_API_KEY &&\n  process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID\n);\n\n// Initialize Firebase (only once) - skip during build if no config available\nlet app: FirebaseApp | null = null;\nlet db: Firestore | null = null;\nlet auth: Auth | null = null;\nlet storage: FirebaseStorage | null = null;\n\nif (hasFirebaseConfig) {\n  try {\n    const firebaseConfig = {\n      apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY!,\n      authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN!,\n      projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID!,\n      storageBucket: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET!,\n      messagingSenderId: process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID!,\n      appId: process.env.NEXT_PUBLIC_FIREBASE_APP_ID!\n    };\n\n    app = getApps().length === 0 ? initializeApp(firebaseConfig) : getApps()[0];\n    db = getFirestore(app);\n    auth = getAuth(app);\n    storage = getStorage(app);\n  } catch (error) {\n    // Reset to null on failure\n    app = null;\n    db = null;\n    auth = null;\n    storage = null;\n  }\n} else {\n}\n\n// Safe exports - these can be null if Firebase isn't initialized\nexport { db, auth, storage };\n\nexport default app;","usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/lib/firestore.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DocumentReference' is defined but never used.","line":1,"column":124,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":141},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'QuerySnapshot' is defined but never used.","line":1,"column":157,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":170},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":45,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":45,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1250,1253],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1250,1253],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { collection, doc, getDoc, setDoc, updateDoc, deleteDoc, query, where, getDocs, orderBy as firestoreOrderBy, limit, DocumentReference, DocumentData, QuerySnapshot } from 'firebase/firestore';\nimport { getSafeDb } from './firebase-safe';\n\n/**\n * Firestore helper utilities for common database operations\n */\nexport const firestoreHelpers = {\n  /**\n   * Generate a unique ID for Firestore documents\n   */\n  generateId(): string {\n    const db = getSafeDb();\n    return doc(collection(db, 'temp')).id;\n  },\n\n  /**\n   * Get a document by ID\n   */\n  async getDocument<T = DocumentData>(collectionName: string, docId: string): Promise<T | null> {\n    try {\n      const db = getSafeDb();\n      const docRef = doc(db, collectionName, docId);\n      const docSnap = await getDoc(docRef);\n      \n      if (docSnap.exists()) {\n        return { id: docSnap.id, ...docSnap.data() } as T;\n      }\n      return null;\n    } catch (error) {\n      throw error;\n    }\n  },\n\n  /**\n   * Set a document with ID\n   */\n  async setDocument<T = DocumentData>(\n    collectionName: string, \n    docId: string, \n    data: T\n  ): Promise<void> {\n    try {\n      const db = getSafeDb();\n      const docRef = doc(db, collectionName, docId);\n      await setDoc(docRef, data as any);\n    } catch (error) {\n      throw error;\n    }\n  },\n\n  /**\n   * Update a document\n   */\n  async updateDocument<T = DocumentData>(\n    collectionName: string, \n    docId: string, \n    data: Partial<T>\n  ): Promise<void> {\n    try {\n      const db = getSafeDb();\n      const docRef = doc(db, collectionName, docId);\n      await updateDoc(docRef, data);\n    } catch (error) {\n      throw error;\n    }\n  },\n\n  /**\n   * Delete a document\n   */\n  async deleteDocument(collectionName: string, docId: string): Promise<void> {\n    try {\n      const db = getSafeDb();\n      const docRef = doc(db, collectionName, docId);\n      await deleteDoc(docRef);\n    } catch (error) {\n      throw error;\n    }\n  },\n\n  /**\n   * Query documents with filtering\n   */\n  async queryDocuments<T = DocumentData>(\n    collectionName: string,\n    field: string,\n    operator: '==' | '!=' | '<' | '<=' | '>' | '>=' | 'array-contains' | 'array-contains-any' | 'in' | 'not-in',\n    value: unknown,\n    orderByField?: string,\n    limitCount?: number\n  ): Promise<T[]> {\n    try {\n      const db = getSafeDb();\n      const collectionRef = collection(db, collectionName);\n      let q = query(collectionRef, where(field, operator, value));\n      \n      if (orderByField) {\n        q = query(q, firestoreOrderBy(orderByField));\n      }\n      \n      if (limitCount) {\n        q = query(q, limit(limitCount));\n      }\n      \n      const querySnapshot = await getDocs(q);\n      const results: T[] = [];\n      \n      querySnapshot.forEach((doc) => {\n        results.push({ id: doc.id, ...doc.data() } as T);\n      });\n      \n      return results;\n    } catch (error) {\n      throw error;\n    }\n  },\n\n  /**\n   * Get all documents from a collection\n   */\n  async getAllDocuments<T = DocumentData>(collectionName: string, limitCount?: number): Promise<T[]> {\n    try {\n      const db = getSafeDb();\n      const collectionRef = collection(db, collectionName);\n      let q = query(collectionRef);\n      \n      if (limitCount) {\n        q = query(q, limit(limitCount));\n      }\n      \n      const querySnapshot = await getDocs(q);\n      const results: T[] = [];\n      \n      querySnapshot.forEach((doc) => {\n        results.push({ id: doc.id, ...doc.data() } as T);\n      });\n      \n      return results;\n    } catch (error) {\n      throw error;\n    }\n  }\n};","usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/lib/google-maps-service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/lib/google-places-service.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":35,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":35,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":62,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":62,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":96,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":96,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":192,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":192,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Google Places API integration for city validation and nearby city discovery\n// Designed for scale with proper error handling and rate limiting\n\nimport { GooglePlace, ValidatedCity, ServiceArea, REALTOR_CONSTANTS } from './realtor-models';\nimport { Timestamp } from 'firebase/firestore';\n\n// Google Places API configuration\nconst GOOGLE_PLACES_API_KEY = process.env.GOOGLE_PLACES_API_KEY || 'AIzaSyCelger3EPc8GzTOQq7-cv6tUeVh_XN9jE';\n\nexport class GooglePlacesService {\n  \n  // Search for cities using Google Places Autocomplete\n  static async searchCities(query: string, limit: number = 5): Promise<ValidatedCity[]> {\n    try {\n      // Use Google Places Autocomplete API for city search\n      const autocompleteUrl = `https://maps.googleapis.com/maps/api/place/autocomplete/json?input=${encodeURIComponent(query)}&types=(cities)&key=${GOOGLE_PLACES_API_KEY}`;\n      \n      const response = await fetch(autocompleteUrl);\n      const data = await response.json();\n      \n      if (data.status !== 'OK' && data.status !== 'ZERO_RESULTS') {\n        throw new Error(`Google Places API error: ${data.status} - ${data.error_message || 'Unknown error'}`);\n      }\n      \n      const predictions = data.predictions || [];\n      const validatedCities: ValidatedCity[] = [];\n      \n      // Get detailed information for each city\n      for (const prediction of predictions.slice(0, limit)) {\n        try {\n          const cityDetails = await this.getCityDetails(prediction.place_id);\n          if (cityDetails) {\n            validatedCities.push(cityDetails);\n          }\n        } catch (error) {\n          // Continue with other cities even if one fails\n        }\n      }\n      \n      return validatedCities;\n      \n    } catch (error) {\n      throw new Error(`City search failed: ${error}`);\n    }\n  }\n  \n  // Get detailed city information by Place ID\n  static async getCityDetails(placeId: string): Promise<ValidatedCity | null> {\n    try {\n      const detailsUrl = `https://maps.googleapis.com/maps/api/place/details/json?place_id=${placeId}&fields=formatted_address,name,geometry,address_components&key=${GOOGLE_PLACES_API_KEY}`;\n      \n      const response = await fetch(detailsUrl);\n      const data = await response.json();\n      \n      if (data.status !== 'OK') {\n        throw new Error(`Google Places Details API error: ${data.status}`);\n      }\n      \n      const place = data.result;\n      return this.parseGooglePlaceToCity(place);\n      \n    } catch (error) {\n      return null;\n    }\n  }\n  \n  // Find all cities within radius using Google Places Nearby Search\n  static async findNearbyCities(centerCity: ValidatedCity, radiusMiles: number = REALTOR_CONSTANTS.SERVICE_RADIUS_MILES): Promise<ValidatedCity[]> {\n    try {\n      const radiusMeters = radiusMiles * 1609.34; // Convert miles to meters\n      const { lat, lng } = centerCity.coordinates;\n      \n      // Use Google Places Nearby Search to find cities\n      const nearbyUrl = `https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=${lat},${lng}&radius=${radiusMeters}&type=locality&key=${GOOGLE_PLACES_API_KEY}`;\n      \n      const response = await fetch(nearbyUrl);\n      const data = await response.json();\n      \n      if (data.status !== 'OK' && data.status !== 'ZERO_RESULTS') {\n        throw new Error(`Google Places Nearby API error: ${data.status} - ${data.error_message || 'Unknown error'}`);\n      }\n      \n      const places = data.results || [];\n      const nearbyCities: ValidatedCity[] = [];\n      \n      // Process each nearby place\n      for (const place of places) {\n        // Skip the center city itself\n        if (place.place_id === centerCity.placeId) continue;\n        \n        try {\n          const cityDetails = await this.getCityDetails(place.place_id);\n          if (cityDetails && this.isCityInSameCountry(cityDetails, centerCity)) {\n            nearbyCities.push(cityDetails);\n          }\n        } catch (error) {\n        }\n        \n        // Limit results to prevent data bloat\n        if (nearbyCities.length >= REALTOR_CONSTANTS.MAX_NEARBY_CITIES) {\n          break;\n        }\n      }\n      \n      // Sort by distance from center city\n      return nearbyCities.sort((a, b) => {\n        const distanceA = this.calculateDistance(centerCity.coordinates, a.coordinates);\n        const distanceB = this.calculateDistance(centerCity.coordinates, b.coordinates);\n        return distanceA - distanceB;\n      });\n      \n    } catch (error) {\n      throw new Error(`Nearby cities search failed: ${error}`);\n    }\n  }\n  \n  // Create complete service area with primary city + nearby cities\n  static async createServiceArea(primaryCityQuery: string): Promise<ServiceArea> {\n    try {\n      // First, validate and get the primary city\n      const searchResults = await this.searchCities(primaryCityQuery, 1);\n      \n      if (searchResults.length === 0) {\n        throw new Error(`No cities found for \"${primaryCityQuery}\". Please check spelling and try again.`);\n      }\n      \n      const primaryCity = searchResults[0];\n      \n      // Find nearby cities within 30 miles\n      const nearbyCities = await this.findNearbyCities(primaryCity);\n      \n      return {\n        primaryCity,\n        nearbyCities,\n        radiusMiles: REALTOR_CONSTANTS.SERVICE_RADIUS_MILES,\n        totalCitiesServed: 1 + nearbyCities.length,\n        lastUpdated: Timestamp.now()\n      };\n      \n    } catch (error) {\n      throw error;\n    }\n  }\n  \n  // Update existing service area with new primary city\n  static async updateServiceArea(currentServiceArea: ServiceArea, newPrimaryCityQuery: string): Promise<ServiceArea> {\n    try {\n      return await this.createServiceArea(newPrimaryCityQuery);\n    } catch (error) {\n      throw error;\n    }\n  }\n  \n  // Parse Google Place result into our ValidatedCity format\n  private static parseGooglePlaceToCity(place: GooglePlace): ValidatedCity | null {\n    try {\n      // Extract city name and state from address components\n      let cityName = '';\n      let stateName = '';\n      let stateCode = '';\n      \n      for (const component of place.address_components) {\n        if (component.types.includes('locality')) {\n          cityName = component.long_name;\n        } else if (component.types.includes('administrative_area_level_1')) {\n          stateName = component.long_name;\n          stateCode = component.short_name;\n        }\n      }\n      \n      // Fallback to place name if no locality found\n      if (!cityName) {\n        cityName = place.name;\n      }\n      \n      if (!cityName || !stateCode) {\n        return null;\n      }\n      \n      return {\n        name: cityName,\n        state: stateName,\n        stateCode: stateCode,\n        placeId: place.place_id,\n        coordinates: {\n          lat: place.geometry.location.lat,\n          lng: place.geometry.location.lng\n        },\n        formattedAddress: place.formatted_address\n      };\n      \n    } catch (error) {\n      return null;\n    }\n  }\n  \n  // Check if two cities are in the same country (US focus)\n  private static isCityInSameCountry(city1: ValidatedCity, city2: ValidatedCity): boolean {\n    // For now, simple check - both should be US cities\n    // Could be enhanced to parse country from formatted_address\n    return city1.formattedAddress.includes('USA') && city2.formattedAddress.includes('USA');\n  }\n  \n  // Calculate distance between two coordinates (Haversine formula)\n  private static calculateDistance(coord1: { lat: number; lng: number }, coord2: { lat: number; lng: number }): number {\n    const R = 3959; // Earth's radius in miles\n    const dLat = this.toRadians(coord2.lat - coord1.lat);\n    const dLon = this.toRadians(coord2.lng - coord1.lng);\n    \n    const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n              Math.cos(this.toRadians(coord1.lat)) * Math.cos(this.toRadians(coord2.lat)) *\n              Math.sin(dLon / 2) * Math.sin(dLon / 2);\n    \n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    return R * c;\n  }\n  \n  private static toRadians(degrees: number): number {\n    return degrees * (Math.PI / 180);\n  }\n}\n\n// Validation helper functions\nexport function validateCityQuery(query: string): { isValid: boolean; error?: string } {\n  if (!query || query.trim().length < 2) {\n    return { isValid: false, error: 'City name must be at least 2 characters long' };\n  }\n  \n  if (query.length > 100) {\n    return { isValid: false, error: 'City name is too long' };\n  }\n  \n  // Basic validation - letters, spaces, commas only\n  const validCharsRegex = /^[a-zA-Z\\s,.-]+$/;\n  if (!validCharsRegex.test(query)) {\n    return { isValid: false, error: 'City name contains invalid characters' };\n  }\n  \n  return { isValid: true };\n}\n\n// Rate limiting helper (simple in-memory implementation)\nclass RateLimiter {\n  private requests: Map<string, number[]> = new Map();\n  \n  // Allow max 10 requests per minute per IP\n  canMakeRequest(identifier: string, maxRequests: number = 10, windowMinutes: number = 1): boolean {\n    const now = Date.now();\n    const windowMs = windowMinutes * 60 * 1000;\n    \n    if (!this.requests.has(identifier)) {\n      this.requests.set(identifier, []);\n    }\n    \n    const requests = this.requests.get(identifier)!;\n    \n    // Remove old requests outside the window\n    const validRequests = requests.filter(timestamp => now - timestamp < windowMs);\n    \n    if (validRequests.length >= maxRequests) {\n      return false;\n    }\n    \n    // Add current request\n    validRequests.push(now);\n    this.requests.set(identifier, validRequests);\n    \n    return true;\n  }\n}\n\nexport const googlePlacesRateLimiter = new RateLimiter();","usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/lib/logger.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/lib/matching-module.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getCitiesWithinRadiusComprehensive' is defined but never used.","line":5,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":44},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":123,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":123,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":193,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":193,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":209,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":209,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// MATCHING MODULE - Completely separate buyer-realtor lead matching system\n// Self-contained, no interference with existing property matching\n\nimport { FirebaseDB } from './firebase-db';\nimport { getCitiesWithinRadiusComprehensive } from './comprehensive-cities';\n\n// Separate interfaces for the matching module\nexport interface BuyerLinkProfile {\n  id: string;\n  userId: string;\n  firstName: string;\n  lastName: string;\n  email: string;\n  phone: string;\n  city: string; // Single city only - where buyer wants to live\n  state: string;\n  maxMonthlyPayment: number;\n  maxDownPayment: number;\n  languages: string[];\n  likedPropertyIds: string[];\n  isAvailable: boolean; // Can be purchased by realtors\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface RealtorMatchProfile {\n  cities: string[];\n  languages: string[];\n  state: string;\n}\n\nexport interface LeadMatch {\n  buyerLinkId: string;\n  buyer: BuyerLinkProfile;\n  matchScore: number;\n  matchReasons: string[];\n}\n\nexport class MatchingModule {\n  \n  // Create buyer lead profile (separate from regular buyer profiles)\n  static async createBuyerLinkProfile(data: {\n    userId: string;\n    firstName: string;\n    lastName: string; \n    email: string;\n    phone: string;\n    city: string;\n    maxMonthlyPayment: number;\n    maxDownPayment: number;\n    languages: string[];\n  }): Promise<string> {\n    \n    try {\n      // Parse location\n      const cityParts = data.city.split(',');\n      const city = cityParts[0]?.trim();\n      const state = cityParts[1]?.trim() || 'TX';\n      \n      \n      const profile: Omit<BuyerLinkProfile, 'id'> = {\n        userId: data.userId,\n        firstName: data.firstName,\n        lastName: data.lastName,\n        email: data.email,\n        phone: data.phone,\n        city: city,\n        state: state,\n        maxMonthlyPayment: data.maxMonthlyPayment,\n        maxDownPayment: data.maxDownPayment,\n        languages: data.languages,\n        likedPropertyIds: [],\n        isAvailable: true,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      };\n      \n      // Save with state-based ID for efficient querying\n      const linkId = `${state}_${city}_${data.userId}`.replace(/[\\s,]/g, '_');\n      await FirebaseDB.createDocument('buyerLinks', profile, linkId);\n      \n      return linkId;\n      \n    } catch (error) {\n      throw error;\n    }\n  }\n  \n  // Find matching buyers for realtor\n  static async findMatchingBuyers(realtorProfile: RealtorMatchProfile): Promise<LeadMatch[]> {\n    try {\n      \n      // Get all available buyers in realtor's state\n      const availableBuyers = await FirebaseDB.queryDocuments<BuyerLinkProfile>(\n        'buyerLinks',\n        [\n          { field: 'state', operator: '==', value: realtorProfile.state },\n          { field: 'isAvailable', operator: '==', value: true }\n        ]\n      );\n      \n      \n      // Score each buyer based on match quality\n      const matches: LeadMatch[] = [];\n      \n      for (const buyer of availableBuyers) {\n        const matchResult = this.calculateMatch(buyer, realtorProfile);\n        if (matchResult.isMatch) {\n          matches.push({\n            buyerLinkId: buyer.id,\n            buyer: buyer,\n            matchScore: matchResult.score,\n            matchReasons: matchResult.reasons\n          });\n        }\n      }\n      \n      // Sort by match score (highest first)\n      matches.sort((a, b) => b.matchScore - a.matchScore);\n      \n      return matches;\n      \n    } catch (error) {\n      return [];\n    }\n  }\n  \n  // Calculate match between buyer and realtor\n  private static calculateMatch(buyer: BuyerLinkProfile, realtor: RealtorMatchProfile): {\n    isMatch: boolean;\n    score: number;\n    reasons: string[];\n  } {\n    let score = 0;\n    const reasons: string[] = [];\n    \n    // Geographic match (required) - Does realtor serve buyer's city?\n    const cityMatch = realtor.cities.includes(buyer.city);\n    \n    if (!cityMatch) {\n      return { isMatch: false, score: 0, reasons: ['No geographic overlap'] };\n    }\n    \n    score += 50;\n    reasons.push('Geographic match');\n    \n    // Language match (required) - At least 1 common language\n    const languageMatch = buyer.languages.some(lang => \n      realtor.languages.includes(lang)\n    );\n    \n    if (!languageMatch) {\n      return { isMatch: false, score: 0, reasons: ['No language match'] };\n    }\n    \n    score += 50;\n    reasons.push('Language match');\n    \n    // Bonus scoring - How many common languages\n    const commonLanguages = buyer.languages.filter(lang => \n      realtor.languages.includes(lang)\n    ).length;\n    score += Math.min(commonLanguages * 5, 15); // Max 15 bonus points\n    \n    if (buyer.likedPropertyIds.length > 0) {\n      score += 10;\n      reasons.push('Active buyer (has liked properties)');\n    }\n    \n    return {\n      isMatch: true,\n      score: score,\n      reasons: reasons\n    };\n  }\n  \n  // Update buyer when they like properties\n  static async updateBuyerLikedProperties(userId: string, propertyIds: string[]): Promise<void> {\n    try {\n      const existingLinks = await FirebaseDB.queryDocuments<BuyerLinkProfile>(\n        'buyerLinks',\n        [{ field: 'userId', operator: '==', value: userId }]\n      );\n      \n      if (existingLinks.length > 0) {\n        await FirebaseDB.updateDocument('buyerLinks', existingLinks[0].id, {\n          likedPropertyIds: propertyIds,\n          updatedAt: new Date()\n        });\n        \n      }\n      \n    } catch (error) {\n    }\n  }\n  \n  // Mark buyer as purchased by realtor\n  static async purchaseBuyerLead(buyerLinkId: string, realtorUserId: string): Promise<boolean> {\n    try {\n      await FirebaseDB.updateDocument('buyerLinks', buyerLinkId, {\n        isAvailable: false,\n        purchasedBy: realtorUserId,\n        purchasedAt: new Date(),\n        updatedAt: new Date()\n      });\n      \n      return true;\n      \n    } catch (error) {\n      return false;\n    }\n  }\n}","usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/lib/matching.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/lib/pricing.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/lib/property-calculations.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/lib/property-enhancement.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/lib/property-schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/lib/property-search-optimized.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_' is assigned a value but never used.","line":125,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":125,"endColumn":24}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Optimized property search - NO MORE IN-MEMORY FILTERING!\nimport { \n  collection, \n  query, \n  where, \n  orderBy, \n  limit as firestoreLimit,\n  startAfter,\n  getDocs,\n  QueryConstraint,\n  DocumentSnapshot,\n  QueryDocumentSnapshot,\n  DocumentData\n} from 'firebase/firestore';\nimport { db } from './firebase';\nimport { getNearbyCitiesDirect } from './cities-service';\nimport { PropertyListing } from \"./property-schema\";\n\nexport interface PropertySearchCriteria {\n  cities: string[]; // Multiple cities to search\n  state?: string;\n  maxMonthlyPayment?: number;\n  maxDownPayment?: number;\n  minBedrooms?: number;\n  minBathrooms?: number;\n  limit?: number;\n  startAfter?: DocumentSnapshot;\n}\n\nexport interface PropertySearchResult {\n  properties: (PropertyListing & { id: string })[];\n  totalFound: number;\n  hasNextPage: boolean;\n  lastDoc?: DocumentSnapshot;\n  searchTime: number;\n}\n\n/**\n * FAST: Optimized property search using Firestore compound indexes\n */\nexport async function searchPropertiesOptimized(\n  criteria: PropertySearchCriteria\n): Promise<PropertySearchResult> {\n  const startTime = Date.now();\n  \n  if (!db) {\n    throw new Error('Firestore database is not initialized');\n  }\n  \n  try {\n    // Build Firestore query constraints\n    const constraints: QueryConstraint[] = [];\n    \n    // State filter (indexed)\n    if (criteria.state) {\n      constraints.push(where('state', '==', criteria.state));\n    }\n    \n    // Active properties only (indexed)\n    constraints.push(where('isActive', '==', true));\n    \n    // Budget constraints (need compound indexes)\n    if (criteria.maxMonthlyPayment) {\n      constraints.push(where('monthlyPayment', '<=', criteria.maxMonthlyPayment));\n    }\n    \n    if (criteria.maxDownPayment) {\n      constraints.push(where('downPaymentAmount', '<=', criteria.maxDownPayment));\n    }\n    \n    // Property requirements (indexed)\n    if (criteria.minBedrooms) {\n      constraints.push(where('bedrooms', '>=', criteria.minBedrooms));\n    }\n    \n    if (criteria.minBathrooms) {\n      constraints.push(where('bathrooms', '>=', criteria.minBathrooms));\n    }\n    \n    // Order by monthly payment for consistent pagination\n    constraints.push(orderBy('monthlyPayment', 'asc'));\n    \n    // Pagination\n    if (criteria.startAfter) {\n      constraints.push(startAfter(criteria.startAfter));\n    }\n    \n    // Limit results\n    const resultLimit = Math.min(criteria.limit || 20, 100);\n    constraints.push(firestoreLimit(resultLimit + 1)); // +1 to check for next page\n    \n    // Execute optimized Firestore query\n    const propertiesQuery = query(collection(db, 'properties'), ...constraints);\n    const snapshot = await getDocs(propertiesQuery);\n    \n    let properties = snapshot.docs.map(doc => ({ \n      id: doc.id, \n      ...doc.data(),\n      _doc: doc // Keep document reference for pagination\n    } as PropertyListing & { id: string; _doc: QueryDocumentSnapshot<DocumentData, DocumentData> }));\n    \n    // Check if we have more results\n    const hasNextPage = properties.length > resultLimit;\n    if (hasNextPage) {\n      properties = properties.slice(0, resultLimit); // Remove the extra doc\n    }\n    \n    // City filtering (this is the expensive part, but now on smaller dataset)\n    if (criteria.cities && criteria.cities.length > 0) {\n      properties = properties.filter(property => {\n        const propertyCity = property.city?.split(',')[0].trim();\n        if (!propertyCity) return false;\n        \n        // Check if property city matches any of the search cities\n        return criteria.cities.some(searchCity => \n          propertyCity.toLowerCase() === searchCity.toLowerCase()\n        );\n      });\n    }\n    \n    const searchTime = Date.now() - startTime;\n    \n    return {\n      properties: properties.map(p => {\n        const { _doc: _, ...property } = p; // Remove document reference from result\n        return property;\n      }),\n      totalFound: properties.length,\n      hasNextPage: hasNextPage && properties.length === resultLimit,\n      lastDoc: properties.length > 0 ? properties[properties.length - 1]._doc : undefined,\n      searchTime\n    };\n    \n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * FAST: Search properties in city + nearby cities with caching\n */\nexport async function searchPropertiesWithNearby(\n  centerCity: string,\n  state: string,\n  criteria: Omit<PropertySearchCriteria, 'cities' | 'state'>\n): Promise<PropertySearchResult> {\n  const startTime = Date.now();\n  \n  try {\n    // Get all cities to search (center + nearby)\n    const nearbyCities = await getNearbyCitiesDirect(centerCity, state, 30);\n    const allCities = [centerCity, ...nearbyCities.map(city => city.name)];\n    \n    \n    // Use optimized search with all cities\n    const result = await searchPropertiesOptimized({\n      ...criteria,\n      cities: allCities,\n      state: state\n    });\n    \n    const totalTime = Date.now() - startTime;\n    \n    return {\n      ...result,\n      searchTime: totalTime\n    };\n    \n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * FAST: Get similar properties using optimized search\n */\nexport async function getSimilarProperties(\n  originalProperty: PropertyListing & { id: string },\n  limit: number = 10\n): Promise<(PropertyListing & { id: string })[]> {\n  try {\n    const propertyCity = originalProperty.city?.split(',')[0].trim();\n    if (!propertyCity) {\n      return [];\n    }\n    \n    // Get nearby cities for the original property\n    const nearbyCities = await getNearbyCitiesDirect(\n      propertyCity,\n      originalProperty.state,\n      30\n    );\n    \n    const searchCities = [propertyCity, ...nearbyCities.map(city => city.name)];\n    \n    // Search for similar properties\n    const result = await searchPropertiesOptimized({\n      cities: searchCities,\n      state: originalProperty.state,\n      maxMonthlyPayment: originalProperty.monthlyPayment * 1.2, // 20% higher\n      maxDownPayment: originalProperty.downPaymentAmount * 1.2,\n      limit: limit + 1 // +1 to exclude original property\n    });\n    \n    // Filter out the original property\n    const similarProperties = result.properties.filter(\n      property => property.id !== originalProperty.id\n    ).slice(0, limit);\n    \n    return similarProperties;\n    \n  } catch {\n    return [];\n  }\n}\n\n/**\n * Build Firestore indexes for optimal performance\n * Run this to get the required indexes\n */\nexport function getRequiredFirestoreIndexes(): string[] {\n  return [\n    // Compound indexes needed for optimal performance\n    'properties: isActive ASC, state ASC, monthlyPayment ASC',\n    'properties: isActive ASC, state ASC, downPaymentAmount ASC, monthlyPayment ASC',\n    'properties: isActive ASC, state ASC, bedrooms ASC, monthlyPayment ASC',\n    'properties: isActive ASC, state ASC, bathrooms ASC, monthlyPayment ASC',\n    'properties: isActive ASC, monthlyPayment ASC, downPaymentAmount ASC',\n    'properties: state ASC, city ASC, monthlyPayment ASC',\n    'properties: nearbyCitiesUpdatedAt ASC'\n  ];\n}","usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/lib/property-system.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_buyerId' is defined but never used.","line":81,"column":33,"nodeType":null,"messageId":"unusedVar","endLine":81,"endColumn":41},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_profileData' is defined but never used.","line":81,"column":51,"nodeType":null,"messageId":"unusedVar","endLine":81,"endColumn":63},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_buyerId' is defined but never used.","line":89,"column":41,"nodeType":null,"messageId":"unusedVar","endLine":89,"endColumn":49},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_buyerId' is defined but never used.","line":99,"column":37,"nodeType":null,"messageId":"unusedVar","endLine":99,"endColumn":45},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_propertyId' is defined but never used.","line":99,"column":55,"nodeType":null,"messageId":"unusedVar","endLine":99,"endColumn":66},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_action' is defined but never used.","line":99,"column":76,"nodeType":null,"messageId":"unusedVar","endLine":99,"endColumn":83},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_buyerId' is defined but never used.","line":107,"column":35,"nodeType":null,"messageId":"unusedVar","endLine":107,"endColumn":43},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_status' is defined but never used.","line":107,"column":53,"nodeType":null,"messageId":"unusedVar","endLine":107,"endColumn":60},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_buyerId' is defined but never used.","line":117,"column":45,"nodeType":null,"messageId":"unusedVar","endLine":117,"endColumn":53},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_propertyId' is defined but never used.","line":125,"column":36,"nodeType":null,"messageId":"unusedVar","endLine":125,"endColumn":47},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_action' is defined but never used.","line":125,"column":57,"nodeType":null,"messageId":"unusedVar","endLine":125,"endColumn":64}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * OwnerFi Property System - Clean Architecture\n * \n * PRINCIPLES:\n * 1. Buyer profiles store only preferences (cities, budget, requirements)\n * 2. Property matches are calculated and stored separately \n * 3. Property actions (like/pass) are stored as immutable events\n * 4. Both buyers and realtors read from the same data sources\n */\n\nimport { PropertyListing } from './property-schema';\n\nexport interface BuyerProfile {\n  id: string;\n  userId: string;\n  firstName: string;\n  lastName: string;\n  email: string;\n  phone: string;\n  \n  // Search Preferences (Step 1)\n  searchCriteria: {\n    cities: string[];           // [\"Jacksonville\", \"Orange Park\", \"Fleming Island\"]\n    state: string;              // \"FL\" \n    maxMonthlyPayment: number;  // 5500\n    maxDownPayment: number;     // 300000\n    minBedrooms?: number;       // 3\n    minBathrooms?: number;      // 2\n    searchRadius: number;       // 25\n  };\n  \n  // Metadata\n  profileComplete: boolean;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface PropertyMatch {\n  id: string;\n  buyerId: string;\n  propertyId: string;\n  \n  // Matching Info\n  matchScore: number;         // 0-100 based on how well it matches criteria\n  matchReasons: string[];     // [\"budget_match\", \"location_match\", \"size_match\"]\n  \n  // Status Tracking (Step 2)\n  status: 'pending' | 'liked' | 'disliked' | 'archived';\n  \n  // Timestamps\n  matchedAt: string;          // When property was first matched to buyer\n  lastActionAt?: string;      // When buyer last interacted with property\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface PropertyAction {\n  id: string;\n  buyerId: string;\n  propertyId: string;\n  \n  // Action Details\n  action: 'like' | 'pass' | 'undo_like' | 'undo_pass';\n  timestamp: string;\n  \n  // Context\n  source: 'dashboard' | 'realtor_shared' | 'email_link';\n  \n  // Metadata\n  createdAt: string;\n}\n\n/**\n * Property System Service\n */\nexport class PropertySystemService {\n  \n  /**\n   * Step 1: Save buyer search preferences (simple, fast)\n   */\n  static async saveBuyerProfile(_buyerId: string, _profileData: Partial<BuyerProfile>): Promise<void> {\n    // ONLY save profile data - no complex calculations\n    // Trigger background matching job separately\n  }\n  \n  /**\n   * Step 2: Background job to calculate property matches\n   */\n  static async calculatePropertyMatches(_buyerId: string): Promise<PropertyMatch[]> {\n    // Run in background, not blocking user interactions\n    // Calculate match scores and reasons\n    // Store in separate 'propertyMatches' collection\n    return [];\n  }\n  \n  /**\n   * Step 3: Record property actions (immutable events)\n   */\n  static async recordPropertyAction(_buyerId: string, _propertyId: string, _action: string): Promise<void> {\n    // Store as immutable event in 'propertyActions' collection\n    // Update current status in 'propertyMatches' collection\n  }\n  \n  /**\n   * Display: Get properties for buyer (dashboard view)\n   */\n  static async getBuyerProperties(_buyerId: string, _status?: string): Promise<PropertyListing[]> {\n    // Read from propertyMatches collection with status filter\n    // Fetch property details for matched IDs\n    // Return full property objects\n    return [];\n  }\n  \n  /**\n   * Display: Get buyer's properties for realtor (realtor view) \n   */\n  static async getBuyerPropertiesForRealtor(_buyerId: string): Promise<PropertyListing[]> {\n    // Identical logic to getBuyerProperties - same data source\n    return [];\n  }\n  \n  /**\n   * Maintenance: Sync property matches when properties change\n   */\n  static async syncPropertyMatches(_propertyId: string, _action: 'add' | 'update' | 'delete'): Promise<void> {\n    // Update all buyer matches when property database changes\n  }\n}","usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/lib/realtor-models.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/lib/simple-auth.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/lib/system-validator.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/lib/unified-db.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/lib/validation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/scripts/create-10-city-test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/scripts/simulate-property-enhancement.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'enhancedMatches' is assigned a value but never used.","line":289,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":289,"endColumn":24}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"#!/usr/bin/env tsx\n\n// SIMULATE PROPERTY ENHANCEMENT - Demo how the system processes properties and enables buyer matching\n// This shows exactly how the comprehensive nearby cities system works for real properties\n\nimport { populateNearbyCitiesForPropertyFast } from '../lib/property-enhancement';\n\ninterface SimulatedProperty {\n  id: string;\n  address: string;\n  city: string;\n  state: string;\n  zipCode: string;\n  price: number;\n  bedrooms: number;\n  bathrooms: number;\n  monthlyPayment: number;\n  downPaymentAmount: number;\n  nearbyCities: string[]; // This gets populated by our system\n}\n\ninterface SimulatedBuyer {\n  id: string;\n  name: string;\n  preferredCity: string;\n  preferredState: string;\n  maxMonthlyPayment: number;\n  maxDownPayment: number;\n}\n\n// Sample properties representing real listings across America\nconst SAMPLE_PROPERTIES: Omit<SimulatedProperty, 'nearbyCities'>[] = [\n  {\n    id: 'prop-dallas-1',\n    address: '1234 Oak Street',\n    city: 'Dallas',\n    state: 'TX',\n    zipCode: '75201',\n    price: 485000,\n    bedrooms: 4,\n    bathrooms: 3,\n    monthlyPayment: 2800,\n    downPaymentAmount: 48500\n  },\n  {\n    id: 'prop-plano-1',\n    address: '567 Maple Avenue',\n    city: 'Plano', \n    state: 'TX',\n    zipCode: '75023',\n    price: 525000,\n    bedrooms: 4,\n    bathrooms: 3.5,\n    monthlyPayment: 3100,\n    downPaymentAmount: 52500\n  },\n  {\n    id: 'prop-memphis-1',\n    address: '890 Beale Street',\n    city: 'Memphis',\n    state: 'TN', \n    zipCode: '38103',\n    price: 285000,\n    bedrooms: 3,\n    bathrooms: 2,\n    monthlyPayment: 1950,\n    downPaymentAmount: 28500\n  },\n  {\n    id: 'prop-austin-1',\n    address: '321 Congress Ave',\n    city: 'Austin',\n    state: 'TX',\n    zipCode: '78701',\n    price: 650000,\n    bedrooms: 3,\n    bathrooms: 2.5,\n    monthlyPayment: 4200,\n    downPaymentAmount: 65000\n  },\n  {\n    id: 'prop-chicago-1',\n    address: '456 Michigan Ave',\n    city: 'Chicago',\n    state: 'IL',\n    zipCode: '60611',\n    price: 750000,\n    bedrooms: 2,\n    bathrooms: 2,\n    monthlyPayment: 4800,\n    downPaymentAmount: 75000\n  },\n  {\n    id: 'prop-nashville-1',\n    address: '789 Music Row',\n    city: 'Nashville',\n    state: 'TN',\n    zipCode: '37203',\n    price: 425000,\n    bedrooms: 3,\n    bathrooms: 2.5,\n    monthlyPayment: 2750,\n    downPaymentAmount: 42500\n  }\n];\n\n// Sample buyers looking in different cities\nconst SAMPLE_BUYERS: SimulatedBuyer[] = [\n  {\n    id: 'buyer-1',\n    name: 'John Smith',\n    preferredCity: 'Irving', // Near Dallas\n    preferredState: 'TX',\n    maxMonthlyPayment: 3000,\n    maxDownPayment: 50000\n  },\n  {\n    id: 'buyer-2', \n    name: 'Maria Garcia',\n    preferredCity: 'Germantown', // Near Memphis\n    preferredState: 'TN',\n    maxMonthlyPayment: 2200,\n    maxDownPayment: 35000\n  },\n  {\n    id: 'buyer-3',\n    name: 'David Johnson',\n    preferredCity: 'Richardson', // Near Dallas\n    preferredState: 'TX', \n    maxMonthlyPayment: 3500,\n    maxDownPayment: 60000\n  },\n  {\n    id: 'buyer-4',\n    name: 'Sarah Williams',\n    preferredCity: 'Naperville', // Near Chicago\n    preferredState: 'IL',\n    maxMonthlyPayment: 5000,\n    maxDownPayment: 80000\n  },\n  {\n    id: 'buyer-5',\n    name: 'Mike Brown',\n    preferredCity: 'Franklin', // Near Nashville\n    preferredState: 'TN',\n    maxMonthlyPayment: 3000,\n    maxDownPayment: 45000\n  }\n];\n\nasync function simulatePropertyEnhancement(): Promise<void> {\n  console.log('üè† SIMULATING COMPREHENSIVE PROPERTY ENHANCEMENT');\n  console.log('===============================================');\n  console.log('Demonstrating how the system processes real properties and enables buyer matching\\n');\n\n  const enhancedProperties: SimulatedProperty[] = [];\n  \n  // Step 1: Process each property with comprehensive nearby cities\n  console.log('üìù STEP 1: ENHANCING PROPERTIES WITH NEARBY CITIES');\n  console.log('‚îÄ'.repeat(55));\n\n  for (let i = 0; i < SAMPLE_PROPERTIES.length; i++) {\n    const property = SAMPLE_PROPERTIES[i];\n    console.log(`\\n${(i + 1).toString().padStart(2)}. üè° Processing ${property.address}`);\n    console.log(`   Location: ${property.city}, ${property.state}`);\n    console.log(`   Price: $${property.price.toLocaleString()}`);\n    console.log(`   Monthly Payment: $${property.monthlyPayment}`);\n\n    try {\n      const startTime = Date.now();\n      \n      // Use our comprehensive system to get nearby cities\n      const nearbyCities = await populateNearbyCitiesForPropertyFast(\n        property.city,\n        property.state,\n        30\n      );\n\n      const processingTime = Date.now() - startTime;\n      \n      console.log(`   üîç Found ${nearbyCities.length} cities within 30 miles`);\n      console.log(`   ‚è±Ô∏è  Processing time: ${processingTime}ms`);\n      \n      if (nearbyCities.length > 0) {\n        console.log(`   üèòÔ∏è  Sample nearby cities: ${nearbyCities.slice(0, 8).join(', ')}${nearbyCities.length > 8 ? '...' : ''}`);\n        \n        // Create enhanced property\n        const enhancedProperty: SimulatedProperty = {\n          ...property,\n          nearbyCities: nearbyCities\n        };\n        \n        enhancedProperties.push(enhancedProperty);\n        console.log(`   ‚úÖ Property enhanced and saved with ${nearbyCities.length} nearby cities`);\n      } else {\n        console.log(`   ‚ö†Ô∏è  No nearby cities found`);\n        enhancedProperties.push({ ...property, nearbyCities: [] });\n      }\n\n    } catch (error) {\n      console.log(`   ‚ùå Error processing ${property.city}, ${property.state}: ${(error as Error).message}`);\n      enhancedProperties.push({ ...property, nearbyCities: [] });\n    }\n  }\n\n  console.log('\\n' + '='.repeat(60));\n  console.log('üë• STEP 2: DEMONSTRATING BUYER-PROPERTY MATCHING');\n  console.log('='.repeat(60));\n  \n  // Step 2: Demonstrate buyer-property matching\n  let totalMatches = 0;\n  let matchesFound = 0;\n\n  for (const buyer of SAMPLE_BUYERS) {\n    console.log(`\\nüîç Buyer: ${buyer.name} looking in ${buyer.preferredCity}, ${buyer.preferredState}`);\n    console.log(`   Budget: $${buyer.maxMonthlyPayment}/month, $${buyer.maxDownPayment.toLocaleString()} down`);\n    \n    const matchedProperties = [];\n    \n    // Check each enhanced property for matches\n    for (const property of enhancedProperties) {\n      let isMatch = false;\n      let matchReason = '';\n      \n      // Direct city match\n      if (property.city.toLowerCase() === buyer.preferredCity.toLowerCase() && \n          property.state === buyer.preferredState) {\n        isMatch = true;\n        matchReason = 'Direct city match';\n      }\n      // Nearby city match (this is the new enhanced functionality)\n      else if (property.nearbyCities.some(city => \n        city.toLowerCase() === buyer.preferredCity.toLowerCase()\n      )) {\n        isMatch = true;\n        matchReason = 'Nearby city match (enhanced)';\n      }\n      \n      // Budget compatibility check\n      if (isMatch && \n          property.monthlyPayment <= buyer.maxMonthlyPayment &&\n          property.downPaymentAmount <= buyer.maxDownPayment) {\n        \n        matchedProperties.push({\n          property,\n          matchReason\n        });\n      }\n    }\n    \n    if (matchedProperties.length > 0) {\n      console.log(`   ‚úÖ Found ${matchedProperties.length} matching properties:`);\n      matchesFound++;\n      totalMatches += matchedProperties.length;\n      \n      matchedProperties.forEach((match, index) => {\n        console.log(`      ${index + 1}. ${match.property.address} in ${match.property.city}, ${match.property.state}`);\n        console.log(`         üí∞ $${match.property.price.toLocaleString()} | $${match.property.monthlyPayment}/month`);\n        console.log(`         üéØ ${match.matchReason}`);\n      });\n    } else {\n      console.log(`   ‚ö†Ô∏è  No matching properties found within budget`);\n    }\n  }\n\n  console.log('\\n' + '='.repeat(60));\n  console.log('üìä COMPREHENSIVE RESULTS ANALYSIS');\n  console.log('='.repeat(60));\n\n  // Step 3: Comprehensive analysis\n  const totalProperties = enhancedProperties.length;\n  const propertiesWithNearbyCities = enhancedProperties.filter(p => p.nearbyCities.length > 0).length;\n  const totalNearbyCitiesFound = enhancedProperties.reduce((sum, p) => sum + p.nearbyCities.length, 0);\n  const avgNearbyCities = totalNearbyCitiesFound / propertiesWithNearbyCities || 0;\n\n  console.log(`\\nüè† PROPERTY ENHANCEMENT RESULTS:`);\n  console.log(`   Total Properties: ${totalProperties}`);\n  console.log(`   Properties Enhanced: ${propertiesWithNearbyCities}/${totalProperties} (${(propertiesWithNearbyCities/totalProperties*100).toFixed(1)}%)`);\n  console.log(`   Total Nearby Cities Found: ${totalNearbyCitiesFound}`);\n  console.log(`   Average Nearby Cities per Property: ${avgNearbyCities.toFixed(1)}`);\n\n  console.log(`\\nüë• BUYER MATCHING RESULTS:`);\n  console.log(`   Buyers Tested: ${SAMPLE_BUYERS.length}`);\n  console.log(`   Buyers with Matches: ${matchesFound}/${SAMPLE_BUYERS.length} (${(matchesFound/SAMPLE_BUYERS.length*100).toFixed(1)}%)`);\n  console.log(`   Total Property Matches: ${totalMatches}`);\n  console.log(`   Average Matches per Buyer: ${(totalMatches/SAMPLE_BUYERS.length).toFixed(1)}`);\n\n  // Enhanced matching impact\n  const enhancedMatches = totalMatches; // In real system, we'd track which are enhanced vs direct\n  console.log(`\\nüöÄ ENHANCED MATCHING IMPACT:`);\n  console.log(`   Properties now discoverable in multiple city searches`);\n  console.log(`   Buyers can find properties in nearby areas they weren't searching`);\n  console.log(`   Dramatically expanded property-buyer connection opportunities`);\n\n  // Property-by-property breakdown\n  console.log(`\\nüìã PROPERTY-BY-PROPERTY BREAKDOWN:`);\n  enhancedProperties.forEach((property, index) => {\n    const searchExpansion = property.nearbyCities.length + 1; // Original city + nearby cities\n    console.log(`   ${(index + 1).toString().padStart(2)}. ${property.city}, ${property.state}:`);\n    console.log(`       Nearby Cities: ${property.nearbyCities.length}`);\n    console.log(`       Search Expansion: ${searchExpansion}x (discoverable in ${searchExpansion} different city searches)`);\n    console.log(`       Enhanced Discovery: Property now appears when buyers search in ANY of ${searchExpansion} cities`);\n  });\n\n  console.log(`\\nüéØ SYSTEM VALIDATION:`);\n  \n  if (propertiesWithNearbyCities >= totalProperties * 0.9 && avgNearbyCities >= 15) {\n    console.log(`   üéâ EXCELLENT: System working perfectly!`);\n    console.log(`   ‚úÖ All properties have comprehensive nearby cities`);\n    console.log(`   ‚úÖ Buyer-property matching dramatically improved`);\n    console.log(`   ‚úÖ Properties discoverable across entire metropolitan areas`);\n    console.log(`   ‚úÖ System ready for maximum buyer engagement`);\n  } else {\n    console.log(`   ‚úÖ GOOD: System functional with solid results`);\n    console.log(`   üí° Continuous improvement opportunities available`);\n  }\n\n  console.log(`\\nüí° KEY INSIGHTS:`);\n  console.log(`   ‚Ä¢ BEFORE: Properties only discoverable by exact city name`);\n  console.log(`   ‚Ä¢ NOW: Properties discoverable across entire metropolitan areas`);\n  console.log(`   ‚Ä¢ IMPACT: ${avgNearbyCities.toFixed(0)}x average increase in search visibility per property`);\n  console.log(`   ‚Ä¢ RESULT: Buyers find more relevant properties, properties reach more buyers`);\n\n  console.log(`\\n‚ú® Comprehensive property enhancement simulation completed successfully!`);\n  console.log(`üöÄ The system is proven to work with real property data and buyer scenarios.`);\n}\n\n// Run the simulation\nif (require.main === module) {\n  simulatePropertyEnhancement().catch(error => {\n    console.error('üí• Simulation failed:', error);\n    process.exit(1);\n  });\n}\n\nexport { simulatePropertyEnhancement };","usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/scripts/test-consolidation.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'BuyerSystemMigration' is defined but never used.","line":7,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'stats' is assigned a value but never used.","line":13,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'dallasBuyerId' is assigned a value but never used.","line":16,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'memphisBuyerId' is assigned a value but never used.","line":29,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'memphisMatches' is assigned a value but never used.","line":49,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":49,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'crossStateMatches' is assigned a value but never used.","line":56,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":56,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'purchaseResult' is assigned a value but never used.","line":64,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":64,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'postPurchaseMatches' is assigned a value but never used.","line":70,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":70,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'finalStats' is assigned a value but never used.","line":78,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":78,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":81,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":81,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"#!/usr/bin/env tsx\n\n// CONSOLIDATION TEST SCRIPT - Test the buyer system consolidation locally\n// This script validates all components without needing a running server\n\nimport { ConsolidatedLeadSystem } from '../lib/consolidated-lead-system';\nimport { BuyerSystemMigration } from '../lib/buyer-system-migration';\n\nasync function testConsolidation() {\n  \n  try {\n    // Test 1: Consolidated Lead System Statistics\n    const stats = await ConsolidatedLeadSystem.getSystemStatistics();\n    \n    // Test 2: Create Dallas buyer\n    const dallasBuyerId = await ConsolidatedLeadSystem.createBuyerProfile({\n      userId: `test_dallas_buyer_${Date.now()}`,\n      firstName: 'John',\n      lastName: 'Smith',\n      email: 'john.smith.dallas@test.com',\n      phone: '555-123-4567',\n      city: 'Dallas, TX',\n      maxMonthlyPayment: 2000,\n      maxDownPayment: 50000,\n      languages: ['English']\n    });\n    \n    // Test 3: Create Memphis buyer\n    const memphisBuyerId = await ConsolidatedLeadSystem.createBuyerProfile({\n      userId: `test_memphis_buyer_${Date.now()}`,\n      firstName: 'Maria',\n      lastName: 'Garcia',\n      email: 'maria.garcia.memphis@test.com',\n      phone: '555-987-6543',\n      city: 'Memphis, TN',\n      maxMonthlyPayment: 1800,\n      maxDownPayment: 40000,\n      languages: ['English']\n    });\n    \n    // Test 4: Test Dallas realtor matching\n    const dallasMatches = await ConsolidatedLeadSystem.findAvailableLeads({\n      cities: ['Dallas'],\n      languages: ['English'],\n      state: 'TX'\n    });\n    \n    // Test 5: Test Memphis realtor matching  \n    const memphisMatches = await ConsolidatedLeadSystem.findAvailableLeads({\n      cities: ['Memphis'],\n      languages: ['English'],\n      state: 'TN'\n    });\n    \n    // Test 6: Cross-state matching (should fail)\n    const crossStateMatches = await ConsolidatedLeadSystem.findAvailableLeads({\n      cities: ['Dallas'], \n      languages: ['English'],\n      state: 'TN' // TN realtor looking for Dallas buyers (should fail)\n    });\n    \n    // Test 7: Purchase a lead\n    if (dallasMatches.length > 0) {\n      const purchaseResult = await ConsolidatedLeadSystem.purchaseLead(\n        dallasMatches[0].id,\n        'test_realtor_123'\n      );\n      \n      // Verify buyer is no longer available\n      const postPurchaseMatches = await ConsolidatedLeadSystem.findAvailableLeads({\n        cities: ['Dallas'],\n        languages: ['English'],\n        state: 'TX'\n      });\n    }\n    \n    // Test 8: Final statistics\n    const finalStats = await ConsolidatedLeadSystem.getSystemStatistics();\n    \n    \n  } catch (error) {\n    process.exit(1);\n  }\n}\n\n// Run the test\nif (require.main === module) {\n  testConsolidation();\n}","usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/scripts/validate-firebase-connection.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":33,"column":69,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":72,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1191,1194],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1191,1194],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"#!/usr/bin/env tsx\n\n// FIREBASE CONNECTION VALIDATOR - Ensures Firebase is working before running tests\n// This validates that Firebase is initialized and we can read/write data\n\nimport { FirebaseDB } from '../lib/firebase-db';\n\nasync function validateFirebaseConnection() {\n  \n  try {\n    \n    // Test: Try to query existing buyerProfiles\n    const existingBuyers = await FirebaseDB.queryDocuments('buyerProfiles', []);\n    \n    // Test: Try to query existing buyerLinks (for migration comparison)\n    const existingLinks = await FirebaseDB.queryDocuments('buyerLinks', []);\n    \n    // Test: Check if we have realtor users\n    const existingRealtors = await FirebaseDB.queryDocuments('users', [\n      { field: 'role', operator: '==', value: 'realtor' }\n    ]);\n    \n    // Test: Create a test document to verify write permissions\n    const testData = {\n      testId: `validation_test_${Date.now()}`,\n      message: 'Firebase connection validation',\n      timestamp: new Date().toISOString()\n    };\n    \n    const testDoc = await FirebaseDB.createDocument('_test_validation', testData);\n    \n    // Clean up test document\n    await FirebaseDB.deleteDocument('_test_validation', (testDoc as any).id);\n    \n    \n    // Recommendations\n    if (existingLinks.length > 0 && existingBuyers.length > 0) {\n    }\n    \n    if (existingBuyers.length === 0 && existingLinks.length === 0) {\n    }\n    \n    return {\n      success: true,\n      buyerProfiles: existingBuyers.length,\n      buyerLinks: existingLinks.length,\n      realtorUsers: existingRealtors.length\n    };\n    \n  } catch (error) {\n    \n    return {\n      success: false,\n      error: (error as Error).message\n    };\n  }\n}\n\n// Run validation\nif (require.main === module) {\n  validateFirebaseConnection().then(result => {\n    if (!result.success) {\n      process.exit(1);\n    }\n  });\n}\n\nexport { validateFirebaseConnection };","usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/types/next-auth.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/src/types/session.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/tailwind.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/test-dallas-scenario.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/abdullahabunasrah/Desktop/ownerfi/validation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]
